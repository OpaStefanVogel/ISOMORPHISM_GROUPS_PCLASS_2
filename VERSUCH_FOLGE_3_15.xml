<LOS>
<FILE id="P01" inhalt="R von 1...n auf 0...(n-1) umstellen">
#
Read("PcgsOfR.txt");
R4:=function(V)#neu
  local i,R,V2;
  V2:=List(V);Add(V2,V2[1],1);Add(V2,V2[1],1);
  R:=[[0],[0,0],[1,1,1]];
  for i in [4..Size(V)+1] do Add(R,ListWithIdenticalEntries(i,0)); od;
  Add(R,V2);
  return R;
  end;

R:=R4([0,0]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,1]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([1,1]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([1,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([2,3]);P:=PcgsOfR(R);IdSmallGroup(P);

R:=R4([0,0,0,0,0,0]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,0,0,1]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,0,0,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,0,2,3]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,0,1,1]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,0,1,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,0,1,1,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,1,1,1,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,1,1,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,0,1,2,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,1,1,1,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([0,1,1,2,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([1,1,1,2,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([1,1,1,1,2,2]);P:=PcgsOfR(R);IdSmallGroup(P);
#Ergebnis: viele gleiche
  </FILE>

<FILE id="P02" inhalt="n=16 als 1:0">
Read("XSAMMEL.txt");
ClearProfile();
ERG:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
for i1 in IS2 do 
  for i2 in IS2 do
    for i3 in IS do
      for i4 in IS do
        RT:=[i1+i3,i2+i4];
        Print("\n",RT);
        R:=R4(RT);
        G:=PcgsOfR(R);
        Print(IdSmallGroup(G),"\c");
        NEU:=RMAXSUCH(G);
        if NEU>0 then Add(ERG,RT); fi; 
        od;
      od;
    od;
  od;
ERG;
  </FILE>

<FILE id="P03" inhalt="n=16,32 als 1:0 mit ListX">
Read("XSAMMEL.txt");
ClearProfile();
FUN:=function(arg)#alt
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
  Print("\n",RT);
  R:=R4(RT);
  G:=PcgsOfR(R);
  Print(IdSmallGroup(G),"\c");
  NEU:=RMAXSUCH(G);
  if NEU>0 then Add(ERG,RT); fi;
  return [];
  end;
 
ERG:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
ListX(IS2,IS2,IS,IS,FUN);;ERG;
ListX(IS2,IS2,IS2,IS,IS,IS,FUN);;ERG;
ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN);;ERG;
[ [ 0, 0 ], [ 0, 1 ], [ 1, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ], 
  [ 0, 0, 0 ], [ 0, 1, 1 ], [ 0, 0, 2 ], [ 0, 1, 2 ], [ 1, 1, 2 ], 
  [ 0, 2, 0 ], [ 1, 2, 1 ], [ 2, 2, 2 ] ]
ok warum dauert das was schon drin ist so lange, das ist die momentane Schwachstelle
  ok mit RTT() jetzt ok
  </FILE>

<FILE id="P04" inhalt="RTT() als schnelles RMAXSUCH wenn schon drin, n=16,32,64">
Read("XSAMMEL.txt");
ClearProfile();
R:=R4([1,2]);P:=PcgsOfR(R);IdSmallGroup(P);
R:=R4([2,3]);P:=PcgsOfR(R);IdSmallGroup(P);
#muss ich ja so machen dass mit dem R gesucht wird und nicht G bilden
NEU:=RMAXSUCH(P);
NEU:=RMAXSUCH(P);#da soll schon bei 0 Schluss sein
#so, aus QY13 rausmach:
PL:=Reversed(GeneratorsOfGroup(P));

RTT:=function()#neu
  if HRES=[] then GR:=Group(P.1^0); else GR:=Group(HRES); fi;
  ri:=PL[S];
  Add(HRES,ri,1);HRESEXT[S]:=ri;
#  QY10(HRES,S,GR);#ob HRES wirklich ein pcgs ist, deshalb PL
  PNEU:=QY11(HRES,S);
  R[S]:=List(PNEU);
  HRESMERK:=List(HRES);
  n:=nn;ZR:=QY21(HRES,S,nn,ZEIGER,PNEU);;
  HRES:=List(ZR[1]);WEGLI[S]:=ZR[5];ZR3MERK:=ZR[3];
    S:=S+1;nn:=2*nn;ZEIGER:=ZR[2];;
  if ZR3MERK=-1 then return -10000; else
    if ZEIGER=[] then return 1; else return RTT()+1; fi;
    fi;
  end;

S:=1;nn:=1;HRES:=[];HRESEXT:=[];R:=[];WEGLI:=[];
ZEIGER:=XSAMMEL;;
NEU:=RTT();
inh:=1;
FUN:=function(arg)#neu
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
  Print("\n",RT);
  R:=R4(RT);RSIZE:=Size(R);
  P:=PcgsOfR(R);
#  Print(IdSmallGroup(P),"\c");
PL:=Reversed(GeneratorsOfGroup(P));
S:=1;nn:=1;HRES:=[];HRESEXT:=[];R:=[];WEGLI:=[];
ZEIGER:=XSAMMEL;;
  NEU:=RTT();Print(NEU);
  if not NEU=RSIZE then inh:=inh+1;RMAXSUCH(P);Add(ERG,RT); fi;
  return [];
  end;

ClearProfile();
ERG:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
ListX(IS2,IS2,IS,IS,FUN);;ERG;#16
ListX(IS2,IS2,IS2,IS,IS,IS,FUN);;ERG;#32
ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN);;ERG;#64
ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN);;ERG;#128
ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN);;ERG;#256
ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,FUN);;ERG;#512
ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,FUN);;ERG;#1024
XSAMMELVIEWER4(XSAMMEL);
DisplayProfile();
GasmanStatistics();

ok na, ganz ordentliches Ergebnis, reicht für heute: 3+3,2+6,3+11
ERG:=[ [ 0, 0 ], [ 0, 1 ], [ 1, 1 ], 
  [ 0, 2 ], [ 1, 2 ], [ 2, 3 ], #16
  [ 0, 0, 0 ], [ 0, 1, 1 ], 
  [ 0, 0, 2 ], [ 0, 1, 2 ], [ 1, 1, 2 ], 
  [ 0, 2, 0 ], [ 1, 2, 1 ], [ 2, 2, 2 ], #32
  [ 0, 0, 0, 0 ], [ 0, 0, 0, 1 ], [ 0, 1, 1, 1 ], 
  [ 0, 0, 0, 2 ], [ 0, 1, 1, 2 ], [ 0, 0, 2, 2 ], [ 0, 0, 2, 3 ], #[0012] fehlt
  [ 0, 1, 2, 2 ], [ 1, 1, 2, 2 ], [ 0, 2, 0, 0 ], [ 0, 2, 0, 1 ], 
  [ 1, 2, 1, 1 ], [ 2, 2, 2, 2 ], [ 2, 2, 2, 3 ], #64, -1
  [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1 ], 
  [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 1, 2 ], [ 0, 1, 1, 1, 2 ], [ 0, 0, 2, 2, 2 ], [ 0, 0, 2, 2, 3 ], 
  [ 0, 1, 2, 2, 2 ], [ 1, 1, 2, 2, 2 ], [ 0, 2, 0, 0, 0 ], [ 0, 2, 0, 0, 1 ], 
  [ 1, 2, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3 ], #128, -0
  [ 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 1 ], 
  [ 0, 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 1, 2 ], [ 0, 1, 1, 1, 1, 2 ],
  [ 0, 0, 2, 2, 2, 2 ], [ 0, 0, 2, 2, 2, 3 ],
  [ 0, 1, 2, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ], [ 0, 2, 0, 0, 0, 0 ],
  #weiter so dazu: 
  [ 0, 2, 0, 0, 0, 1 ], 
  [ 1, 2, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2, 3 ]
  ] ;
 
  [ 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 1 ], 
  [ 0, 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 1, 2 ], [ 0, 1, 1, 1, 1, 2 ], [ 0, 0, 2, 2, 2, 2 ], [ 0, 0, 2, 2, 2, 3 ]
  [ 0, 1, 2, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ], [ 0, 2, 0, 0, 0, 0 ], ...dann >2G
#umgekehrt [1,0]
ClearProfile();
ERG:=[];XSAMMEL:=[];
IS:=[1,0];IS2:=[0,2];
[ [ 1, 1 ], [ 1, 0 ], [ 0, 0 ], [ 1, 3 ], [ 0, 3 ], [ 3, 2 ], 
  [ 1, 1, 1 ], [ 1, 0, 0 ], [ 1, 1, 3 ], [ 1, 0, 3 ], [ 0, 0, 3 ], 
  [ 1, 3, 1 ], [ 0, 3, 0 ], [ 3, 3, 3 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 0 ], 
  [ 1, 0, 0, 0 ], [ 1, 1, 1, 3 ], [ 1, 0, 0, 3 ], [ 1, 1, 3, 3 ], 
  [ 1, 1, 3, 2 ], [ 1, 0, 3, 3 ], [ 0, 0, 3, 3 ], [ 1, 3, 1, 1 ], 
  [ 1, 3, 1, 0 ], [ 0, 3, 0, 0 ], [ 3, 3, 3, 3 ], [ 3, 3, 3, 2 ] ]
[ [ 1, 1 ], [ 1, 0 ], [ 0, 0 ], [ 1, 3 ], [ 0, 3 ], [ 3, 2 ], [ 1, 1, 1 ],
  [ 1, 0, 0 ], [ 1, 1, 3 ], [ 1, 0, 3 ], [ 0, 0, 3 ], [ 1, 3, 1 ],
  [ 0, 3, 0 ], [ 3, 3, 3 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 0 ], [ 1, 0, 0, 0 ],
  [ 1, 1, 1, 3 ], [ 1, 0, 0, 3 ], [ 1, 1, 3, 3 ], [ 1, 1, 3, 2 ],
  [ 1, 0, 3, 3 ], [ 0, 0, 3, 3 ], [ 1, 3, 1, 1 ], [ 1, 3, 1, 0 ],
  [ 0, 3, 0, 0 ], [ 3, 3, 3, 3 ], [ 3, 3, 3, 2 ], [ 1, 1, 1, 1, 1 ],
  [ 1, 1, 1, 1, 0 ], [ 1, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 3 ], [ 1, 1, 1, 0, 3 ],
  [ 1, 0, 0, 0, 3 ], [ 1, 1, 3, 3, 3 ], [ 1, 1, 3, 3, 2 ], [ 1, 0, 3, 3, 3 ],
  [ 0, 0, 3, 3, 3 ], [ 1, 3, 1, 1, 1 ], [ 1, 3, 1, 1, 0 ] ..... und dann bei [ 0, 3, 0, 0, 0 ] steckengelieben.
aber jetzt durch
[ [ 1, 1 ], [ 1, 0 ], [ 0, 0 ], [ 1, 3 ], [ 0, 3 ], [ 3, 2 ], [ 1, 1, 1 ], 
  [ 1, 0, 0 ], [ 1, 1, 3 ], [ 1, 0, 3 ], [ 0, 0, 3 ], [ 1, 3, 1 ], [ 0, 3, 0 ], [ 3, 3, 3 ], 
  [ 1, 1, 1, 1 ], [ 1, 1, 1, 0 ], [ 1, 0, 0, 0 ], [ 1, 1, 1, 3 ], [ 1, 0, 0, 3 ], [ 1, 1, 3, 3 ], 
  [ 1, 1, 3, 2 ], [ 1, 0, 3, 3 ], [ 0, 0, 3, 3 ], [ 1, 3, 1, 1 ], [ 1, 3, 1, 0 ], [ 0, 3, 0, 0 ], 
  [ 3, 3, 3, 3 ], [ 3, 3, 3, 2 ], [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 0 ], [ 1, 0, 0, 0, 0 ], 
  [ 1, 1, 1, 1, 3 ], [ 1, 1, 1, 0, 3 ], [ 1, 0, 0, 0, 3 ], [ 1, 1, 3, 3, 3 ], [ 1, 1, 3, 3, 2 ], 
  [ 1, 0, 3, 3, 3 ], [ 0, 0, 3, 3, 3 ], [ 1, 3, 1, 1, 1 ], [ 1, 3, 1, 1, 0 ], [ 0, 3, 0, 0, 0 ], 
  [ 3, 3, 3, 3, 3 ], [ 3, 3, 3, 3, 2 ] ]
.. dauert auch alles zu lange, da war ich schon weiter (oder war das noch alt?)
.. danach kann ich auch die Sortierung innerhalb QY13 herausnehmen, das mit 1001 und so.
.. und auch ob sowas wie RTT() auch in QY13() rein muss.
.. und Diagonale auswerten
  </FILE>

<FILE id="P05" inhalt="Fehlersuch R:=R4([0,2,0,0])">
ERG:=[];XSAMMEL:=[];
R:=R4([0,2,0,0]);P:=PcgsOfR(R);RMAXSUCH(P);
ok aha, da hat die Umschaltung von IdSmallGroup auf inh nicht funktioniert
  .. muss ich später nochmal versuchen
ok dann gap anders starten, mit
#gap -g -g -s 2000000k -a 2000000k -m 2000000k -o 2000000k
#gap -g -s 1000000k -a 1000000k -m 1000000k -o 1000000k
ok hab jetzt auch den Wechsel der Sortierreihenfolge einfach mit return -RET
OK bringt aber auch nichts, also jetzt definitiv Adder weitermachen
  ok und der ist erstmal raus, mit deuticher Verbesserung
  ok da war doch tatsächlich was mit der Sortierung durcheinandergeraten,
    ok jetzt wieder durchgängig alles PMAX abwärts

außerdem
#DisplayProfile();ClearProfile();
#DisplayProfile();
#GasmanStatistics();
#GasmanLimits();
  </FILE>

<FILE id="P06" inhalt="wie hat das alles funktioniert">
XSAMMEL:=[];R:=R4([2,3]);P:=PcgsOfR(R);RMAXSUCH(P);XSAMMELVIEWER0(XSAMMEL);#16,2
XSAMMEL:=[];R:=R4([0,2]);P:=PcgsOfR(R);RMAXSUCH(P);XSAMMELVIEWER0(XSAMMEL);#16,3
XSAMMEL:=[];R:=R4([1,2]);P:=PcgsOfR(R);RMAXSUCH(P);XSAMMELVIEWER0(XSAMMEL);#16,4
#was schon so in XSAMMEL ist:
PARTZ:=0;PARTZAHL(XSAMMEL);PARTZ;#=Zeilenzahl bei XSAMMEL2
WEG:=[1,2,2,4];PART:=WEGEDISP(WEG,XSAMMEL,1);#führt zur Zeile mit &lt;== [16,4]
ALLEWEGEDISP(PART,XSAMMEL,1);#ist aber noch nicht das erwartete, da muss noch mehr hinzu

#das hier findet RMAX aus dem WEGLI nach RMAXSUCH:
PART:=WEGEDISP(WEGLI,XSAMMEL,1);
RMAX:=[];PARTFIND(XSAMMEL,PART);RMAX;

#zwischendurch: sind gleich
XSAMMEL:=[];R:=R4([0,1,1,1,1,1]);P:=PcgsOfR(R);RMAXSUCH(P);XSAMMELVIEWER4(XSAMMEL);#16,4
R:=R4([1,1,1,1,1,1]);P:=PcgsOfR(R);
PL:=Reversed(GeneratorsOfGroup(P));
S:=1;nn:=1;HRES:=[];R:=[];WEGLI:=[];
ZEIGER:=XSAMMEL;;
NEU:=RTT();Print(NEU);
.. RTT testet nur Stufe S, das muss noch erweitert werden beim Abzweige nach oben

  </FILE>

<FILE id="P07" inhalt="mit PNEU abwärts ist XSAMMEL keine sortierte Liste mehr">
ok in QY09 wieder return -RET, aber jetzt auch in XMERK umdingsen.
ok in QY14 nach maximalem -P suchen
ok in QY15 XMERK sortieren
nö IsSortedList prüfen in QY08
ok in UMKEHRLIST aus -P neu P-1
ok PositionFirstComponent komplett durch PositionSorted ersetzen
los
T(64) macht noch keinen Unterschied
ClearProfile();
XSAMMEL:=[];R:=R4([0,1,1,1,1,1,1]);P:=PcgsOfR(R);RMAXSUCH(P);XSAMMELVIEWER4(XSAMMEL);#16,4
DisplayProfile();VZ;
  </FILE>

<FILE id="P08" inhalt="zu R die Diagonale bestimmen">
ok iter:=IteratorOfTuples( [0,1], 5 );
ok Anzahl der Einsen je Tupel bestimmen
ok wenn kleiner 3, dann Ergebnis aus Flat(R) holen
ok sonst Ergebnis aus 1. 2. und restlichen Einsen bilden 
ok schließlich Collected
ok funktioniert, es sind paar gleich

DIAG:=function(R)#
  local i,ii,j,k,S,RET,RF,X,Y,Z,POS1,POS2,PROD,GM,XP,YP,ZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);
  j:=1;
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in IteratorOfTuples( [0,1], S ) do
#    Print("\n",i,IZUN(Reversed(i)));
    if 3>Sum(i) then 
#      Print("&lt;3");
      Add(RET,RF[j]);j:=j+1;
      else 
#        Print(">3");
        X:=0*i;Y:=List(X);Z:=List(i);
        POS1:=Position(Z,1);
        X[POS1]:=1;Z[POS1]:=0;XP:=2^(S-POS1);
        POS2:=Position(Z,1);
        Y[POS2]:=1;Z[POS2]:=0;YP:=2^(S-POS2);
#        ZP:=IZUN(Reversed(Z));
        ZP:=0;ii:=1;
        for POS3 in [S,S-1..1] do 
          if Z[POS3]=1 then ZP:=ZP+ii; fi;
          ii:=ii+ii;
          od;          
#        Print("\n  ",X);
#        Print("\n  ",Y);
#        Print("\n  ",Z);
#        PROD:=PR(X)+PR(Y)+PR(Z)+PR(X+Y)+PR(X+Z)+PR(Y+Z);
#if not PR(X)=RET[XP+1] then Error(XP); fi;
        PROD:=GM[RET[XP+1]+1][RET[YP+1]+1];
        PROD:=GM[PROD+1][RET[ZP+1]+1];
        PROD:=GM[PROD+1][RET[XP+YP+1]+1];
        PROD:=GM[PROD+1][RET[XP+ZP+1]+1];
        PROD:=GM[PROD+1][RET[YP+ZP+1]+1];
#        Print(PROD);
        Add(RET,PROD);
#        Print("\n  ",RET);
        fi;
    od;
  return RET;
  end;

R:=R4([0,0]);;D:=DIAG(R);;Collected(D);
R:=R4([0,1]);;D:=DIAG(R);;Collected(D);
R:=R4([1,1]);;D:=DIAG(R);;Collected(D);

for i in ERG do Print("\n",i,Collected(DIAG(R4(i)))); od;

[ 0, 0, 0, 0, 0 ][ [ 0, 96 ], [ 1, 32 ] ]
[ 0, 0, 0, 0, 1 ][ [ 0, 80 ], [ 1, 48 ] ]
[ 0, 1, 1, 1, 1 ][ [ 0, 64 ], [ 1, 64 ] ]
[ 0, 1, 2, 2, 2 ][ [ 0, 64 ], [ 1, 32 ], [ 2, 32 ] ]
[ 1, 1, 2, 2, 2 ][ [ 0, 48 ], [ 1, 48 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 1, 2, 1, 1, 1 ][ [ 0, 48 ], [ 1, 48 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 2, 2, 2, 2, 2 ][ [ 0, 48 ], [ 1, 16 ], [ 2, 48 ], [ 3, 16 ] ]=
[ 2, 2, 2, 2, 3 ][ [ 0, 48 ], [ 1, 16 ], [ 2, 32 ], [ 3, 32 ] ]
[ 0, 1, 1, 1, 2 ][ [ 0, 56 ], [ 1, 40 ], [ 2, 24 ], [ 3, 8 ] ]
[ 0, 0, 0, 1, 2 ][ [ 0, 64 ], [ 1, 32 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 0, 0, 2, 2, 3 ][ [ 0, 64 ], [ 1, 32 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 0, 2, 0, 0, 1 ][ [ 0, 64 ], [ 1, 32 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 0, 0, 0, 0, 2 ][ [ 0, 72 ], [ 1, 24 ], [ 2, 24 ], [ 3, 8 ] ]
[ 0, 0, 2, 2, 2 ][ [ 0, 80 ], [ 1, 16 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 0, 2, 0, 0, 0 ][ [ 0, 80 ], [ 1, 16 ], [ 2, 16 ], [ 3, 16 ] ]=
[ 0, 0, 0, 0, 0, 0 ][ [ 0, 192 ], [ 1, 64 ] ]
[ 0, 0, 0, 0, 0, 1 ][ [ 0, 160 ], [ 1, 96 ] ]
[ 0, 1, 1, 1, 1, 1 ][ [ 0, 128 ], [ 1, 128 ] ]
[ 0, 1, 2, 2, 2, 2 ][ [ 0, 128 ], [ 1, 64 ], [ 2, 64 ] ]
[ 1, 1, 2, 2, 2, 2 ][ [ 0, 96 ], [ 1, 96 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 1, 2, 1, 1, 1, 1 ][ [ 0, 96 ], [ 1, 96 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 2, 2, 2, 2, 2, 2 ][ [ 0, 96 ], [ 1, 32 ], [ 2, 96 ], [ 3, 32 ] ]
[ 2, 2, 2, 2, 2, 3 ][ [ 0, 96 ], [ 1, 32 ], [ 2, 64 ], [ 3, 64 ] ]
[ 0, 1, 1, 1, 1, 2 ][ [ 0, 112 ], [ 1, 80 ], [ 2, 48 ], [ 3, 16 ] ]
[ 0, 0, 0, 0, 1, 2 ][ [ 0, 128 ], [ 1, 64 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 0, 0, 2, 2, 2, 3 ][ [ 0, 128 ], [ 1, 64 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 0, 2, 0, 0, 0, 1 ][ [ 0, 128 ], [ 1, 64 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 0, 0, 0, 0, 0, 2 ][ [ 0, 144 ], [ 1, 48 ], [ 2, 48 ], [ 3, 16 ] ]
[ 0, 0, 2, 2, 2, 2 ][ [ 0, 160 ], [ 1, 32 ], [ 2, 32 ], [ 3, 32 ] ]=
[ 0, 2, 0, 0, 0, 0 ][ [ 0, 160 ], [ 1, 32 ], [ 2, 32 ], [ 3, 32 ] ]=

  </FILE>

<FILE id="P09" inhalt="zu allen R die Diagonale bestimmen">
ok jetzt alle R durchlaufen lassen
los

FUND:=function(arg)#neu
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
  R:=R4(RT);D:=DIAG(R);;C:=Collected(D);#Print(C);
  D:=List(C{[2..Size(C)]},i->i[2]);D:=SortedList(D);Add(D,C[1][2],1);
  if not D in ERGD then Add(ERG,[RT,D]);Add(ERGD,D);Print("\n",RT,D); fi;
# if not NEU=RSIZE then inh:=inh+1;RMAXSUCH(P);Add(ERG,RT); fi;
  return [];
  end;

ClearProfile();
IS:=[0,1];IS2:=[0,2];
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS,IS,FUND);;;Size(ERG);#16
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS,IS,IS,FUND);;;Size(ERG);#32
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUND);;;Size(ERG);#64
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUND);;;Size(ERG);#128
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUND);;;Size(ERG);#256
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,FUND);;;Size(ERG);#512
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,FUND);;;Size(ERG);#1024
ERG:=[];ERGD:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,IS,FUND);;;Size(ERG);#2048

[ 0, 0 ][ 12, 4 ]
[ 0, 1 ][ 8, 8 ]
[ 1, 1 ][ 4, 12 ]
[ 0, 2 ][ 8, 4, 4 ]
[ 1, 2 ][ 4, 4, 8 ]
[ 2, 3 ][ 4, 4, 4, 4 ]6
[ 0, 0, 0 ][ 24, 8 ]
[ 0, 1, 1 ][ 16, 16 ]
[ 0, 0, 2 ][ 20, 4, 4, 4 ]
[ 0, 1, 2 ][ 16, 8, 8 ]
[ 1, 1, 2 ][ 12, 4, 4, 12 ]5
[ 0, 0, 0, 0 ][ 48, 16 ]
[ 0, 0, 0, 1 ][ 40, 24 ]
[ 0, 1, 1, 1 ][ 32, 32 ]
[ 0, 0, 0, 2 ][ 36, 4, 12, 12 ]
[ 0, 1, 1, 2 ][ 28, 4, 12, 20 ]
[ 0, 0, 2, 2 ][ 40, 8, 8, 8 ]
[ 0, 0, 2, 3 ][ 32, 8, 8, 16 ]
[ 0, 1, 2, 2 ][ 32, 16, 16 ]
[ 1, 1, 2, 2 ][ 24, 8, 8, 24 ]
[ 2, 2, 2, 3 ][ 24, 8, 16, 16 ]10
[ 0, 0, 0, 0, 0 ][ 96, 32 ]
[ 0, 0, 0, 0, 1 ][ 80, 48 ]
[ 0, 1, 1, 1, 1 ][ 64, 64 ]
[ 0, 0, 0, 0, 2 ][ 72, 8, 24, 24 ]
[ 0, 0, 0, 1, 2 ][ 64, 16, 16, 32 ]
[ 0, 1, 1, 1, 2 ][ 56, 8, 24, 40 ]
[ 0, 0, 2, 2, 2 ][ 80, 16, 16, 16 ]
[ 0, 1, 2, 2, 2 ][ 64, 32, 32 ]
[ 1, 1, 2, 2, 2 ][ 48, 16, 16, 48 ]
[ 2, 2, 2, 2, 3 ][ 48, 16, 32, 32 ]10
[ 0, 0, 0, 0, 0, 0 ][ 192, 64 ]
[ 0, 0, 0, 0, 0, 1 ][ 160, 96 ]
[ 0, 1, 1, 1, 1, 1 ][ 128, 128 ]
[ 0, 0, 0, 0, 0, 2 ][ 144, 16, 48, 48 ]
[ 0, 0, 0, 0, 1, 2 ][ 128, 32, 32, 64 ]
[ 0, 1, 1, 1, 1, 2 ][ 112, 16, 48, 80 ]
[ 0, 0, 2, 2, 2, 2 ][ 160, 32, 32, 32 ]
[ 0, 1, 2, 2, 2, 2 ][ 128, 64, 64 ]
[ 1, 1, 2, 2, 2, 2 ][ 96, 32, 32, 96 ]
[ 2, 2, 2, 2, 2, 3 ][ 96, 32, 64, 64 ]10
[ 0, 0, 0, 0, 0, 0, 0 ][ 384, 128 ]
[ 0, 0, 0, 0, 0, 0, 1 ][ 320, 192 ]
[ 0, 1, 1, 1, 1, 1, 1 ][ 256, 256 ]
[ 0, 0, 0, 0, 0, 0, 2 ][ 288, 32, 96, 96 ]
[ 0, 0, 0, 0, 0, 1, 2 ][ 256, 64, 64, 128 ]
[ 0, 1, 1, 1, 1, 1, 2 ][ 224, 32, 96, 160 ]
[ 0, 0, 2, 2, 2, 2, 2 ][ 320, 64, 64, 64 ]
[ 0, 1, 2, 2, 2, 2, 2 ][ 256, 128, 128 ]
[ 1, 1, 2, 2, 2, 2, 2 ][ 192, 64, 64, 192 ]
[ 2, 2, 2, 2, 2, 2, 3 ][ 192, 64, 128, 128 ]10
[ 0, 0, 0, 0, 0, 0, 0, 0 ][ 768, 256 ]
[ 0, 0, 0, 0, 0, 0, 0, 1 ][ 640, 384 ]
[ 0, 1, 1, 1, 1, 1, 1, 1 ][ 512, 512 ]
[ 0, 0, 0, 0, 0, 0, 0, 2 ][ 576, 64, 192, 192 ]
[ 0, 0, 0, 0, 0, 0, 1, 2 ][ 512, 128, 128, 256 ]
[ 0, 1, 1, 1, 1, 1, 1, 2 ][ 448, 64, 192, 320 ]
[ 0, 0, 2, 2, 2, 2, 2, 2 ][ 640, 128, 128, 128 ]
[ 0, 1, 2, 2, 2, 2, 2, 2 ][ 512, 256, 256 ]
[ 1, 1, 2, 2, 2, 2, 2, 2 ][ 384, 128, 128, 384 ]
[ 2, 2, 2, 2, 2, 2, 2, 3 ][ 384, 128, 256, 256 ]10

  </FILE>

<FILE id="P10" inhalt="Jetzt die R zu den Abzweigen bestimmen">
ok R4 um das innere R erweitern
ok eine Ausgangsliste für die inneren R
ok erstmal nur ein Stockwerk, deshalb geht dafür die Kurzform mit R4 und ERG.
ok deshalb von ERG zu ERG[S] übergehen

R5:=function(RIV)#
  local i,V2,RI,V;
  if IsInt(RIV[1]) then
    R:=R4(RIV);
    else
      RI:=RIV[1];V:=RIV[2];
      V2:=List(V);Add(V2,V2[1],1);Add(V2,V2[1],1);
      R:=R5(RI);
      Add(R,V2);
      fi;
  return R;
  end;

R5([0,0]);
R5([[[0,1],[0,2,0]],[1,0,0,0]]);

ERGS:=[];

FUN5:=function(arg)#neu
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
  Print("\n",RT);
  R:=R5([RI,RT]);RSIZE:=Size(R);
#Print("???",R);
  P:=PcgsOfR(R);
#  Print(IdSmallGroup(P),"\c");
PL:=Reversed(GeneratorsOfGroup(P));
S:=1;nn:=1;HRES:=[];HRESEXT:=[];R:=[];WEGLI:=[];
ZEIGER:=XSAMMEL;;
  NEU:=RTT();Print(NEU);
  if not NEU=RSIZE then 
    inh:=inh+1;
    RMAXSUCH(P);
    S:=Size(R);
    Add(ERGS[S],[RI,RT]);
    fi;
  return [];
  end;

ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];

ERG:=[];ListX(IS2,IS2,IS,IS,FUN);;ERGS[4]:=ERG;;ERGS;#16;ERGS
ERG:=[];ListX(IS2,IS2,IS2,IS,IS,IS,FUN);;ERGS[5]:=ERG;;ERGS;#32
for RI in ERGS[4] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN5);
  od;ERGS;
ERG:=[];ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN);;ERGS[6]:=ERG;;ERGS;#64
for RI in ERGS[5] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN5);
  od;ERGS;
ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN);;ERGS[7]:=ERG;;ERGS;#128
SaveWorkspace("GAP128");
for RI in ERGS[6] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN5);
  od;ERGS;
SaveWorkspace("GAP128-2");

[ ,,, [ [ 0, 0 ], [ 0, 1 ], [ 1, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ] ],##6
  [ [ 0, 0, 0 ], [ 0, 1, 1 ], [ 0, 0, 2 ], [ 0, 1, 2 ], [ 1, 1, 2 ],
      [ 0, 2, 0 ], [ 1, 2, 1 ], [ 2, 2, 2 ], [ [ 0, 1 ], [ 0, 1, 0 ] ],###8
      [ [ 0, 1 ], [ 1, 1, 1 ] ], [ [ 0, 1 ], [ 1, 1, 2 ] ],
      [ [ 0, 1 ], [ 0, 2, 0 ] ], [ [ 0, 1 ], [ 1, 2, 1 ] ],
      [ [ 0, 1 ], [ 2, 2, 3 ] ], [ [ 0, 1 ], [ 2, 3, 2 ] ],
      [ [ 1, 1 ], [ 1, 1, 2 ] ], [ [ 1, 1 ], [ 2, 2, 2 ] ],
      [ [ 0, 2 ], [ 1, 2, 3 ] ], [ [ 1, 2 ], [ 1, 2, 3 ] ] ], #11
  [ [ 0, 0, 0, 0 ], [ 0, 0, 0, 1 ], [ 0, 1, 1, 1 ], [ 0, 0, 0, 2 ],
      [ 0, 1, 1, 2 ], [ 0, 0, 2, 2 ], [ 0, 0, 2, 3 ], [ 0, 1, 2, 2 ],
      [ 1, 1, 2, 2 ], [ 0, 2, 0, 0 ], [ 0, 2, 0, 1 ], [ 1, 2, 1, 1 ],
      [ 2, 2, 2, 2 ], [ 2, 2, 2, 3 ], [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ],####14
      [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ],
      [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ [ 0, 1, 1 ], [ 0, 1, 2, 1 ] ],
      [ [ 0, 1, 1 ], [ 1, 1, 2, 1 ] ], [ [ 0, 1, 1 ], [ 0, 0, 2, 2 ] ],
      [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ],
      [ [ 0, 1, 1 ], [ 2, 2, 2, 3 ] ], [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ],
      [ [ 0, 0, 2 ], [ 1, 1, 2, 2 ] ], [ [ 0, 0, 2 ], [ 0, 2, 0, 1 ] ],
      [ [ 0, 1, 2 ], [ 0, 1, 2, 3 ] ], [ [ 0, 1, 2 ], [ 0, 1, 3, 2 ] ],
      [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ],
      [ [ 0, 1, 2 ], [ 0, 2, 1, 1 ] ], [ [ 0, 1, 2 ], [ 0, 3, 0, 1 ] ],
      [ [ 0, 1, 2 ], [ 1, 2, 1, 1 ] ], [ [ 1, 1, 2 ], [ 1, 1, 2, 2 ] ],
      [ [ 1, 1, 2 ], [ 0, 3, 0, 0 ] ], [ [ 1, 1, 2 ], [ 0, 3, 0, 1 ] ],
      [ [ 1, 1, 2 ], [ 1, 2, 1, 1 ] ], [ [ 1, 2, 1 ], [ 1, 2, 1, 2 ] ],
      [ [ 2, 2, 2 ], [ 2, 2, 2, 2 ] ], [ [ 2, 2, 2 ], [ 2, 2, 2, 3 ] ],###27
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 2, 0, 0 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 2, 2, 3 ] ],
      [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 3, 2, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 2, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 3, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 3, 2 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 0, 2, 0, 1 ] ],
      [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 3, 1, 1 ] ],
      [ [ [ 0, 1 ], [ 0, 2, 0 ] ], [ 1, 2, 1, 3 ] ],
      [ [ [ 0, 1 ], [ 1, 2, 1 ] ], [ 1, 2, 1, 3 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 2 ] ], [ 1, 3, 1, 1 ] ],
      [ [ [ 1, 2 ], [ 1, 2, 3 ] ], [ 1, 3, 2, 3 ] ] ],#19
  [ [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1 ],
      [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 1, 2 ], [ 0, 1, 1, 1, 2 ],
      [ 0, 0, 2, 2, 2 ], [ 0, 0, 2, 2, 3 ], [ 0, 1, 2, 2, 2 ],
      [ 1, 1, 2, 2, 2 ], [ 0, 2, 0, 0, 0 ], [ 0, 2, 0, 0, 1 ],
      [ 1, 2, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3 ],#####15
      [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ],
      [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ],
      [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ],
      [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ],
      [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ],
      [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 2, 3 ] ],
      [ [ 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 0 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 1, 1, 2, 2, 1 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ] ],
      [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 3 ] ],
      [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 3, 2 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 0, 2, 0, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 0, 2, 1, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 2, 0, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 2, 1, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 1, 3, 0, 0 ] ],
      [ [ 0, 0, 0, 2 ], [ 1, 1, 2, 0, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 2, 0, 0, 1 ] ],
      [ [ 0, 0, 0, 2 ], [ 0, 2, 1, 0, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 1, 1, 2, 0, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 1, 1, 2, 1, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 1, 1, 2, 1, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 2, 0, 0, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 2, 0, 1, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 2, 1, 0, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 0, 3, 1, 1, 1 ] ],
      [ [ 0, 1, 1, 2 ], [ 1, 2, 1, 0, 0 ] ],
      [ [ 0, 1, 1, 2 ], [ 1, 2, 1, 1, 1 ] ],
      [ [ 0, 0, 2, 2 ], [ 0, 1, 2, 2, 3 ] ],
      [ [ 0, 0, 2, 2 ], [ 1, 1, 2, 2, 2 ] ],
      [ [ 0, 0, 2, 2 ], [ 0, 2, 0, 0, 1 ] ],
      [ [ 0, 0, 2, 3 ], [ 0, 0, 2, 3, 2 ] ],
      [ [ 0, 0, 2, 3 ], [ 0, 1, 2, 3, 2 ] ],
      [ [ 0, 0, 2, 3 ], [ 1, 1, 2, 2, 2 ] ],
      [ [ 0, 1, 2, 2 ], [ 0, 1, 2, 2, 3 ] ],
      [ [ 0, 1, 2, 2 ], [ 0, 1, 3, 3, 2 ] ],
      [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ],
      [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 3 ] ],
      [ [ 0, 1, 2, 2 ], [ 0, 2, 1, 1, 1 ] ],
      [ [ 0, 1, 2, 2 ], [ 0, 3, 0, 0, 1 ] ],
      [ [ 0, 1, 2, 2 ], [ 1, 2, 1, 1, 1 ] ],
      [ [ 1, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ],
      [ [ 1, 1, 2, 2 ], [ 0, 3, 0, 0, 0 ] ],
      [ [ 1, 1, 2, 2 ], [ 0, 3, 0, 0, 1 ] ],
      [ [ 1, 1, 2, 2 ], [ 1, 2, 1, 1, 1 ] ],
      [ [ 0, 2, 0, 1 ], [ 0, 2, 1, 0, 2 ] ],
      [ [ 0, 2, 0, 1 ], [ 1, 2, 1, 1, 2 ] ],
      [ [ 1, 2, 1, 1 ], [ 1, 2, 1, 1, 2 ] ],
      [ [ 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2 ] ],
      [ [ 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3 ] ],
      [ [ 2, 2, 2, 2 ], [ 2, 2, 2, 3, 2 ] ],#####73
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 2, 0, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 0, 2, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 2, 0, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 2, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 3, 0, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 3, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 0, 0 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 0, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 2, 1, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 3, 1, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 2, 1, 0, 0 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 2, 1, 1, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 0, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 1, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 2, 0, 3, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 2, 1, 3, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 1, 3, 1, 3, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 0, 1, 2, 1, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 1, 1, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 1, 2, 1, 2, 1 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 1, 1, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 0, 2, 2 ] ], [ 0, 1, 2, 2, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ 0, 1, 2, 2, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ 0, 1, 3, 3, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2 ] ],
      [ [ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ], [ 2, 2, 2, 3, 3 ] ],
      [ [ [ 0, 1, 1 ], [ 2, 2, 2, 3 ] ], [ 2, 2, 2, 3, 2 ] ], 
      [ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 1, 1, 2, 2, 2 ] ], 
      [ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 2, 1, 0, 1 ] ], 
      [ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 3, 1, 1, 1 ] ], 
      [ [ [ 0, 1, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 1, 3, 2, 3 ] ], 
      [ [ [ 0, 1, 2 ], [ 0, 1, 3, 2 ] ], [ 1, 2, 1, 1, 0 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 1, 1, 2, 2, 3 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 0, 3, 0, 1, 1 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 0, 3, 0, 1, 3 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 1, 1, 2, 3, 3 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 1, 2, 1, 1, 1 ] ], 
      [ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 0, 2, 1, 1, 2 ] ], ###48
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 2, 0, 0, 0 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 2, 1, 1, 1 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 2, 2, 2, 3 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 3, 2, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 3, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 3, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 0, 2, 0, 0, 1 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 2, 0, 0 ] ], [ 1, 2, 1, 1, 3 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ], [ 1, 2, 1, 1, 3 ] ], 
      [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 2, 2, 3 ] ], [ 2, 2, 3, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1 ] ], 
      [ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 2, 2 ] ], [ 2, 2, 3, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ], [ 1, 1, 3, 2, 2 ] ], 
      [ [ [ [ 0, 1 ], [ 1, 2, 1 ] ], [ 1, 2, 1, 3 ] ], [ 1, 3, 1, 2, 3 ] ] ] ##22
 ]

#da halt IS:=[1,0]
ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[1,0];IS2:=[0,2];
[ ,,, [ [ 1, 1 ], [ 1, 0 ], [ 0, 0 ], [ 1, 3 ], [ 0, 3 ], [ 3, 2 ] ],
  [ [ 1, 1, 1 ], [ 1, 0, 0 ], [ 1, 1, 3 ], [ 1, 0, 3 ], [ 0, 0, 3 ],
      [ 1, 3, 1 ], [ 0, 3, 0 ], [ 3, 3, 3 ], [ [ 1, 1 ], [ 1, 1, 1 ] ],
      [ [ 1, 1 ], [ 1, 1, 3 ] ], [ [ 1, 1 ], [ 1, 0, 3 ] ],
      [ [ 1, 1 ], [ 3, 3, 3 ] ], [ [ 1, 0 ], [ 1, 0, 0 ] ],
      [ [ 1, 0 ], [ 1, 3, 3 ] ], [ [ 1, 0 ], [ 0, 3, 3 ] ],
      [ [ 1, 0 ], [ 3, 3, 2 ] ], [ [ 1, 0 ], [ 3, 2, 2 ] ],
      [ [ 1, 3 ], [ 1, 3, 2 ] ], [ [ 1, 3 ], [ 0, 3, 2 ] ] ],#11
  [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 0 ], [ 1, 0, 0, 0 ], [ 1, 1, 1, 3 ],
      [ 1, 0, 0, 3 ], [ 1, 1, 3, 3 ], [ 1, 1, 3, 2 ], [ 1, 0, 3, 3 ],
      [ 0, 0, 3, 3 ], [ 1, 3, 1, 1 ], [ 1, 3, 1, 0 ], [ 0, 3, 0, 0 ],
      [ 3, 3, 3, 3 ], [ 3, 3, 3, 2 ], [ [ 1, 1, 1 ], [ 1, 1, 1, 1 ] ],#14
      [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ [ 1, 1, 1 ], [ 1, 1, 3, 1 ] ],
      [ [ 1, 1, 1 ], [ 1, 0, 3, 0 ] ], [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ],
      [ [ 1, 1, 1 ], [ 1, 1, 3, 2 ] ], [ [ 1, 1, 1 ], [ 1, 0, 3, 3 ] ],
      [ [ 1, 1, 1 ], [ 1, 0, 3, 2 ] ], [ [ 1, 1, 1 ], [ 3, 3, 3, 3 ] ],
      [ [ 1, 1, 1 ], [ 3, 3, 3, 2 ] ], [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ],
      [ [ 1, 1, 3 ], [ 1, 0, 3, 3 ] ], [ [ 1, 1, 3 ], [ 1, 0, 3, 2 ] ],
      [ [ 1, 1, 3 ], [ 0, 0, 3, 3 ] ], [ [ 1, 1, 3 ], [ 1, 3, 1, 1 ] ],
      [ [ 1, 1, 3 ], [ 1, 3, 1, 0 ] ], [ [ 1, 1, 3 ], [ 1, 3, 0, 1 ] ],
      [ [ 1, 1, 3 ], [ 1, 3, 0, 0 ] ], [ [ 1, 1, 3 ], [ 1, 2, 0, 0 ] ],
      [ [ 1, 1, 3 ], [ 0, 2, 0, 0 ] ], [ [ 1, 0, 3 ], [ 1, 0, 2, 3 ] ],
      [ [ 1, 0, 3 ], [ 0, 0, 3, 2 ] ], [ [ 1, 0, 3 ], [ 1, 2, 1, 1 ] ],
      [ [ 1, 0, 3 ], [ 0, 2, 1, 0 ] ], [ [ 1, 3, 1 ], [ 1, 3, 1, 3 ] ],
      [ [ 3, 3, 3 ], [ 3, 3, 3, 3 ] ], [ [ 3, 3, 3 ], [ 3, 3, 3, 2 ] ],#27
      [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 0, 3, 3 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 3, 3, 3, 3 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 3, 3, 3, 2 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 1, 3, 3 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 0, 3, 3 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 0, 3, 2 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 3, 1, 1 ] ],
      [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 2, 1, 1 ] ],
      [ [ [ 1, 1 ], [ 1, 0, 3 ] ], [ 1, 3, 0, 1 ] ],
      [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ],
      [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 3, 3, 3 ] ],
      [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 0, 3, 3, 3 ] ],
      [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 3, 3, 3, 2 ] ],
      [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 3, 2, 2, 2 ] ],
      [ [ [ 1, 0 ], [ 1, 3, 3 ] ], [ 1, 3, 3, 2 ] ],
      [ [ [ 1, 0 ], [ 1, 3, 3 ] ], [ 0, 3, 3, 2 ] ],
      [ [ [ 1, 3 ], [ 1, 3, 2 ] ], [ 1, 2, 3, 2 ] ] ],#19
  [ [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 0 ], [ 1, 0, 0, 0, 0 ],
      [ 1, 1, 1, 1, 3 ], [ 1, 1, 1, 0, 3 ], [ 1, 0, 0, 0, 3 ],
      [ 1, 1, 3, 3, 3 ], [ 1, 1, 3, 3, 2 ], [ 1, 0, 3, 3, 3 ],
      [ 0, 0, 3, 3, 3 ], [ 1, 3, 1, 1, 1 ], [ 1, 3, 1, 1, 0 ],
      [ 0, 3, 0, 0, 0 ], [ 3, 3, 3, 3, 3 ], [ 3, 3, 3, 3, 2 ],#15
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 0, 1 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 1, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 0, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 3, 1 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 1, 3, 0 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 0, 0, 3, 0 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 3, 3, 1 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 3, 2, 1 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 0, 3, 3, 0 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 3, 3, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 3, 3, 2 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 1, 3, 2, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 0, 3, 3, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 1, 0, 3, 3, 2 ] ],
      [ [ 1, 1, 1, 1 ], [ 3, 3, 3, 3, 3 ] ],
      [ [ 1, 1, 1, 1 ], [ 3, 3, 3, 3, 2 ] ],
      [ [ 1, 1, 1, 1 ], [ 3, 3, 3, 2, 3 ] ],
      [ [ 1, 1, 1, 0 ], [ 1, 1, 1, 0, 3 ] ],
      [ [ 1, 1, 1, 0 ], [ 1, 1, 1, 3, 1 ] ],
      [ [ 1, 1, 1, 0 ], [ 1, 0, 0, 3, 0 ] ],
      [ [ 1, 1, 1, 0 ], [ 3, 3, 3, 3, 3 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 1, 3, 3 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 1, 3, 2 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 1, 2, 3 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 0, 3, 3 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 0, 3, 2 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 0, 2, 3 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 3, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 3, 1, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 3, 0, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 1, 3, 0, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 3, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 3, 1, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 3, 0, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 3, 0, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 2, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 0, 2, 0, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 0, 0, 3, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 0, 0, 3, 1, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 3, 1, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 3, 1, 0, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 3, 1, 0, 0 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 3, 0, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 1, 2, 0, 0, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 0, 3, 0, 1, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 0, 3, 0, 0, 1 ] ],
      [ [ 1, 1, 1, 3 ], [ 0, 3, 0, 0, 0 ] ],
      [ [ 1, 0, 0, 3 ], [ 1, 0, 3, 0, 1 ] ],
      [ [ 1, 0, 0, 3 ], [ 1, 0, 2, 0, 1 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 1, 3, 3, 3 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 1, 3, 2, 3 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 0, 3, 3, 3 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 0, 3, 3, 2 ] ],
      [ [ 1, 1, 3, 3 ], [ 0, 0, 3, 3, 3 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 3, 1, 1, 1 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 3, 1, 1, 0 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 3, 0, 0, 1 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 3, 0, 0, 0 ] ],
      [ [ 1, 1, 3, 3 ], [ 1, 2, 0, 0, 0 ] ],
      [ [ 1, 1, 3, 3 ], [ 0, 2, 0, 0, 0 ] ],
      [ [ 1, 1, 3, 2 ], [ 1, 1, 3, 2, 3 ] ],
      [ [ 1, 1, 3, 2 ], [ 1, 0, 3, 2, 3 ] ],
      [ [ 1, 0, 3, 3 ], [ 1, 0, 2, 2, 3 ] ],
      [ [ 1, 0, 3, 3 ], [ 0, 0, 3, 3, 2 ] ],
      [ [ 1, 0, 3, 3 ], [ 1, 2, 1, 1, 1 ] ],
      [ [ 1, 0, 3, 3 ], [ 0, 2, 1, 1, 0 ] ],
      [ [ 1, 3, 1, 1 ], [ 1, 3, 1, 1, 3 ] ],
      [ [ 1, 3, 1, 1 ], [ 1, 3, 1, 0, 3 ] ],
      [ [ 1, 3, 1, 0 ], [ 1, 3, 0, 1, 3 ] ],
      [ [ 3, 3, 3, 3 ], [ 3, 3, 3, 3, 3 ] ],
      [ [ 3, 3, 3, 3 ], [ 3, 3, 3, 3, 2 ] ],
      [ [ 3, 3, 3, 3 ], [ 3, 3, 3, 2, 3 ] ],#73
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 1 ] ], [ 1, 1, 3, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 1 ] ], [ 1, 1, 3, 1, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 1 ] ], [ 3, 3, 3, 3, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 1, 1, 3, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 1, 1, 3, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 1, 3, 1, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 1, 3, 0, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 0, 3, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 0, 3, 1, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 0, 2, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 0, 2, 0, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 0, 0, 3, 1, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 0, 0, 3, 0, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 3, 1, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 3, 0, 1, 0 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 1, 2, 0, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 1, 3 ] ], [ 0, 3, 0, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 1 ] ], [ 1, 1, 3, 1, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 1 ] ], [ 1, 1, 3, 0, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 1 ] ], [ 1, 0, 3, 0, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 1 ] ], [ 1, 0, 2, 0, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 0, 3, 0 ] ], [ 1, 0, 3, 0, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 1, 3, 3, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 1, 3, 2, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 0, 3, 3, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 0, 3, 2, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 3, 1, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 3 ] ], [ 1, 2, 1, 1, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 2 ] ], [ 1, 0, 3, 3, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 2 ] ], [ 1, 0, 3, 2, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 2 ] ], [ 1, 0, 3, 2, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 1, 3, 2 ] ], [ 1, 3, 1, 0, 1 ] ],
      [ [ [ 1, 1, 1 ], [ 1, 0, 3, 3 ] ], [ 1, 0, 3, 2, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 3, 3, 3, 3 ] ], [ 3, 3, 3, 3, 3 ] ],
      [ [ [ 1, 1, 1 ], [ 3, 3, 3, 3 ] ], [ 3, 3, 3, 2, 2 ] ],
      [ [ [ 1, 1, 1 ], [ 3, 3, 3, 2 ] ], [ 3, 3, 3, 2, 3 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 1, 3, 3, 3 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 1, 3, 3, 2 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 0, 2, 3, 2 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 3, 1, 1, 0 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 3, 0, 1, 0 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 1, 2, 0, 1, 0 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 1, 3, 3 ] ], [ 0, 3, 0, 1, 0 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 0, 3, 2 ] ], [ 1, 3, 1, 1, 1 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 0, 3, 2 ] ], [ 1, 3, 1, 1, 0 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 0, 3, 2 ] ], [ 1, 3, 1, 1, 3 ] ], 
      [ [ [ 1, 1, 3 ], [ 1, 0, 3, 2 ] ], [ 1, 3, 0, 0, 2 ] ],#48 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ], [ 1, 1, 1, 0, 0 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ], [ 1, 1, 3, 2, 2 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ], [ 1, 0, 3, 3, 3 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ], [ 3, 3, 3, 3, 3 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 0 ] ], [ 3, 3, 3, 2, 2 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ], [ 1, 1, 3, 2, 3 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ], [ 1, 0, 3, 3, 3 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ], [ 1, 0, 3, 3, 2 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ], [ 1, 3, 1, 2, 1 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 3, 2 ] ], [ 1, 2, 1, 3, 1 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 1, 0, 3, 3 ] ], [ 1, 3, 0, 3, 1 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 1 ] ], [ 3, 3, 3, 3 ] ], [ 3, 3, 3, 3, 3 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 1, 3, 3 ] ], [ 1, 1, 3, 3, 2 ] ], 
      [ [ [ [ 1, 1 ], [ 1, 1, 3 ] ], [ 1, 0, 3, 3 ] ], [ 1, 3, 1, 0, 1 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ], [ 1, 0, 0, 0, 0 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ], [ 1, 3, 3, 3, 3 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ], [ 0, 3, 3, 3, 3 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ], [ 3, 3, 3, 3, 2 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 0, 0, 0 ] ], [ 3, 2, 2, 2, 2 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 3, 3, 3 ] ], [ 1, 3, 3, 3, 2 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 0, 0 ] ], [ 1, 3, 3, 3 ] ], [ 0, 3, 3, 3, 2 ] ], 
      [ [ [ [ 1, 0 ], [ 1, 3, 3 ] ], [ 1, 3, 3, 2 ] ], [ 1, 2, 2, 3, 2 ] ] ]#22 
 ]


  </FILE>

<FILE id="P11" inhalt="Jetzt zu den R aus ERGS die Diagonale, ob da was zu sehen ist">
ok zu DIAG ein CompDIAG machen, war schon oben mit enthalten

COMPDIAG:=function(D)
  local C,RET;
  C:=Collected(D);
  RET:=List(C{[2..Size(C)]},i->i[2]);
  RET:=SortedList(RET);
  Add(RET,C[1][2],1);
  return RET;
  end;

D:=DIAG(R5([[0,1],[0,0,2]]));COMPDIAG(D);
for RT in ERGS[5] do
  R:=R5(RT);P:=PcgsOfR(R);
  Print("\n",RT,COMPDIAG(DIAG(R5(RT))),IdSmallGroup(P));
  od;

[ 0, 0 ][ 12, 4 ][ 16, 11 ]
[ 0, 1 ][ 8, 8 ][ 16, 10 ]
[ 1, 1 ][ 4, 12 ][ 16, 12 ]
[ 0, 2 ][ 8, 4, 4 ][ 16, 3 ]
[ 1, 2 ][ 4, 4, 8 ][ 16, 4 ]
[ 2, 3 ][ 4, 4, 4, 4 ][ 16, 2 ]
[ 0, 0, 0 ][ 24, 8 ][ 32, 46 ]
[ 0, 1, 1 ][ 16, 16 ][ 32, 48 ]
[ 0, 0, 2 ][ 20, 4, 4, 4 ][ 32, 34 ]
[ 0, 1, 2 ][ 16, 8, 8 ][ 32, 28 ]
[ 1, 1, 2 ][ 12, 4, 4, 12 ][ 32, 31 ]
[ 0, 2, 0 ][ 20, 4, 4, 4 ][ 32, 27 ]
[ 1, 2, 1 ][ 12, 4, 4, 12 ][ 32, 30 ]
[ 2, 2, 2 ][ 12, 4, 4, 12 ][ 32, 25 ]
[ [ 0, 1 ], [ 0, 1, 0 ] ][ 16, 16 ][ 32, 45 ]
[ [ 0, 1 ], [ 1, 1, 1 ] ][ 8, 24 ][ 32, 47 ]
[ [ 0, 1 ], [ 1, 1, 2 ] ][ 8, 8, 16 ][ 32, 29 ]
[ [ 0, 1 ], [ 0, 2, 0 ] ][ 16, 8, 8 ][ 32, 22 ]
[ [ 0, 1 ], [ 1, 2, 1 ] ][ 8, 8, 16 ][ 32, 23 ]
[ [ 0, 1 ], [ 2, 2, 3 ] ][ 8, 8, 8, 8 ][ 32, 24 ]
[ [ 0, 1 ], [ 2, 3, 2 ] ][ 8, 8, 8, 8 ][ 32, 21 ]
[ [ 1, 1 ], [ 1, 1, 2 ] ][ 4, 4, 4, 20 ][ 32, 35 ]
[ [ 1, 1 ], [ 2, 2, 2 ] ][ 4, 4, 12, 12 ][ 32, 26 ]
[ [ 0, 2 ], [ 1, 2, 3 ] ][ 8, 8, 8, 8 ][ 32, 33 ]
[ [ 1, 2 ], [ 1, 2, 3 ] ][ 4, 4, 12, 12 ][ 32, 32 ]
[ 0, 0, 0, 0 ][ 48, 16 ][ 64, 261 ]
[ 0, 0, 0, 1 ][ 40, 24 ][ 64, 264 ]
[ 0, 1, 1, 1 ][ 32, 32 ][ 64, 263 ]
[ 0, 0, 0, 2 ][ 36, 4, 12, 12 ][ 64, 226 ]
[ 0, 1, 1, 2 ][ 28, 4, 12, 20 ][ 64, 227 ]
[ 0, 0, 2, 2 ][ 40, 8, 8, 8 ][ 64, 211 ]
[ 0, 0, 2, 3 ][ 32, 8, 8, 16 ][ 64, 216 ]
[ 0, 1, 2, 2 ][ 32, 16, 16 ][ 64, 203 ]
[ 1, 1, 2, 2 ][ 24, 8, 8, 24 ][ 64, 207 ]
[ 0, 2, 0, 0 ][ 40, 8, 8, 8 ][ 64, 202 ]
[ 0, 2, 0, 1 ][ 32, 8, 8, 16 ][ 64, 215 ]
[ 1, 2, 1, 1 ][ 24, 8, 8, 24 ][ 64, 205 ]
[ 2, 2, 2, 2 ][ 24, 8, 8, 24 ][ 64, 196 ]
[ 2, 2, 2, 3 ][ 24, 8, 16, 16 ][ 64, 199 ]
[ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ][ 24, 40 ][ 64, 265 ]
[ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ][ 20, 4, 12, 28 ][ 64, 228 ]
[ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ][ 24, 8, 8, 24 ][ 64, 213 ]
[ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ][ 24, 8, 8, 24 ][ 64, 206 ]
[ [ 0, 1, 1 ], [ 0, 1, 2, 1 ] ][ 24, 16, 24 ][ 64, 218 ]
[ [ 0, 1, 1 ], [ 1, 1, 2, 1 ] ][ 16, 8, 8, 32 ][ 64, 217 ]
[ [ 0, 1, 1 ], [ 0, 0, 2, 2 ] ][ 28, 4, 12, 20 ][ 64, 231 ]
[ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ][ 20, 4, 12, 28 ][ 64, 229 ]
[ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ][ 16, 8, 16, 24 ][ 64, 201 ]
[ [ 0, 1, 1 ], [ 2, 2, 2, 3 ] ][ 16, 16, 16, 16 ][ 64, 198 ]
[ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ][ 24, 8, 16, 16 ][ 64, 221 ]
[ [ 0, 0, 2 ], [ 1, 1, 2, 2 ] ][ 20, 12, 12, 20 ][ 64, 240 ]
[ [ 0, 0, 2 ], [ 0, 2, 0, 1 ] ][ 28, 12, 12, 12 ][ 64, 241 ]
[ [ 0, 1, 2 ], [ 0, 1, 2, 3 ] ][ 20, 12, 12, 20 ][ 64, 236 ]
[ [ 0, 1, 2 ], [ 0, 1, 3, 2 ] ][ 20, 12, 12, 20 ][ 64, 234 ]
[ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ][ 16, 8, 16, 24 ][ 64, 223 ]
[ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ][ 16, 16, 16, 16 ][ 64, 210 ]
[ [ 0, 1, 2 ], [ 0, 2, 1, 1 ] ][ 20, 4, 20, 20 ][ 64, 243 ]
[ [ 0, 1, 2 ], [ 0, 3, 0, 1 ] ][ 24, 8, 16, 16 ][ 64, 219 ]
[ [ 0, 1, 2 ], [ 1, 2, 1, 1 ] ][ 16, 8, 16, 24 ][ 64, 220 ]
[ [ 1, 1, 2 ], [ 1, 1, 2, 2 ] ][ 12, 12, 20, 20 ][ 64, 237 ]
[ [ 1, 1, 2 ], [ 0, 3, 0, 0 ] ][ 28, 12, 12, 12 ][ 64, 242 ]
[ [ 1, 1, 2 ], [ 0, 3, 0, 1 ] ][ 20, 12, 12, 20 ][ 64, 232 ]
[ [ 1, 1, 2 ], [ 1, 2, 1, 1 ] ][ 12, 12, 12, 28 ][ 64, 244 ]
[ [ 1, 2, 1 ], [ 1, 2, 1, 2 ] ][ 12, 12, 20, 20 ][ 64, 233 ]
[ [ 2, 2, 2 ], [ 2, 2, 2, 2 ] ][ 12, 4, 12, 36 ][ 64, 230 ]
[ [ 2, 2, 2 ], [ 2, 2, 2, 3 ] ][ 12, 4, 20, 28 ][ 64, 235 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ][ 32, 32 ][ 64, 260 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ][ 16, 48 ][ 64, 262 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ][ 16, 16, 32 ][ 64, 204 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 2, 0, 0 ] ][ 32, 16, 16 ][ 64, 193 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ][ 16, 16, 32 ][ 64, 194 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 2, 2, 3 ] ][ 16, 16, 16, 16 ][ 64, 195 ]
[ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 3, 2, 2 ] ][ 16, 16, 16, 16 ][ 64, 192 ]
[ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ][ 8, 8, 8, 40 ][ 64, 212 ]
[ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 2, 2 ] ][ 8, 8, 24, 24 ][ 64, 197 ]
[ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 3, 2 ] ][ 8, 16, 16, 24 ][ 64, 200 ]
[ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ][ 8, 8, 24, 24 ][ 64, 214 ]
[ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 3, 2 ] ][ 8, 16, 16, 24 ][ 64, 222 ]
[ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 0, 2, 0, 1 ] ][ 16, 24, 24 ][ 64, 224 ]
[ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 3, 1, 1 ] ][ 8, 8, 16, 32 ][ 64, 225 ]
[ [ [ 0, 1 ], [ 0, 2, 0 ] ], [ 1, 2, 1, 3 ] ][ 16, 16, 16, 16 ][ 64, 209 ]
[ [ [ 0, 1 ], [ 1, 2, 1 ] ], [ 1, 2, 1, 3 ] ][ 8, 8, 24, 24 ][ 64, 208 ]
[ [ [ 1, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ][ 4, 12, 20, 28 ][ 64, 238 ]
[ [ [ 1, 1 ], [ 1, 1, 2 ] ], [ 1, 3, 1, 1 ] ][ 4, 12, 12, 36 ][ 64, 239 ]
[ [ [ 1, 2 ], [ 1, 2, 3 ] ], [ 1, 3, 2, 3 ] ][ 4, 20, 20, 20 ][ 64, 245 ]
[ 0, 0, 0, 0, 0 ][ 96, 32 ][ 128, 2320 ]
[ 0, 0, 0, 0, 1 ][ 80, 48 ][ 128, 2323 ]
[ 0, 1, 1, 1, 1 ][ 64, 64 ][ 128, 2322 ]
[ 0, 0, 0, 0, 2 ][ 72, 8, 24, 24 ][ 128, 2194 ]
[ 0, 0, 0, 1, 2 ][ 64, 16, 16, 32 ][ 128, 2216 ]
[ 0, 1, 1, 1, 2 ][ 56, 8, 24, 40 ][ 128, 2195 ]
[ 0, 0, 2, 2, 2 ][ 80, 16, 16, 16 ][ 128, 2172 ]
[ 0, 0, 2, 2, 3 ][ 64, 16, 16, 32 ][ 128, 2178 ]
[ 0, 1, 2, 2, 2 ][ 64, 32, 32 ][ 128, 2164 ]
[ 1, 1, 2, 2, 2 ][ 48, 16, 16, 48 ][ 128, 2168 ]
[ 0, 2, 0, 0, 0 ][ 80, 16, 16, 16 ][ 128, 2163 ]
[ 0, 2, 0, 0, 1 ][ 64, 16, 16, 32 ][ 128, 2177 ]
[ 1, 2, 1, 1, 1 ][ 48, 16, 16, 48 ][ 128, 2166 ]
[ 2, 2, 2, 2, 2 ][ 48, 16, 16, 48 ][ 128, 2154 ]
[ 2, 2, 2, 2, 3 ][ 48, 16, 32, 32 ][ 128, 2157 ]
[ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ][ 64, 64 ][ 128, 2325 ]
[ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ][ 56, 8, 24, 40 ][ 128, 2228 ]
[ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ][ 48, 16, 16, 48 ][ 128, 2217 ]
[ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ][ 56, 8, 24, 40 ][ 128, 2220 ]
[ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ][ 64, 16, 16, 32 ][ 128, 2230 ]
[ [ 0, 0, 0, 1 ], [ 0, 1, 1, 2, 3 ] ][ 48, 16, 16, 48 ][ 128, 2232 ]
[ [ 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2 ] ][ 40, 24, 24, 40 ][ 128, 2161 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ][ 48, 80 ][ 128, 2324 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ][ 40, 8, 24, 56 ][ 128, 2196 ]
[ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ][ 48, 16, 16, 48 ][ 128, 2200 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ][ 40, 8, 24, 56 ][ 128, 2221 ]
[ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ][ 48, 16, 16, 48 ][ 128, 2174 ]
[ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ][ 48, 16, 16, 48 ][ 128, 2181 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 0 ] ][ 48, 16, 16, 48 ][ 128, 2167 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 1 ] ][ 48, 32, 48 ][ 128, 2180 ]
[ [ 0, 1, 1, 1 ], [ 1, 1, 2, 2, 1 ] ][ 32, 16, 16, 64 ][ 128, 2179 ]
[ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 2 ] ][ 56, 8, 24, 40 ][ 128, 2199 ]
[ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 2 ] ][ 48, 16, 16, 48 ][ 128, 2219 ]
[ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 2 ] ][ 40, 8, 24, 56 ][ 128, 2197 ]
[ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ] ][ 32, 16, 32, 48 ][ 128, 2159 ]
[ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 3 ] ][ 32, 32, 32, 32 ][ 128, 2156 ]
[ [ 0, 1, 1, 1 ], [ 2, 2, 2, 3, 2 ] ][ 32, 32, 32, 32 ][ 128, 2160 ]
[ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ][ 48, 16, 32, 32 ][ 128, 2251 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ][ 40, 24, 24, 40 ][ 128, 2246 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ][ 40, 24, 24, 40 ][ 128, 2245 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ][ 40, 24, 24, 40 ][ 128, 2213 ]
[ [ 0, 0, 0, 2 ], [ 0, 0, 2, 0, 1 ] ][ 56, 24, 24, 24 ][ 128, 2269 ]
[ [ 0, 0, 0, 2 ], [ 0, 0, 2, 1, 1 ] ][ 56, 24, 24, 24 ][ 128, 2281 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 2, 0, 1 ] ][ 48, 16, 32, 32 ][ 128, 2290 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 2, 1, 1 ] ][ 48, 16, 32, 32 ][ 128, 2278 ]
[ [ 0, 0, 0, 2 ], [ 0, 1, 3, 0, 0 ] ][ 56, 24, 24, 24 ][ 128, 2275 ]
[ [ 0, 0, 0, 2 ], [ 1, 1, 2, 0, 1 ] ][ 48, 16, 32, 32 ][ 128, 2274 ]
[ [ 0, 0, 0, 2 ], [ 0, 2, 0, 0, 1 ] ][ 56, 24, 24, 24 ][ 128, 2264 ]
[ [ 0, 0, 0, 2 ], [ 0, 2, 1, 0, 1 ] ][ 48, 16, 32, 32 ][ 128, 2266 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ][ 32, 16, 32, 48 ][ 128, 2252 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ][ 32, 32, 32, 32 ][ 128, 2207 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ][ 32, 32, 32, 32 ][ 128, 2253 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 0 ] ][ 40, 24, 24, 40 ][ 128, 2237 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 1 ] ][ 40, 8, 40, 40 ][ 128, 2268 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 0 ] ][ 40, 24, 24, 40 ][ 128, 2272 ]
[ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 1 ] ][ 40, 24, 24, 40 ][ 128, 2283 ]
[ [ 0, 1, 1, 2 ], [ 1, 1, 2, 0, 0 ] ][ 40, 24, 24, 40 ][ 128, 2294 ]
[ [ 0, 1, 1, 2 ], [ 1, 1, 2, 1, 0 ] ][ 48, 16, 32, 32 ][ 128, 2240 ]
[ [ 0, 1, 1, 2 ], [ 1, 1, 2, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2293 ]
[ [ 0, 1, 1, 2 ], [ 0, 2, 0, 0, 0 ] ][ 48, 16, 32, 32 ][ 128, 2222 ]
[ [ 0, 1, 1, 2 ], [ 0, 2, 0, 1, 1 ] ][ 40, 24, 24, 40 ][ 128, 2277 ]
[ [ 0, 1, 1, 2 ], [ 0, 2, 1, 0, 1 ] ][ 40, 24, 24, 40 ][ 128, 2292 ]
[ [ 0, 1, 1, 2 ], [ 0, 3, 1, 1, 1 ] ][ 40, 24, 24, 40 ][ 128, 2226 ]
[ [ 0, 1, 1, 2 ], [ 1, 2, 1, 0, 0 ] ][ 40, 24, 24, 40 ][ 128, 2265 ]
[ [ 0, 1, 1, 2 ], [ 1, 2, 1, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2267 ]
[ [ 0, 0, 2, 2 ], [ 0, 1, 2, 2, 3 ] ][ 48, 16, 32, 32 ][ 128, 2184 ]
[ [ 0, 0, 2, 2 ], [ 1, 1, 2, 2, 2 ] ][ 40, 24, 24, 40 ][ 128, 2211 ]
[ [ 0, 0, 2, 2 ], [ 0, 2, 0, 0, 1 ] ][ 56, 24, 24, 24 ][ 128, 2257 ]
[ [ 0, 0, 2, 3 ], [ 0, 0, 2, 3, 2 ] ][ 40, 24, 24, 40 ][ 128, 2238 ]
[ [ 0, 0, 2, 3 ], [ 0, 1, 2, 3, 2 ] ][ 40, 24, 24, 40 ][ 128, 2192 ]
[ [ 0, 0, 2, 3 ], [ 1, 1, 2, 2, 2 ] ][ 32, 32, 32, 32 ][ 128, 2242 ]
[ [ 0, 1, 2, 2 ], [ 0, 1, 2, 2, 3 ] ][ 40, 24, 24, 40 ][ 128, 2205 ]
[ [ 0, 1, 2, 2 ], [ 0, 1, 3, 3, 2 ] ][ 40, 24, 24, 40 ][ 128, 2203 ]
[ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ][ 32, 16, 32, 48 ][ 128, 2186 ]
[ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 3 ] ][ 32, 32, 32, 32 ][ 128, 2171 ]
[ [ 0, 1, 2, 2 ], [ 0, 2, 1, 1, 1 ] ][ 40, 8, 40, 40 ][ 128, 2259 ]
[ [ 0, 1, 2, 2 ], [ 0, 3, 0, 0, 1 ] ][ 48, 16, 32, 32 ][ 128, 2182 ]
[ [ 0, 1, 2, 2 ], [ 1, 2, 1, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2183 ]
[ [ 1, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ][ 24, 24, 40, 40 ][ 128, 2206 ]
[ [ 1, 1, 2, 2 ], [ 0, 3, 0, 0, 0 ] ][ 56, 24, 24, 24 ][ 128, 2258 ]
[ [ 1, 1, 2, 2 ], [ 0, 3, 0, 0, 1 ] ][ 40, 24, 24, 40 ][ 128, 2201 ]
[ [ 1, 1, 2, 2 ], [ 1, 2, 1, 1, 1 ] ][ 24, 24, 24, 56 ][ 128, 2260 ]
[ [ 0, 2, 0, 1 ], [ 0, 2, 1, 0, 2 ] ][ 40, 24, 24, 40 ][ 128, 2191 ]
[ [ 0, 2, 0, 1 ], [ 1, 2, 1, 1, 2 ] ][ 32, 32, 32, 32 ][ 128, 2223 ]
[ [ 1, 2, 1, 1 ], [ 1, 2, 1, 1, 2 ] ][ 24, 24, 40, 40 ][ 128, 2202 ]
[ [ 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2 ] ][ 24, 8, 24, 72 ][ 128, 2198 ]
[ [ 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3 ] ][ 24, 8, 40, 56 ][ 128, 2204 ]
[ [ 2, 2, 2, 2 ], [ 2, 2, 2, 3, 2 ] ][ 24, 8, 40, 56 ][ 128, 2233 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ][ 32, 16, 16, 64 ][ 128, 2231 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ][ 40, 8, 24, 56 ][ 128, 2229 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 2, 0, 2 ] ][ 32, 16, 16, 64 ][ 128, 2218 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ][ 24, 24, 40, 40 ][ 128, 2162 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ][ 24, 24, 40, 40 ][ 128, 2214 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ][ 24, 24, 40, 40 ][ 128, 2247 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 0, 2, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2243 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 2, 0, 1 ] ][ 32, 16, 32, 48 ][ 128, 2273 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 2, 1, 1 ] ][ 40, 8, 40, 40 ][ 128, 2280 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 3, 0, 1 ] ][ 40, 24, 24, 40 ][ 128, 2271 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 3, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2279 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 0, 0 ] ][ 40, 24, 24, 40 ][ 128, 2249 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 0, 1 ] ][ 32, 16, 32, 48 ][ 128, 2286 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 1, 2, 1, 1 ] ][ 24, 24, 24, 56 ][ 128, 2284 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 2, 1, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2224 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 3, 1, 1, 1 ] ][ 24, 24, 24, 56 ][ 128, 2276 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 2, 1, 0, 0 ] ][ 32, 16, 32, 48 ][ 128, 2291 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 1, 2, 1, 1, 1 ] ][ 32, 16, 32, 48 ][ 128, 2254 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 0, 2, 1, 2 ] ][ 32, 32, 32, 32 ][ 128, 2212 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2 ] ][ 32, 32, 32, 32 ][ 128, 2176 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 3 ] ][ 32, 32, 32, 32 ][ 128, 2187 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 1, 3 ] ][ 32, 32, 32, 32 ][ 128, 2244 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ][ 24, 24, 40, 40 ][ 128, 2239 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 2, 0, 3, 1 ] ][ 40, 24, 24, 40 ][ 128, 2261 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 2, 1, 3, 1 ] ][ 40, 24, 24, 40 ][ 128, 2215 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 1, 3, 1, 3, 1 ] ][ 24, 24, 24, 56 ][ 128, 2282 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 0, 1, 2, 1, 3 ] ][ 32, 32, 32, 32 ][ 128, 2225 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 1, 1, 2, 1, 2 ] ][ 24, 24, 40, 40 ][ 128, 2227 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 0 ] ], [ 1, 2, 1, 2, 1 ] ][ 24, 24, 24, 56 ][ 128, 2270 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ][ 24, 24, 40, 40 ][ 128, 2193 ]
[ [ [ 0, 1, 1 ], [ 1, 1, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ][ 16, 32, 32, 48 ][ 128, 2241 ]
[ [ [ 0, 1, 1 ], [ 0, 0, 2, 2 ] ], [ 0, 1, 2, 2, 3 ] ][ 32, 32, 32, 32 ][ 128, 2256 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ 0, 1, 2, 2, 3 ] ][ 24, 24, 40, 40 ][ 128, 2250 ]
[ [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ 0, 1, 3, 3, 2 ] ][ 24, 24, 40, 40 ][ 128, 2248 ]
[ [ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2 ] ][ 16, 16, 32, 64 ][ 128, 2235 ]
[ [ [ 0, 1, 1 ], [ 2, 2, 2, 2 ] ], [ 2, 2, 2, 3, 3 ] ][ 16, 16, 48, 48 ][ 128, 2236 ]
[ [ [ 0, 1, 1 ], [ 2, 2, 2, 3 ] ], [ 2, 2, 2, 3, 2 ] ][ 16, 16, 48, 48 ][ 128, 2210 ]
[ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 1, 1, 2, 2, 2 ] ][ 24, 24, 40, 40 ][ 128, 2289 ]
[ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 2, 1, 0, 1 ] ][ 32, 32, 32, 32 ][ 128, 2298 ]
[ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 3, 1, 1, 1 ] ][ 32, 32, 32, 32 ][ 128, 2299 ]
[ [ [ 0, 1, 2 ], [ 0, 1, 2, 3 ] ], [ 0, 1, 3, 2, 3 ] ][ 24, 24, 40, 40 ][ 128, 2297 ]
[ [ [ 0, 1, 2 ], [ 0, 1, 3, 2 ] ], [ 1, 2, 1, 1, 0 ] ][ 24, 24, 40, 40 ][ 128, 2285 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 1, 1, 2, 2, 3 ] ][ 16, 32, 32, 48 ][ 128, 2287 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 0, 3, 0, 1, 1 ] ][ 24, 24, 40, 40 ][ 128, 2296 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 0, 3, 0, 1, 3 ] ][ 32, 32, 32, 32 ][ 128, 2300 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 1, 1, 2, 3, 3 ] ][ 16, 32, 32, 48 ][ 128, 2255 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 1, 2, 1, 1, 1 ] ][ 16, 32, 32, 48 ][ 128, 2295 ]
[ [ [ 0, 1, 2 ], [ 1, 1, 2, 3 ] ], [ 0, 2, 1, 1, 2 ] ][ 24, 24, 40, 40 ][ 128, 2263 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ][ 64, 64 ][ 128, 2319 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ][ 32, 96 ][ 128, 2321 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ][ 32, 32, 64 ][ 128, 2165 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 2, 0, 0, 0 ] ][ 64, 32, 32 ][ 128, 2151 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 2, 1, 1, 1 ] ][ 32, 32, 64 ][ 128, 2152 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 2, 2, 2, 3 ] ][ 32, 32, 32, 32 ][ 128, 2153 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 3, 2, 2, 2 ] ][ 32, 32, 32, 32 ][ 128, 2150 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ][ 16, 16, 16, 80 ][ 128, 2173 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ][ 16, 16, 48, 48 ][ 128, 2155 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 3, 2 ] ][ 16, 32, 32, 48 ][ 128, 2158 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ][ 16, 16, 48, 48 ][ 128, 2175 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 3, 2 ] ][ 16, 32, 32, 48 ][ 128, 2185 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 0, 2, 0, 0, 1 ] ][ 32, 48, 48 ][ 128, 2188 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1 ] ][ 16, 16, 32, 64 ][ 128, 2189 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 2, 0, 0 ] ], [ 1, 2, 1, 1, 3 ] ][ 32, 32, 32, 32 ][ 128, 2170 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ], [ 1, 2, 1, 1, 3 ] ][ 16, 16, 48, 48 ][ 128, 2169 ]
[ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 2, 2, 2, 3 ] ], [ 2, 2, 3, 2, 2 ] ][ 16, 16, 48, 48 ][ 128, 2190 ]
[ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ][ 8, 24, 40, 56 ][ 128, 2208 ]
[ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1 ] ][ 8, 24, 24, 72 ][ 128, 2209 ]
[ [ [ [ 0, 1 ], [ 1, 1, 1 ] ], [ 2, 2, 2, 2 ] ], [ 2, 2, 3, 2, 2 ] ][ 8, 24, 40, 56 ][ 128, 2234 ]
[ [ [ [ 0, 1 ], [ 1, 1, 2 ] ], [ 1, 1, 2, 2 ] ], [ 1, 1, 3, 2, 2 ] ][ 8, 40, 40, 40 ][ 128, 2288 ]
[ [ [ [ 0, 1 ], [ 1, 2, 1 ] ], [ 1, 2, 1, 3 ] ], [ 1, 3, 1, 2, 3 ] ][ 8, 40, 40, 40 ][ 128, 2262 ]


  </FILE>

<FILE id="P12" inhalt="Fortsetzung nach 128">
nö da könnte ich Folgendes versuchen, wenn RTT nicht nur ja/nein ausgibt
    sondern auch wie der Anfang losgeht, dann würde als Anfang n=16 reichen
    und alle R die innerhalb RTT auf einen Anfang [0,0] führen, weglassen 
    und die anderen nehmen. Sieht gut aus, aber in RTT viel zu tun
    nö, gehT irgendwie nicht
nö mal die IdSmallGroup() ergänzen und ob da was mit IS=[0,1],[1,0] geht
    nö wchselt nur innerhalb eines Abzweiges
nö ich muss herausfinden, ob Untergruppe R5([0,0]) drin ist 
    und das geht nur wenn schon in XSAMMEL drin
    das wollte ich aber umgehen, also Schluss hier.
ok vielleicht das: wie oft RT[j]=1 und RT[k]=1 und RT[jok]=0 oder vertauscht.

XORMAT:=MatrixOf([[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]);;
D:=DIAG(R4([1,2]));
COMPDIAG:=function(D)
  local C,RET,i,j,k,l,QUAD1,QUAD2,SI,ii;
  C:=Collected(D);SI:=Size(D);
  for i in [2..Size(C)] do ii:=C[i][1];
    QUAD1:=0;QUAD2:=0;
    for j in [2..SI-1] do
      for k in [j+1..SI] do
        l:=XORMAT[j][k];
        if l>j and l>k then
          if 
            (D[j]=ii and D[k]=ii and D[l]=0) or 
            (D[j]=ii and D[k]=0 and D[l]=ii) or 
            (D[j]=0 and D[k]=ii and D[l]=ii) then QUAD1:=QUAD1+1; fi; 
          if 
            D[j]>0 and D[k]>0 and D[l]>0 and 
            not D[j]=D[k] and not D[j]=D[l] and not D[k]=D[l] then QUAD2:=QUAD2+1; fi; 
#          Print("\n",QUAD," ",j," ",k," ",l);
          fi;
        od;
      od;
    C[i][2]:=[C[i][2],QUAD1,QUAD2];
    od;
  RET:=List(C{[2..Size(C)]},i->i[2]);
  RET:=SortedList(RET);
  Add(RET,C[1][2],1);
  return RET;
  end;
COMPDIAG(D);

D:=DIAG(R5([ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 0, 2, 1, 2 ] ]));;COMPDIAG(D);
D:=DIAG(R5([ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2 ] ]));;COMPDIAG(D);
D:=DIAG(R5([ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 3 ] ]));;COMPDIAG(D);
D:=DIAG(R5([ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 1, 3 ] ]));;COMPDIAG(D);



D:=DIAG(R5([[0,1],[0,0,2]]));COMPDIAG(D);
GESAMTDIAG:=[];
for RT in ERGS[4] do
  R:=R5(RT);P:=PcgsOfR(R);
  GESAMTDI:=COMPDIAG(DIAG(R5(RT)));
  Add(GESAMTDIAG,GESAMTDI);
  Print("\n",RT,GESAMTDI);
  od;
  LI:=Collected(SortedList(GESAMTDIAG));
  List(LI,i->i[2]);

  </FILE>

<FILE id="P13" inhalt="alles nur mit COMPDIAG machen">
ok MatrixOf() wird gebraucht, allerdings für Eingabeformat [0..n-1] und Ausgabeformat [1..n]
ok bis 128 stimmt alles, bei 256 fehlen 126, doch die 15 und 22 sind da.
.. jetzt also ein extra DIAG.txt mach

GESAMTDILIST:=[];
FUN6:=function(arg)
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
#  Print("\n",RT,RI);
#  Print(".");
  if RI=[] then R:=R4(RT); else R:=R5([RI,RT]); fi;
  S:=Size(R);
  RSIZE:=Size(R);
  GESAMTDI:=COMPDIAG(DIAG(R));
  if not (GESAMTDI in GESAMTDILIST) then Print("*\c");
    Add(GESAMTDILIST,GESAMTDI);
    if RI=[] then Add (ERG,RT); else Add(ERG,[RI,RT]); fi;
    fi;
  return [];
  end;    

FUN6:=function(arg)#neu
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
#  Print("\n",RT,RI);
#  Print(".");
  if RI=[] then R:=R4(RT); else R:=R5([RI,RT]); fi;
  S:=Size(R);
  RSIZE:=Size(R);
  GESAMTDI:=COMPDIAG(DIAG(R));
  if not (GESAMTDI in GESAMTDILIST) then
    Add(GESAMTDILIST,GESAMTDI);
    if RI=[] then Add (ERG,RT); else Add(ERG,[RI,RT]); fi;
    Print("*",Size(ERG),"\c");
    fi;
  return [];
  end;    

ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS,IS,FUN6);;Size(ERG);ERGS[4]:=ERG;#16;ERGS
RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS,IS,IS,FUN6);;Size(ERG);ERGS[5]:=ERG;#32;ERGS
ERG:=[];for RI in ERGS[4] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN6);
  od;Append(ERGS[5],ERG);ERGS[5];Size(ERGS[5]);
RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN6);;Size(ERG);ERGS[6]:=ERG;#64
ERG:=[];for RI in ERGS[5] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN6);
  od;Append(ERGS[6],ERG);ERGS[6];Size(ERGS[6]);
RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN6);;Size(ERG);ERGS[7]:=ERG;#128
ERG:=[];for RI in ERGS[6] do
  Print("\n*******************",RI);
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN6);
  od;Size(ERG);Append(ERGS[7],ERG);ERGS[7];Size(ERGS[7]);
RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN6);;Size(ERG);ERGS[8]:=ERG;#256
ERG:=[];for RI in ERGS[7] do
  Print("\n*******************",RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN6);
  od;Size(ERG);Append(ERGS[8],ERG);ERGS[8];Size(ERGS[8]);

#hier die was schon stimmen.
  [ 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 1, 2 ], 
  [ 0, 1, 1, 1, 2 ], [ 0, 0, 2, 2, 2 ], [ 0, 0, 2, 2, 3 ], [ 0, 1, 2, 2, 2 ], [ 1, 1, 2, 2, 2 ], 
  [ 0, 2, 0, 0, 0 ], [ 0, 2, 0, 0, 1 ], [ 1, 2, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3 ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 0, 1, 0, 0, 0, 0 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 1, 1, 1, 1, 1 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 1, 1, 1, 1, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 0, 2, 0, 0, 0, 0 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 2, 3, 2, 2, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 1, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 3, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 3, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 0, 2, 0, 0, 0, 1 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1, 1 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 2, 0, 0, 0 ] ], [ 1, 2, 1, 1, 1, 3 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 2, 1, 1, 1 ] ], [ 1, 2, 1, 1, 1, 3 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 2, 2, 2, 3 ] ], [ 2, 2, 2, 3, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1, 1 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 3, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 3, 2 ] ], [ 2, 2, 3, 2, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ], [ 1, 1, 1, 3, 2, 2 ] ],
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ], [ 1, 2, 1, 1, 3 ] ], [ 1, 3, 1, 1, 2, 3 ] ] ]
 </FILE>

<FILE id="P14" inhalt="COMPDIAG verbessern">
ok JKLLISTE weil die unveränderlich sind, ok jetzt ist FUN6 am langsamsten
ok noch andere Varianten als 0110 0123 zählen wie 0000 0001 0012 1222
  ok dazu eine QUADMAT her...
    ok damit geht die 256 ganz gut los, schon mehr als die anfänglichen 23
    ok sogar auch mit QUADMAT etwas schneller als vorher
    ok hat aber auch nicht gereicht, nur 419 von 442
.. letzter Versuch dann mit IdSmallGroup in P15 dann

JKLLISTE:=[];
JKLLISTEMACH:=function(SI)
  local j,k,l;
  JKLLISTE:=[];
  for j in [2..SI-1] do
    for k in [j+1..SI] do
      l:=XORMAT[j][k];
      if l>j and l>k then
        Add(JKLLISTE,[j,k,l]);
#        Print("\n",j," ",k," ",l);
        fi;
      od;
    od;
  end;
JKLLISTEMACH(8);

QUADMAT:=[];
QUADMATMACH:=function()
  local j,k,l,COL,fun;
  QUADMAT:=[];
  for j in [0..3] do
    QUADMAT[j+1]:=[];
    for k in [0..3] do
      QUADMAT[j+1][k+1]:=[];
      for l in [0..3] do
        COL:=Collected([0,j,k,l]);fun:="******";
        if COL[1][2]=4 then fun:=0; fi;
        if COL[1][2]=3 then fun:=[[COL[2][1],1]]; fi;
        if COL[1][2]=2 then 
          if COL[2][2]=2 then fun:=[[COL[2][1],2]]; fi;
          if COL[2][2]=1 then fun:=[[COL[2][1],3],[COL[3][1],3]]; fi;
          fi;
        if COL[1][2]=1 then 
          if COL[2][2]=3 then fun:=[[COL[2][1],4]]; fi;
          if COL[2][2]=2 then fun:=[[COL[2][1],5],[COL[3][1],6]]; fi;
          if COL[2][2]=1 then 
            if COL[3][2]=2 then fun:=[[COL[2][1],6],[COL[3][1],5]]; fi;
            if COL[3][2]=1 then fun:=[[1,7],[2,7],[3,7]]; fi;
            fi;
          fi;
        QUADMAT[j+1][k+1][l+1]:=fun;
        Print("\n0 ",j," ",k," ",l," ",COL,"->",fun);
        od;
      od;
    od;
  end;
QUADMATMACH();


COMPDIAG:=function(D)#neu
  local C,RET,i,j,k,jkl,l,QUAD1,QUAD2,SI,ii,fun;
#Print(D,"\n");
  C:=Collected(D);
#Print(C,"\n");
  SI:=Size(D);
#Print(SI,"\n");
  QUAD0:=0;QUAD:=[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]];
  for jkl in JKLLISTE do
#Print(jkl,"\n");
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
#Print(j," ",k," ",l,"\n");
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print(dj," ",dk," ",dl,"\n");
    fun:=QUADMAT[dj+1][dk+1][dl+1];
#Print(fun,"\n");
    if fun=0 then QUAD0:=QUAD0+1; else
      for i in fun do QUAD[i[1]][i[2]]:=QUAD[i[1]][i[2]]+1; od;
      fi;
    od;
  RET:=List(C{[2..Size(C)]},i->[i[2],QUAD0,QUAD[i[1]]]);
  RET:=SortedList(RET);
  Add(RET,C[1][2],1);
  return RET;
  end;

R:=R4([0,0,0,0,0,0,0,0]);XORMAT:=MatrixOf(R);;XORMAT[2];
ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
JKLLISTEMACH(16);RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS,IS,FUN6);;ERGS[4]:=ERG;Size(ERG);6;#16;ERGS
JKLLISTEMACH(32);RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS,IS,IS,FUN6);;ERGS[5]:=ERG;Size(ERG);8;#32;ERGS
ERG:=[];for RI in ERGS[4] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN6);
  od;Append(ERGS[5],ERG);ERGS[5];Size(ERGS[5]);19;
JKLLISTEMACH(64);;RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN6);;ERGS[6]:=ERG;Size(ERG);14;#64
ERG:=[];for RI in ERGS[5] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN6);
  od;Append(ERGS[6],ERG);ERGS[6];Size(ERGS[6]);60;
JKLLISTEMACH(128);;RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN6);;ERGS[7]:=ERG;Size(ERG);15;#128
ERG:=[];for RI in ERGS[6] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN6);
  od;Append(ERGS[7],ERG);ERGS[7];Size(ERGS[7]);158;
JKLLISTEMACH(256);;RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN6);;ERGS[8]:=ERG;Size(ERG);15;#256
ERG:=[];for RI in ERGS[7] do
  Print("\n***",RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN6);
  od;Append(ERGS[8],ERG);ERGS[8];Size(ERGS[8]);442;
 </FILE>

<FILE id="P15" inhalt="jetzt halt mit IdSmallGroup()">
ok das muss ja funktionieren...

IDLISTE:=[];
FUN7:=function(arg)#neu
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add(RT,arg[i]+arg[i+j]);
    od;
#  Print("\n",RT,RI);
#  Print(".");
  if RI=[] then R:=R4(RT); else R:=R5([RI,RT]); fi;
  P:=PcgsOfR(R);
  ID:=IdSmallGroup(P)[2];
  if not (IsBound(IDLISTE[ID])) then
    IDLISTE[ID]:=1;
    if RI=[] then Add (ERG,RT); else Add(ERG,[RI,RT]); fi;
    Print("\n",RT,", #",Size(ERG)," ",ID,"\c");
    else IDLISTE[ID]:=IDLISTE[ID]+1; fi;
  return [];
  end;    

R:=R4([0,0,0,0,0,0,0,0]);XORMAT:=MatrixOf(R);;XORMAT[2];
ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0,1];IS2:=[0,2];
#IS:=[1,0];IS2:=[0,2];
IDLISTE:=[];RI:=[];ERG:=[];ListX(IS2,IS2,IS,IS,FUN7);;ERGS[4]:=ERG;Size(ERG);6;#16;ERGS
IDLISTE:=[];RI:=[];ERG:=[];ListX(IS2,IS2,IS2,IS,IS,IS,FUN7);;ERGS[5]:=ERG;Size(ERG);8;#32;ERGS
ERG:=[];for RI in ERGS[4] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN7);
  od;Append(ERGS[5],ERG);ERGS[5];Size(ERGS[5]);19;
IDLISTE:=[];RI:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN7);;ERGS[6]:=ERG;Size(ERG);14;#64
ERG:=[];for RI in ERGS[5] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN7);
  od;Append(ERGS[6],ERG);ERGS[6];Size(ERGS[6]);60;
IDLISTE:=[];RI:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN7);;ERGS[7]:=ERG;Size(ERG);15;#128
ERG:=[];for RI in ERGS[6] do
  Print("\n***",RI);
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN7);
  od;Append(ERGS[7],ERG);ERGS[7];Size(ERGS[7]);158;
IDLISTE:=[];RI:=[];ERG:=[];ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN7);;ERGS[8]:=ERG;Size(ERG);15;#256
ERG:=[];for RI in ERGS[7] do
  Print("\n***",RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN7);
  od;Append(ERGS[8],ERG);ERGS[8];Size(ERGS[8]);442;

#Lücken zu vordem:
JKLLISTEMACH(256);
VG:=COMPDIAG(DIAG(R5([[0,1,1,1,1],[0,0,2,2,3,0]])));
VH:=COMPDIAG(DIAG(R5([ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 1, 2, 0 ] ])));
[ 96, [ 32, 635, [ 512, 240, 1536, 0, 256, 512, 512 ] ], [ 32, 635, [ 512, 240, 1536, 0, 256, 512, 512 ] ], 
  [ 96, 635, [ 1536, 2000, 2048, 512, 1024, 512, 512 ] ] ]
VG=VH;#ist true
gap> DIAG(R5([ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 3, 0 ] ] ));
[ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
  0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 
  2, 2, 2, 2, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 
  0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 
  2, 2, 3, 3, 3, 3 ]
gap> DIAG(R5([ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 1, 2, 0 ] ]));
[ 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 
  0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
  1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 
  2, 2, 3, 3, 3, 3 ]
ERI:=
[ [ 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 1, 2 ], 
  [ 0, 1, 1, 1, 1, 2 ], [ 0, 0, 2, 2, 2, 2 ], [ 0, 0, 2, 2, 2, 3 ], [ 0, 1, 2, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ],
  [ 0, 2, 0, 0, 0, 0 ], [ 0, 2, 0, 0, 0, 1 ], [ 1, 2, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2, 3 ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 1, 1 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 0, 0 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 1, 2 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 0, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 2 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 2, 3 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2, 3 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 2, 0, 0 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 2, 1, 1 ] ], [ [ 0, 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 2, 2, 2, 3, 2, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 1, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 1, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 2, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 1, 2, 0 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 2, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 2, 1 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 2, 2, 2, 0 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 2, 2, 2, 1 ] ], [ [ 0, 1, 1, 1, 1 ], [ 1, 1, 2, 2, 2, 1 ] ] ] ;
for RRR in ERI do Print("\n",RRR,VG=COMPDIAG(DIAG(R5(RRR)))); od;

#hier nun die 256 komplett:
ERGS[8]:=[ [ 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 1, 2 ],
  [ 0, 1, 1, 1, 1, 2 ], [ 0, 0, 2, 2, 2, 2 ], [ 0, 0, 2, 2, 2, 3 ], [ 0, 1, 2, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ],
  [ 0, 2, 0, 0, 0, 0 ], [ 0, 2, 0, 0, 0, 1 ], [ 1, 2, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2, 3 ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 1, 1 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 0, 0 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 1, 2 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 0, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 1, 2 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 2, 3 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2, 3 ] ], [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 2, 0, 0 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 2, 1, 1 ] ], [ [ 0, 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 1 ], [ 2, 2, 2, 3, 2, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 1, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 1, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 2, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 0, 1, 2, 0 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 1, 1, 2, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 2, 1 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 3, 0 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 2, 2, 2, 0 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 2, 2, 2, 1 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 1, 1, 2, 2, 2, 1 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 2, 2 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 0, 0, 2, 2, 3, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 0, 1, 2, 2, 2, 2 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 2 ] ], [ [ 0, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ 0, 1, 1, 1, 1 ], [ 2, 2, 2, 2, 3, 2 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 0, 2, 3 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 1, 2, 2 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 1, 1, 2, 3 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 1, 1, 3, 3 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 2, 0, 1 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 2, 1, 1 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 3, 0, 0 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 0, 3, 1, 1 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 2, 2, 0, 1 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 0, 2, 2, 1, 1 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 2, 2, 0, 1 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 2, 2, 1, 1 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 1, 3, 3, 0, 0 ] ], [ [ 0, 0, 0, 0, 2 ], [ 1, 1, 2, 2, 0, 1 ] ],
  [ [ 0, 0, 0, 0, 2 ], [ 0, 2, 0, 0, 0, 1 ] ], [ [ 0, 0, 0, 0, 2 ], [ 0, 2, 1, 1, 0, 1 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 0, 1, 2, 2 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 0, 1, 3, 2 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 1, 1, 2, 2 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 0, 2, 1, 1 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 0, 3, 1, 0 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 0, 3, 1, 1 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 1, 2, 1, 1 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 1, 3, 0, 1 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 2, 3, 0, 0 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 0, 2, 3, 1, 0 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 2, 2, 1, 0 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 2, 3, 0, 0 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 2, 3, 0, 1 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 1, 2, 3, 1, 0 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 2, 0, 0, 0, 0 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 2, 0, 0, 1, 0 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 0, 2, 0, 1, 0, 1 ] ], [ [ 0, 0, 0, 1, 2 ], [ 0, 2, 1, 1, 0, 0 ] ],
  [ [ 0, 0, 0, 1, 2 ], [ 1, 2, 1, 1, 1, 0 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 1, 1, 2, 3 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 1, 1, 3, 2 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 1, 2, 1, 1 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 2, 2, 1, 0 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 2, 2, 1, 1 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 3, 3, 1, 0 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 1, 3, 3, 1, 1 ] ], [ [ 0, 1, 1, 1, 2 ], [ 1, 1, 2, 2, 0, 0 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 1, 1, 2, 2, 1, 0 ] ], [ [ 0, 1, 1, 1, 2 ], [ 1, 1, 2, 2, 1, 1 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 2, 0, 0, 0, 0 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 2, 0, 0, 1, 1 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 0, 2, 1, 1, 0, 1 ] ], [ [ 0, 1, 1, 1, 2 ], [ 0, 3, 1, 1, 1, 1 ] ],
  [ [ 0, 1, 1, 1, 2 ], [ 1, 2, 1, 1, 0, 0 ] ], [ [ 0, 1, 1, 1, 2 ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ 0, 0, 2, 2, 2 ], [ 0, 1, 2, 2, 2, 3 ] ], [ [ 0, 0, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ] ],
  [ [ 0, 0, 2, 2, 2 ], [ 0, 2, 0, 0, 0, 1 ] ], [ [ 0, 0, 2, 2, 3 ], [ 0, 0, 2, 2, 3, 2 ] ],
  [ [ 0, 0, 2, 2, 3 ], [ 0, 0, 2, 3, 2, 2 ] ], [ [ 0, 0, 2, 2, 3 ], [ 0, 1, 2, 2, 3, 2 ] ],
  [ [ 0, 0, 2, 2, 3 ], [ 1, 1, 2, 2, 2, 2 ] ], [ [ 0, 1, 2, 2, 2 ], [ 0, 1, 2, 2, 2, 3 ] ],
  [ [ 0, 1, 2, 2, 2 ], [ 0, 1, 3, 3, 3, 2 ] ], [ [ 0, 1, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ] ],
  [ [ 0, 1, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 3 ] ], [ [ 0, 1, 2, 2, 2 ], [ 0, 2, 1, 1, 1, 1 ] ],
  [ [ 0, 1, 2, 2, 2 ], [ 0, 3, 0, 0, 0, 1 ] ], [ [ 0, 1, 2, 2, 2 ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ 1, 1, 2, 2, 2 ], [ 1, 1, 2, 2, 2, 2 ] ], [ [ 1, 1, 2, 2, 2 ], [ 0, 3, 0, 0, 0, 0 ] ],
  [ [ 1, 1, 2, 2, 2 ], [ 0, 3, 0, 0, 0, 1 ] ], [ [ 1, 1, 2, 2, 2 ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ 0, 2, 0, 0, 1 ], [ 0, 2, 0, 1, 0, 2 ] ], [ [ 0, 2, 0, 0, 1 ], [ 0, 2, 1, 1, 0, 2 ] ],
  [ [ 0, 2, 0, 0, 1 ], [ 1, 2, 1, 1, 1, 2 ] ], [ [ 1, 2, 1, 1, 1 ], [ 1, 2, 1, 1, 1, 2 ] ],
  [ [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2, 2 ] ], [ [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ 2, 2, 2, 2, 2 ], [ 2, 2, 2, 2, 3, 2 ] ], [ [ 2, 2, 2, 2, 3 ], [ 2, 2, 2, 3, 2, 2 ] ],
#108
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 1, 1, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 1, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 1, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 1, 1, 1, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 2, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 0, 0, 0, 2, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 1 ] ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 0, 1, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 0, 1, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 1, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 0, 2, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 0, 3, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 2, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 2, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 3, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 1, 3, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 2, 2, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 2, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 2, 3, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 0, 2, 3, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 2, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 2, 3, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 2, 3, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 2, 3, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 1, 3, 3, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 2, 0, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 2, 1, 0, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 2, 1, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 2, 1, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 1, 2 ] ], [ 0, 3, 1, 1, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 2, 1, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 3, 1, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 3, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 3, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 3, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 2, 2, 0, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 2, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 1, 2, 2, 0, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 2, 0, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 0, 2, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 0, 2, 2, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 0, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 0, 2, 3, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 0, 3, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 1, 1, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 1, 1, 2, 3, 3 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 2, 0, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 2, 0, 3, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 2, 1, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 0, 2, 1, 3, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 1, 2, 0, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 2 ] ], [ 0, 1, 3, 1, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 0, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 1, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 2, 1, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 3, 1, 2, 1 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 1, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 3, 1, 2, 0 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ 0, 0, 0, 1 ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 0, 1, 1, 1, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 0, 0, 0, 2, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 0, 0, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 0, 0, 2, 3, 0, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 0, 1, 2, 2, 0, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 1 ] ], [ 2, 2, 2, 3, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 1, 2, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 0, 3, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 3, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 2, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 3, 0, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 2, 2, 0, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 2, 2, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 3, 3, 0, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 3, 3, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 1, 2, 2, 0, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 1, 2, 2, 0, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 1, 2, 2, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 2, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 0, 3, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 2, 1, 1, 0, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 1, 2 ] ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 0, 0, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 0, 0, 2, 1, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 1, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 1, 2, 1, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 1, 3, 1, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 0, 2, 0, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 0, 2, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 0, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 3, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 1, 1, 2, 0, 1, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 1, 1, 2, 0, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 1, 1, 2, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 0, 2, 1, 2, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 2, 1, 2, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 3, 0, 3, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 0, 2, 1 ] ], [ 0, 1, 3, 1, 3, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 1, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 1, 3, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 2, 1, 1, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 3, 1, 1, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 1, 1, 2, 0, 1, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 1, 1, 2, 1, 1, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 2, 1, 2, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 2, 1, 2, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 1, 2, 1 ] ], [ 0, 1, 3, 1, 3, 0 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 0, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 0, 2, 3, 0, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 1, 2, 2, 0, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 1, 2, 2, 0, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 1, 2, 2, 1, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 1, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 2, 0, 0, 3, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 0, 2, 1, 1, 3, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 1 ] ], [ 1, 3, 1, 1, 3, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ], [ 0, 0, 2, 3, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ], [ 0, 1, 2, 2, 0, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ], [ 0, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ], [ 0, 1, 2, 3, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 0 ] ], [ 1, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 0 ] ], [ 0, 1, 2, 2, 1, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 0 ] ], [ 1, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 0 ] ], [ 1, 2, 1, 1, 2, 1 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 1 ] ], [ 1, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 1, 1, 2, 2, 1 ] ], [ 1, 1, 2, 2, 1, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 2 ] ], [ 0, 0, 2, 3, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 2, 2 ] ], [ 0, 1, 2, 2, 2, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 2 ] ], [ 0, 0, 2, 3, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 2 ] ], [ 0, 0, 2, 3, 3, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 0, 2, 3, 2 ] ], [ 0, 1, 2, 2, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 2 ] ], [ 0, 1, 2, 2, 2, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 0, 1, 2, 2, 2 ] ], [ 0, 1, 3, 3, 3, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 3, 3 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 3, 2, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 3 ] ], [ 2, 2, 2, 2, 3, 2 ] ],
  [ [ [ 0, 1, 1, 1 ], [ 2, 2, 2, 2, 3 ] ], [ 2, 2, 2, 3, 2, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 0, 3, 2, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 1, 2, 2, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 1, 3, 2, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 2, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 2, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 2, 1, 0, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 2, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 3, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 1, 1, 2, 0, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 1, 1, 2, 1, 0, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 2, 0, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 2, 1, 0, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 0, 2, 1, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 2, 1, 0, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 1, 3, 1, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 0, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 1, 0, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 1, 1, 0, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 3, 1, 0, 0, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 3, 1, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 0, 0, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 0, 1, 0, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 0, 1, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 0, 2, 1, 0, 0, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 0, 2, 3 ] ], [ 1, 2, 1, 1, 0, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 1, 2, 2, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 1, 2, 3, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 0, 2, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 3, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 0, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 3, 0, 0, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 1, 1, 2, 0, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 0, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 0, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 1, 2, 1, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 0, 0, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 0, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 3, 1, 0, 0, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 1, 2, 3, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 3, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 0, 2, 0, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 0, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 1, 1, 2, 0, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 2, 0, 0, 1, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 2, 0, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 1, 2, 1, 0, 1, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 2, 0, 1, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 3, 1, 0, 0, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 0, 1, 1, 3, 3, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 0, 1, 2, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 0, 1, 2, 1, 1, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 0, 1, 2, 1, 1, 3 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 1, 1, 2, 0, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 1, 3, 3 ] ], [ 0, 2, 1, 0, 1, 2 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 2, 0, 1 ] ], [ 0, 2, 0, 1, 0, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 0, 2, 0, 1 ] ], [ 0, 2, 0, 1, 1, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 2, 0, 1 ] ], [ 0, 2, 0, 1, 1, 0 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 2, 1, 1 ] ], [ 0, 2, 0, 0, 1, 1 ] ],
  [ [ [ 0, 0, 0, 2 ], [ 0, 1, 2, 1, 1 ] ], [ 1, 2, 0, 0, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 1, 2, 2, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 1, 3, 2, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 1, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 3, 1, 0, 0 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 1, 1, 2, 0, 0, 0 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 1, 1, 2, 1, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 1, 0, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 3, 1, 1, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 0, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 0, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 3, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 0, 0, 0, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 0, 1, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 2 ] ], [ 0, 2, 1, 1, 1, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 1, 2, 3, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 1, 1, 2, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 1, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 2, 3 ] ], [ 1, 2, 1, 1, 1, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 0, 1, 2, 1, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 1, 1, 2, 0, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 1, 1, 2, 0, 1, 0 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 0, 1, 3, 1, 0, 3 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 0, 1, 3, 1, 1, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 0, 2, 0, 0, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 0, 3, 1, 0, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 1, 3, 2 ] ], [ 1, 2, 1, 0, 0, 2 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 0 ] ], [ 0, 2, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 0 ] ], [ 1, 3, 1, 1, 0, 0 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 2, 1, 1 ] ], [ 0, 2, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 0 ] ], [ 0, 2, 1, 0, 1, 0 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 0, 1, 3, 1, 1 ] ], [ 1, 2, 1, 0, 0, 1 ] ],
  [ [ [ 0, 1, 1, 2 ], [ 1, 1, 2, 1, 1 ] ], [ 0, 3, 1, 1, 1, 0 ] ],
  [ [ [ 0, 0, 2, 2 ], [ 0, 1, 2, 2, 3 ] ], [ 1, 1, 2, 2, 2, 2 ] ],
  [ [ [ 0, 0, 2, 2 ], [ 0, 1, 2, 2, 3 ] ], [ 0, 2, 1, 1, 0, 1 ] ],
  [ [ [ 0, 0, 2, 2 ], [ 0, 1, 2, 2, 3 ] ], [ 0, 3, 1, 1, 1, 1 ] ],
  [ [ [ 0, 0, 2, 3 ], [ 0, 0, 2, 3, 2 ] ], [ 0, 0, 2, 3, 2, 2 ] ],
  [ [ [ 0, 0, 2, 3 ], [ 0, 0, 2, 3, 2 ] ], [ 0, 0, 2, 3, 2, 3 ] ],
  [ [ [ 0, 0, 2, 3 ], [ 0, 1, 2, 3, 2 ] ], [ 1, 1, 2, 2, 2, 3 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 0, 1, 2, 2, 3 ] ], [ 0, 1, 3, 3, 2, 3 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 0, 1, 3, 3, 2 ] ], [ 1, 2, 1, 1, 1, 0 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ], [ 1, 1, 2, 2, 2, 3 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ], [ 0, 3, 0, 0, 1, 1 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 2 ] ], [ 0, 3, 0, 0, 1, 3 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 3 ] ], [ 1, 1, 2, 2, 3, 3 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 3 ] ], [ 1, 2, 1, 1, 1, 1 ] ],
  [ [ [ 0, 1, 2, 2 ], [ 1, 1, 2, 2, 3 ] ], [ 0, 2, 1, 1, 1, 2 ] ],
  [ [ [ 0, 2, 0, 1 ], [ 0, 2, 1, 0, 2 ] ], [ 1, 2, 1, 1, 2, 3 ] ],#257(365)
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 1, 2, 2 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ], [ 0, 1, 1, 3, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 1, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ], [ 1, 1, 2, 1, 0, 0 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 1, 1, 1, 2 ] ], [ 0, 0, 2, 2, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ], [ 0, 0, 2, 1, 2, 2 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ], [ 0, 0, 2, 1, 2, 3 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ], [ 0, 1, 2, 0, 2, 2 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 0, 0, 2, 1, 2 ] ], [ 0, 1, 2, 0, 2, 3 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2, 2 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 2, 2, 3 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 1, 2, 2, 3 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 0, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 3, 1, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 0, 2, 1, 1, 2 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 3, 1, 1, 1, 1 ] ],
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 1, 2, 1, 0, 0, 0 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 3, 1, 1, 1, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 1, 3, 2, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 0, 2, 1, 1, 1 ] ], #fehlt in COMPDIAG3
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 3, 0, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 3, 1, 0, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 0, 2 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 1, 2, 1, 1, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 1, 1, 2, 1, 0, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 1, 2, 1, 0, 0, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 2, 1, 1, 1, 2 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 0, 2, 1, 1 ] ], [ 0, 3, 1, 1, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 0, 2, 1, 1 ] ], [ 1, 3, 0, 1, 1, 0 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 2, 1, 1 ] ], [ 1, 2, 1, 0, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 3, 1, 1 ] ], [ 0, 3, 1, 1, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2 ] ], [ 1, 1, 2, 1, 2, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 2 ] ], [ 0, 2, 0, 3, 1, 1 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 0, 2, 1 ] ], [ 0, 1, 2, 0, 3 ] ], [ 1, 1, 2, 1, 2, 2 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 2, 1 ] ], [ 1, 1, 2, 1, 2 ] ], [ 1, 1, 2, 1, 2, 3 ] ], 
  [ [ [ [ 0, 1, 1 ], [ 0, 1, 2, 2 ] ], [ 0, 1, 2, 2, 3 ] ], [ 0, 1, 3, 3, 2, 3 ] ], 
  [ [ [ [ 0, 0, 2 ], [ 0, 1, 2, 3 ] ], [ 1, 1, 2, 2, 2 ] ], [ 0, 2, 1, 0, 1, 1 ] ], 
  [ [ [ [ 0, 1, 2 ], [ 1, 1, 2, 2 ] ], [ 1, 1, 2, 2, 3 ] ], [ 1, 2, 1, 1, 0, 1 ] ],
#39 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 0, 1, 0, 0, 0, 0 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 1, 1, 1, 1, 1 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 1, 1, 1, 1, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 0, 2, 0, 0, 0, 0 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 1, 2, 1, 1, 1, 1 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 2, 2, 2, 2, 2, 3 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 1, 0, 0, 0 ] ], [ 2, 3, 2, 2, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 1, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 3, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 3, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 0, 2, 0, 0, 0, 1 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1, 1 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 0, 2, 0, 0, 0 ] ], [ 1, 2, 1, 1, 1, 3 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 1, 2, 1, 1, 1 ] ], [ 1, 2, 1, 1, 1, 3 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 0, 1, 0, 0 ] ], [ 2, 2, 2, 2, 3 ] ], [ 2, 2, 2, 3, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 1, 1, 1, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 1, 1, 1, 1, 2 ] ], [ 1, 3, 1, 1, 1, 1 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 2, 2 ] ], [ 2, 2, 2, 3, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 1 ] ], [ 2, 2, 2, 3, 2 ] ], [ 2, 2, 3, 2, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 1, 1, 2 ] ], [ 1, 1, 1, 2, 2 ] ], [ 1, 1, 1, 3, 2, 2 ] ], 
  [ [ [ [ [ 0, 1 ], [ 0, 1, 0 ] ], [ 1, 2, 1, 1 ] ], [ 1, 2, 1, 1, 3 ] ], [ 1, 3, 1, 1, 2, 3 ] ] ];
#23
  </FILE>

<FILE id="P16" inhalt="COMPDIAG weiter verbessern anhand vorhandenem ERGS">
nö da muss ich 112 weiter verfeinern das zu 1 die 2 und nicht die 3 nee, hilft nix
.. und bei 0001 sowohl die 1 als auch die 0 auswerten
  .. dazu muss ich in C alle 3 Indizes reinbringen
ok COMPDIAG3+FUN9 schaffen 432 von 433 ok
ok anstelle von MM geht auch MM0
  ok es müsste aber auch mod gehen statt MM
  ok nein nicht mod sondern XORMAT
ok bis 128 und die ersten 256 reicht das aktuelle COMPDIAG aus
.. neuer Versuch COMPDIAG4 und das schafft das eine von 432 zu 433
  ok und funktioniert auch vom Anfang her bis 64 und langsam Anfang 128
  ok mit T23V dann auch 128 ganz, aber noch langsam
  .. weiter mit schnellem COMPDIAG4
    ok dazu erstmal eine Abbildung [dj,dk,dl]-->fnr=Collected([dj,dk,dl])
    ok dann DJDKDL und T23P, damit geht 128 locker durch
    ok und auch 256, passend zum mitlesen
    .. ob jetzt das for jkl in JKLLISTE die langsamste Stelle ist
      ok ja
    .. das ginge ja rauszucompilieren
    .. und dabei DJDKDL dj j in ein := hinein
ok  DIAG geht auch schneller zu machen 
  ok indem ich XP, YP, ZP einmalig ausrechne vor jedem neuen n,
    ok dazu ERWIND
  ok damit ist DIAG verschwunden aus DisplayProfile() und 1/4 schneller.
  .. und das auch nur für die restlichen Diagonalelemente zu R[S]
ok dsgl. auch nochmal für 3,4,6,7,9,10 ok läuft locker bis 16
  ok und dabei GESAMTDILIST nachschauen, was alles so auftritt.
  .. und ob ein Zusammenhang zu AAB da
  o. R5 muss dabei auch geändert werden
  ok und T23P ist nicht in dem Umfang nötig
ok alles nochmal laufen lassen mit j:=2*jkl[1];...bzw 4* nö, sondern
  ok noch besser mit reduziertem R, sollte 10x schneller sein
    ok Folge 3,4,6,7 geht damit, 512 auf'm RPI!!!
    ok und auch 3,15,.. geht, 256 aufm' RPI!!!
    ok TOTAL von 3026 auf 508, wenn das nichts ist!
.. dann bei Folge 3,15,... Z2 herausteilen
  .. obwohl das bei AAB dann nicht mehr geht... also eher nicht
.. statt XORMAT Subspaces und Int(z) oder noch besser z=x*Z(2^n)+y*Z(2^n)
  .. auch ShowAdditionTable(GF(4)) mit.
.. nochmal ConjugacyClasses mit CharacterTable vergleichen.
ok auch das mit dem Stabilisateur nochmal testen
ok nächstes File mit KANTENZUG
ok die 1024 hat einen letzten kleinen Zuwachs, danach wäre K(2048)=K(1024) drin.
nö Sum(DIAG) auch mit einbeziehen, da dürften auch etliche RI schneller sein nö, hat ja in 3,15... nicht so die Wirkung
.. die vielen T23P vermeiden, indem diese mit in GESAMTDILISTE hinein
  .. also damit als erstes los, TOTAL könnte auf die Hälfte gehen... 
o. in COMPDIAG4 die [0,x,y,z] in 0 bis 3 umwandeln
  .. dann auch in 3,15...
  o. und nach neuem System y^2=(xy)^2 usw. prüfen
.. die phi und PHI müssen dem Anschein nach irgendwie Reversed() werden
o. danach natürlich auf DIAG anwenden, 
  .. um von XSAMMEL aus zu den markierten Elementen zu kommen
  .. dann kann JKLLISTE aus COMPDIAG4 raus
.. ob sich die markierten Elemente auch bei XOR verknüpfen...
.. das Drumrum um ListX doch einmal zusammenfassen.

RRED:=function(V)#neu
  local i,R,V2;
  V2:=List(V);
  R:=[[1]];
  for i in [2..Size(V)-1] do Add(R,ListWithIdenticalEntries(i,1)); od;
  Add(R,V2);
  return R;
  end;
RRED([1,0,1]);

R4:=RRED;
R5:=function(RIV)#neu
  local i,V2,RI,V;
  if IsInt(RIV[1]) then
    R:=R4(RIV);
    else
      RI:=RIV[1];V:=RIV[2];
      V2:=List(V);#Add(V2,V2[1],1);Add(V2,V2[1],1);
      R:=R5(RI);
      Add(R,V2);
      fi;
  return R;
  end;
R5([[1,2,3,4],[5,6,7,8,9]]);

ERWIND:=[];
j:=1;k:=1;S:=15;
for i in IteratorOfTuples( [0,1], S ) do
   Print(".");
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,GM,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=GM[RET[XP]+1][RET[YP]+1];
        PROD:=GM[PROD+1][RET[ZP]+1];
        PROD:=GM[PROD+1][RET[XPYP]+1];
        PROD:=GM[PROD+1][RET[XPZP]+1];
        PROD:=GM[PROD+1][RET[YPZP]+1];
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=[[0],[0,0],[1,1,1],[1,1,1,0],[0,0,0,2,3],[2,2,2,3,1,1]];
DIAG(R);

DJDKDL:=[];FNRLISTE:=[];index:=0;
for i in [0..3] do DJDKDL[i+1]:=[];
  for j in [0..3] do DJDKDL[i+1][j+1]:=[];
    for k in [0..3] do
      l:=Collected([i,j,k]);
      if not l in FNRLISTE then Add(FNRLISTE,l); fi;
      DJDKDL[i+1][j+1][k+1]:=Position(FNRLISTE,l);
      od;
    od;
  od;

Collected1:=function(L) return Collected(L); end;
COMPDIAG4:=function(D)#neu
  local RET,i,j,k,l,jkl,dj,dk,dl,RET2,reti,SD;
  SD:=Size(D);
  RET:=NullMat(SD,20);
  for jkl in JKLLISTE do
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    RET2:=DJDKDL[dj+1][dk+1][dl+1];
    RET[j][RET2]:=RET[j][RET2]+1;
    RET[k][RET2]:=RET[k][RET2]+1;
    RET[l][RET2]:=RET[l][RET2]+1;
    od;
  RET:=Collected(RET);Remove(RET,1);
  return RET;
  end;
V1:=R5([ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 3 ] ], [ 0, 0, 2, 1, 1, 1 ] ]);
V2:=R5([ [ [ [ 0, 1, 1 ], [ 0, 1, 1, 2 ] ], [ 0, 1, 1, 2, 2 ] ], [ 0, 1, 2, 0, 1, 1 ] ]);
JKLLISTEMACH(256);;
VG4:=COMPDIAG4(DIAG(V1));#IdSmallGroup(PcgsOfR(V1));
VH4:=COMPDIAG4(DIAG(V2));IdSmallGroup(PcgsOfR(V2));
VG4:=COMPDIAG4(T23([0,1,3,2],DIAG(V1)));Size(VG4);
VH4:=COMPDIAG4(DIAG(V2));IdSmallGroup(PcgsOfR(V2));
VG4=VH4;Size(VG4);Size(VH4);
VG4[2];VH4[2];

P12:=(2,3)(5,8)(7,9)(11,17)(12,14)(13,18)(16,19);
P23:=(3,4)(6,7)(8,10)(12,13)(14,16)(17,20)(18,19);
T23P:=function(PERM,V)
  local RET,j,k,l;
  RET:=StructuralCopy(V);
  for j in RET do
    j[1]:=Permuted(j[1],PERM);
    od;
  RET:=SortedList(RET);
  return RET;
  end;
V:=COMPDIAG4(DIAG(V1));MIN:=V;;
T23P(P23,V);
T23P(P12,V);
T23V([0,2,1,3],V);
T23V([0,2,3,1],V);
T23V([0,3,1,2],V);
T23V([0,3,2,1],V);

Add1:=function(L,M) Add(L,M); end;
GESAMTDILIST:=[];
FUN9:=function(arg)#neu
  local MIN,V;
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add1(RT,arg[i]+arg[i+j]);
    od;
  if RI=[] then R:=R4(RT); else R:=R5([RI,RT]); fi;
#  Print(".");
#  Print("\n",RI,RT,R,IdSmallGroup(PcgsOfR(R)));
  S:=Size(R);
  RSIZE:=Size(R);
  V:=COMPDIAG4(DIAG(R));MIN:=V;
  GESAMTDI:=MIN;
  if not (GESAMTDI in GESAMTDILIST) then
    Add(GESAMTDILIST,GESAMTDI);
    GV:=T23P(P23,V); if not (GV in GESAMTDILIST) then Add(GESAMTDILIST,GV); fi;
    GV:=T23P(P12,V); if not (GV in GESAMTDILIST) then Add(GESAMTDILIST,GV); fi;
    GV:=T23P(P12*P23,V); if not (GV in GESAMTDILIST) then Add(GESAMTDILIST,GV); fi;
    GV:=T23P(P23*P12,V); if not (GV in GESAMTDILIST) then Add(GESAMTDILIST,GV); fi;
    GV:=T23P(P12*P23*P12,V); if not (GV in GESAMTDILIST) then Add(GESAMTDILIST,GV); fi;
    if RI=[] then Add (ERG,RT); else Add(ERG,[RI,RT]); fi;
    Print("*",Size(ERG),"\c");
    fi;
  return [];
  end;    

ProfileFunctions([
Add,Add1,T23P,FUN9,DIAG,R4,R5,COMPDIAG4,SortedList,Collected,Collected1,Size,MatrixOf
]);

ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0..3];IS2:=[0];R4:=RRED;
#*1*2*3*4*5*6[ [ 0, 0 ], [ 0, 1 ], [ 1, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ] ]
JKLLISTEMACH(16/4);RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS,IS,FUN9);;ERGS[4]:=ERG;Size(ERG);6;#16;ERGS
JKLLISTEMACH(32/4);GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[4] do
  Print("\n***",Position(ERGS[4],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN9);
  od;ERGS[5]:=ERG;Size(ERGS[5]);19;
JKLLISTEMACH(64/4);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[5] do
  Print("\n***",Position(ERGS[5],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN9);
  od;ERGS[6]:=ERG;Size(ERGS[6]);60;
JKLLISTEMACH(128/4);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[6] do
  Print("\n***",Position(ERGS[6],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[7]:=ERG;Size(ERGS[7]);158;
JKLLISTEMACH(256/4);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[7] do
  Print("\n***",Position(ERGS[7],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[8]:=ERG;Size(ERGS[8]);442;
SaveWorkspace("GAP256-433-DIAG");
JKLLISTEMACH(512/4);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[8] do
  Print("\n***",Position(ERGS[8],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[9]:=ERG;Size(ERGS[9]);1122;
SaveWorkspace("GAP512-1112-DIAG");
JKLLISTEMACH(1024/4);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[9] do
  Print("\n***",Position(ERGS[9],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[10]:=ERG;Size(ERGS[10]);2944;
SaveWorkspace("GAP512-1112-DIAG");

#PRI:=ERGS[6];for i in [1..Size(PRI)] do Print("\n",i," ",PRI[i]); od;

#zu 256:
gap> DisplayProfile();
  count  self/ms  chld/ms  stor/kb  chld/kb  package  function             
 713872     1631      783   150582    22308           RRED                 
4283922     4296       44        0        0  (oprt.)  Size                 
4210848     4245     2128   164486    49988           Add1                 
3496960     7076     3749   620005   198167           R5                   
394826*    20193      323   521480        0  (oprt.)  Add                  
4924720    13769     7095   388350   184549  (oprt.)  Flat                 
3569360    33719        0  148820*        0           DEEP_COPY_OBJ        
 713872    29897     7673   787540   145610  (oprt.)  Collected            
 713872    15770    22880   584970   659916           DIAG                 
3569360   121445        0   923215        0  (oprt.)  SortedList           
 713872   155043    37940  8251300   933150           COMPDIAG4            
3569360    83631   155124  431884*  158052*           T23P                 
 714272    18064   490337   390476  704556*           FUN9                 
          508779           708528*                    TOTAL                

  </FILE>

<FILE id="P17" inhalt="COMPDIAG für Folge 1,3,4,6,7...">
#vorher P16 laden und dann das aktualisieren


COMPDIAG4:=function(D)#neu
  local RET,i,j,k,l,jkl,dj,dk,dl,RET2,reti,SD;
  SD:=Size(D);
  RET:=NullMat(SD,4);
  for jkl in JKLLISTE do
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
#    RET2:=DJDKDL[dj+1][dk+1][dl+1];
    RET2:=dj+dk+dl+1;
    RET[j][RET2]:=RET[j][RET2]+1;
    RET[k][RET2]:=RET[k][RET2]+1;
    RET[l][RET2]:=RET[l][RET2]+1;
    od;
  for i in [1..SD] do 
#    Print("\n",i," ",SD," ",D[i]," ",RET[i]);
    if D[i]=1 then
      if RET[i][2]=0 and RET[i][4]=0 then D[i]:=3; fi;
      else
        if RET[i][2]=0 then D[i]:=2; fi;
        fi;
    od;
#Print(D);
#  Remove(D,1);#nicht mehr weil D[1]=z ist möglicherweise
  RET:=Collected(List(D));
  RET:=SortedList(List(RET,i->i[2]));
  return RET;
  end;

FUN9:=function(arg)#neu
  local MIN,V;
  RT:=[];
  j:=Size(arg)/2;
  for i in [1..j] do
    Add1(RT,arg[i]+arg[i+j]);
    od;
  if RI=[] then R:=R4(RT); else R:=R5([RI,RT]); fi;
#  Print(".");
#  Print("\n",RI,RT,R,IdSmallGroup(PcgsOfR(R)));
#  Print("\n",RI,RT,R);
  S:=Size(R);
  RSIZE:=Size(R);
  V:=COMPDIAG4(DIAG(R));MIN:=V;
  GESAMTDI:=MIN;
  if not (GESAMTDI in GESAMTDILIST) then
    Add(GESAMTDILIST,GESAMTDI);
    if RI=[] then Add (ERG,RT); else Add(ERG,[RI,RT]); fi;
    Print("*",Size(ERG),"\c");
#    Print(GESAMTDI);
#    P:=PcgsOfR(R);
#    if 9>S then Print("\n",IdSmallGroup(P),"\n"); fi;
#    Print(ConjugacyClasses(P));
#    CT:=CharacterTable(P);Display(CT);
    fi;
  return [];
  end;    


ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[1,0];IS2:=[0];R4:=RRED;
JKLLISTEMACH(8/2);RI:=[];GESAMTDILIST:=[];ERG:=[];ListX(IS2,IS2,IS,IS,FUN9);;ERGS[3]:=ERG;Size(ERG);3;#16;ERGS
[ [ [ 1, 3 ], [ 2, 1 ] ], 
  [ [ 2, 2 ], [ 3, 2 ] ], 
  [ [ 0, 2 ], [ 1, 1 ], [ 2, 1 ] ] ]
JKLLISTEMACH(16/2);RI:=[];GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[3] do
  Print("\n***",Position(ERGS[3],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS,IS,IS,FUN9);
  od;ERGS[4]:=ERG;Size(ERGS[4]);4;GESAMTDILIST;
[ [ [ 1, 6 ], [ 2, 2 ] ], #A
  [ [ 0, 3 ], [ 1, 3 ], [ 2, 1 ], [ 3, 1 ] ], #D
  [ [ 2, 4 ], [ 3, 4 ] ], #C
  [ [ 0, 4 ], [ 1, 2 ], [ 2, 2 ] ] ] #B
JKLLISTEMACH(32/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[4] do
  Print("\n***",Position(ERGS[4],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS,IS,IS,IS,FUN9);
  od;ERGS[5]:=ERG;Size(ERGS[5]);6;GESAMTDILIST;
[ [ [ 0, 5 ], [ 1, 10 ], [ 2, 1 ] ], 
  [ [ 1, 12 ], [ 2, 4 ] ], 
  [ [ 0, 6 ], [ 1, 6 ], [ 2, 2 ], [ 3, 2 ] ], 
  [ [ 0, 9 ], [ 1, 6 ], [ 2, 1 ] ], 
  [ [ 2, 8 ], [ 3, 8 ] ], 
  [ [ 0, 8 ], [ 1, 4 ], [ 2, 4 ] ] ]
JKLLISTEMACH(64/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[5] do
  Print("\n***",Position(ERGS[5],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[6]:=ERG;Size(ERGS[6]);7;GESAMTDILIST;
[ [ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ [ 0, 10 ], [ 1, 20 ], [ 2, 2 ] ], 
  [ [ 1, 24 ], [ 2, 8 ] ], 
  [ [ 0, 12 ], [ 1, 12 ], [ 2, 4 ], [ 3, 4 ] ], 
  [ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ] , 
  [ [ 2, 16 ], [ 3, 16 ] ], 
  [ [ 0, 16 ], [ 1, 8 ], [ 2, 8 ] ] ]
JKLLISTEMACH(128/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[6] do
  Print("\n***",Position(ERGS[6],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[7]:=ERG;Size(ERGS[7]);9;GESAMTDILIST;
[ [ [ 0, 35 ], [ 1, 28 ], [ 2, 1 ] ], 
  [ [ 0, 30 ], [ 1, 30 ], [ 2, 2 ], [ 3, 2 ] ], 
  [ [ 0, 27 ], [ 1, 36 ], [ 2, 1 ] ], 
  [ [ 0, 20 ], [ 1, 40 ], [ 2, 4 ] ], 
  [ [ 1, 48 ], [ 2, 16 ] ], 
  [ [ 0, 24 ], [ 1, 24 ], [ 2, 8 ], [ 3, 8 ] ], 
  [ [ 0, 36 ], [ 1, 24 ], [ 2, 4 ] ], 
  [ [ 2, 32 ], [ 3, 32 ] ], 
  [ [ 0, 32 ], [ 1, 16 ], [ 2, 16 ] ] ]
JKLLISTEMACH(256/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[7] do
  Print("\n***",Position(ERGS[7],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[8]:=ERG;Size(ERGS[8]);10;GESAMTDILIST;
[ [ [ 0, 70 ], [ 1, 56 ], [ 2, 2 ] ], 
  [ [ 0, 63 ], [ 1, 63 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ [ 0, 60 ], [ 1, 60 ], [ 2, 4 ], [ 3, 4 ] ], 
  [ [ 0, 54 ], [ 1, 72 ], [ 2, 2 ] ], 
  [ [ 0, 40 ], [ 1, 80 ], [ 2, 8 ] ],
  [ [ 1, 96 ], [ 2, 32 ] ], 
  [ [ 0, 48 ], [ 1, 48 ], [ 2, 16 ], [ 3, 16 ] ], 
  [ [ 0, 72 ], [ 1, 48 ], [ 2, 8 ] ], 
  [ [ 2, 64 ], [ 3, 64 ] ], 
  [ [ 0, 64 ], [ 1, 32 ], [ 2, 32 ] ] ]
JKLLISTEMACH(512/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[8] do
  Print("\n***",Position(ERGS[8],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[9]:=ERG;Size(ERGS[9]);12;GESAMTDILIST;
JKLLISTEMACH(1024/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[9] do
  Print("\n***",Position(ERGS[9],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[10]:=ERG;Size(ERGS[10]);13;GESAMTDILIST;
JKLLISTEMACH(2048/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[10] do
  Print("\n***",Position(ERGS[10],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[11]:=ERG;Size(ERGS[11]);15;GESAMTDILIST;
JKLLISTEMACH(4096/2);;GESAMTDILIST:=[];ERG:=[];
for RI in ERGS[11] do
  Print("\n***",Position(ERGS[11],RI),RI,"\c");
  ListX(IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS2,IS,IS,IS,IS,IS,IS,IS,IS,IS,IS,IS,FUN9);
  od;ERGS[12]:=ERG;Size(ERGS[12]);16;GESAMTDILIST;
#allgemein zu n fest, s=0,1,2...und innerhalb s läuft u=0..5
u:           [0,x]:                      [1,x]:                  [2] [3]
5:2^(n-4s-3) * (4*16^s-(-1)^s*2*4^s-2), * (4*16^s+(-1)^s*2*4^s), *2, *0
4:2^(n-4s-4) * (8*16^s             -2), * (8*16^s           -2), *2, *2
3:2^(n-4s-5) *(16*16^s+(-1)^s*4*4^s-2), *(16*16^s-(-1)^s*4*4^s), *2, *0
2:2^(n-4s-2) * (2*16^s             -2), * (2*16^s           -2), *2, *2
1:2^(n-4s-3) * (4*16^s+(-1)^s*2*4^s-2), * (4*16^s-(-1)^s*2*4^s), *2, *0
0:2^(n-4s-1) * (1*16^s+(-1)^s*1*4^s-2), * (1*16^s-(-1)^s*1*4^s), *2, *0
#usw...4741

  </FILE>

<FILE id="P18" inhalt="KANTENZUG">
..

a:=[];
for i in [1..1000] do a[i]:=i+Int(i/2); od;

KANTENZUG:=function(d,z)
  local s,u,R,LWIE;
  LWIE:=ListWithIdenticalEntries;
  if d=1 then R:=[[1]]; else
    if z>=a[d] then 
      R:=KANTENZUG(d-1,a[d-1]);
      Add(R,LWIE(d,1)); 
      else
        s:=Int(z/6); u:=z mod 6;
        if u=0 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s,1),LWIE(d-4*s,0))); fi;
        if u=1 then R:=KANTENZUG(d-1,z+1);
          Add(R,Concatenation(LWIE(4*s,1),LWIE(d-4*s,0))); fi;
        if u=2 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0))); fi;
        if u=3 then 
          if z+1=a[d-1] then 
            R:=KANTENZUG(d-1,z);
            Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-2,0),[1]));
            else if z=a[d-1] then
              R:=KANTENZUG(d-1,z);
              Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0)));
              else 
                R:=KANTENZUG(d-1,z+1);
                Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-2,0),[1]));  
                fi; fi;
          fi;
        if u=4 then R:=KANTENZUG(d-1,z+1);
          Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0))); fi;
        if u=5 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s+3,1),LWIE(d-4*s-3,0))); fi;
        fi;
    fi;
  return R;
  end;

KANTENZUG(2,1);


ERWIND:=[];
j:=1;k:=1;S:=15;
for i in IteratorOfTuples( [0,1], S ) do
   Print(".");
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,GM,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=GM[RET[XP]+1][RET[YP]+1];
        PROD:=GM[PROD+1][RET[ZP]+1];
        PROD:=GM[PROD+1][RET[XPYP]+1];
        PROD:=GM[PROD+1][RET[XPZP]+1];
        PROD:=GM[PROD+1][RET[YPZP]+1];
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=KANTENZUG(3,4);
DIAG(R);

#COMPDIAG4 aus P17

XORMAT:=MatrixOf([[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]);;
XORMAT:=MatrixOf([[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]);;

JKLLISTE:=[];
JKLLISTEMACH:=function(SI)
  local j,k,l;
  JKLLISTE:=[];
  for j in [2..SI-1] do
    for k in [j+1..SI] do
      l:=XORMAT[j][k];
      if l>j and l>k then
        Add(JKLLISTE,[j,k,l]);
#        Print("\n",j," ",k," ",l);
        fi;
      od;
    od;
  end;

d:=1;repeat
  ERG:=[];
  for z in [1..a[d]] do
    SUMM:=Sum(DIAG(KANTENZUG(d,z)));
    Add(ERG,SUMM);
    Print("\n",d," ",z," ",SUMM);
    od;
  Print("\n",d," ",Collected(ERG));
  d:=d+1;
  Print("\n");
  until d=20;
  
d:=1;repeat
  JKLLISTEMACH(2^d);GESAMTDILIST:[];
  for z in [1..a[d]] do
    ERG:=COMPDIAG4(DIAG(KANTENZUG(d,z)));
    if ERG in GESAMTDILIST then Error("Stop");
    Add(GESAMTDILIST,ERG);
    Print("\n",d," ",z," ",ERG);
    od;
  d:=d+1;
  until d=10;

d:=1;repeat
  Print("\n------------");
  ERG:=[];
  for z in [1..a[d]] do
    ERGZ:=[0,0,0,0];
    s:=Int(z/6);
    u:=RemInt(z,6);
  if u=0 then
    p:=2^(d-4*s-1);
    ERGZ[1]:= p*(1*16^s+(-1)^s*1*4^s-2);
    ERGZ[2]:= p*(1*16^s-(-1)^s*1*4^s);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*0;
    fi;
  if u=2 then
    p:=2^(d-4*s-3);
    ERGZ[1]:= p*(4*16^s+(-1)^s*2*4^s-2);
    ERGZ[2]:= p*(4*16^s-(-1)^s*2*4^s);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*0;
    fi;
  if u=1 then
    p:=2^(d-4*s-2);
    ERGZ[1]:= p*(2*16^s-2);
    ERGZ[2]:= p*(2*16^s-2);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*2;
    fi;
  if u=5 then
    p:=2^(d-4*s-5);
    ERGZ[1]:= p*(16*16^s+(-1)^s*4*4^s-2);
    ERGZ[2]:= p*(16*16^s-(-1)^s*4*4^s);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*0;
    fi;
  if u=4 then
    p:=2^(d-4*s-4);
    ERGZ[1]:= p*(8*16^s-2);
    ERGZ[2]:= p*(8*16^s-2);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*2;
    fi;
  if u=3 then
    p:=2^(d-4*s-3);
    ERGZ[1]:= p*(4*16^s-(-1)^s*2*4^s-2);
    ERGZ[2]:= p*(4*16^s+(-1)^s*2*4^s);
    ERGZ[3]:= p*2;
    ERGZ[4]:= p*0;
    fi;
    ERGZ:=Reversed(SortedList(ERGZ));
    if ERGZ[4]=0 then Remove(ERGZ); fi;
    if ERGZ[3]=0 then Remove(ERGZ); fi;
    if ERGZ[2]=0 then Remove(ERGZ); fi;
    if ERGZ in ERG then Error("Stop"); fi;
    Add(ERG,ERGZ);
    Print("\n",d," ",z," ",ERGZ);
    od;
  d:=d+1;
#  until d=10;
#  until d=100;
  until d=400;

  </FILE>

<FILE id="P20" inhalt="Stabilizer">
dd:=3;
G:=ElementaryAbelianGroup(2^dd);
a:=G.1;b:=G.2;c:=G.3;
L:=[a,b,a*b,c,a*c,b*c,a*b*c];
A:=Action(AutomorphismGroup(G),L);

D2:=[1,1,2,0,0,0,0];
S2:=Stabilizer(A,D2,Permuted);
  List(S2,i->Permuted([1..7],i));
[ [ 1, 2, 3, 4, 5, 6, 7 ], [ 1, 2, 3, 5, 4, 7, 6 ], [ 1, 2, 3, 7, 6, 5, 4 ], [ 1, 2, 3, 6, 7, 4, 5 ], 
  [ 2, 1, 3, 4, 6, 5, 7 ], [ 2, 1, 3, 6, 4, 7, 5 ], [ 2, 1, 3, 7, 5, 6, 4 ], [ 2, 1, 3, 5, 7, 4, 6 ] ]
RC:=RightCosets(A,S2);
[ 1, 1, 2, 0, 0, 0, 0 ], 
[ 0, 0, 2, 1, 0, 0, 1 ], 2
[ 0, 0, 2, 0, 1, 1, 0 ], 2
[ 2, 1, 1, 0, 0, 0, 0 ], 2
[ 2, 0, 0, 1, 1, 0, 0 ], 3
[ 2, 0, 0, 0, 0, 1, 1 ], 3
[ 0, 2, 0, 1, 0, 1, 0 ], 3
[ 1, 2, 1, 0, 0, 0, 0 ], 2
[ 0, 2, 0, 0, 1, 0, 1 ], 3
[ 0, 1, 0, 1, 0, 2, 0 ], 4
[ 0, 0, 1, 0, 1, 2, 0 ], 3
[ 1, 0, 0, 0, 0, 2, 1 ], 4
[ 0, 0, 1, 2, 0, 0, 1 ], 3
[ 0, 1, 0, 2, 0, 1, 0 ], 4
[ 1, 0, 0, 2, 1, 0, 0 ], 4
[ 0, 0, 1, 1, 0, 0, 2 ], 3
[ 0, 1, 0, 0, 1, 0, 2 ], 4
[ 1, 0, 0, 0, 0, 1, 2 ], 4
[ 1, 0, 0, 1, 2, 0, 0 ], 4
[ 0, 1, 0, 0, 2, 0, 1 ], 4
[ 0, 0, 1, 0, 2, 1, 0 ] ]3
RC:=List(RC,i->Set(i));
  List(RC,i->Permuted(D2,i[1]));
AU:=AutomorphismGroup(A);
STAB:=Stabilizer(AU,Set(S2),OnSets);
gap> List(STAB);                     
[ [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (1,4)(3,6), (2,3)(4,6,5,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> 
    [ (2,7)(3,6), (1,5,2,6)(4,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,4)(3,5), (1,3)(4,5,6,7) ], 
  [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,6)(3,7), (1,3)(4,5,6,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> 
    [ (1,7)(3,5), (1,5,2,6)(4,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,5)(3,4), (1,7,2,4)(5,6) ], 
  [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (1,5)(3,7), (1,7,2,4)(5,6) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> 
    [ (1,5)(3,7), (2,3)(4,6,5,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (1,6)(3,4), (2,3)(4,7,5,6) ], 
  [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (1,6)(3,4), (1,4,2,7)(5,6) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> 
    [ (1,7)(3,5), (2,3)(4,7,5,6) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,6)(3,7), (1,4,2,7)(5,6) ], 
  [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (1,4)(3,6), (1,6,2,5)(4,7) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> 
    [ (2,5)(3,4), (1,3)(4,7,6,5) ], [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,4)(3,5), (1,6,2,5)(4,7) ], 
  [ (1,4)(3,6), (2,3)(4,6,5,7) ] -> [ (2,7)(3,6), (1,3)(4,7,6,5) ] ]
ORB:=Orbits(STAB,RC,OnSets);
RD:=List(ORB,i->Representative(Representative(i)));
List(RD,i->Permuted(D2,i));
List(RC,i->Permuted(D2,i[1]));
ORB1:=Orbit(STAB,RC[2],OnSets);
List(ORB1,i->Permuted(D2,i[1]));

RC:=[ 
  </FILE>

<FILE id="P21" inhalt="neuer Branch Folge_3_15">
Read("PcgsOfR.txt");
Read("MatrixOf.txt");
Read("XSAMMEL.txt"); 
Read("DIAG.txt");
ok PMAX auf PMIN umgestellt
ok RTT() reicht nicht mehr aus, Rückkehrwert von RMAXSUCH verwenden
  ok hab dafür RMAXSUCH vor if und dann QY13 noch etwas angepasst
  ok alle zu 32 sind da wie auf dem Blatt: 9+4+2
  ok die 64 auch, jetzt mit modifiziertem QY13() mit EINMALBIT.
  ok auch die 128 alles klar
.. da geht es weiter mit DisplayProfile(), stets TOTAL mit vergleichen
  ok als erstes die vielen Size, das muss an den zusätzlichen QY13 mit EINMALBIT liegen
    ok doch könnte ich auch R direkt in XSAMMEL aufsuchen... neu RINXS
      ok und für RINXS geht nur Sortierung IS:=[0,1];IS2:=[0,2]; sonst phi nötig. IS:=[0..3];IS2:=[0] geht auch.
    ok damit TOTAL von 7345 auf 1426 ok
  ok als nächstes ist dann das Array am dransten
    ok zuerst in QY15 mit PZUN die Position bestimmen.
    ok dann durchlaufenlassen und bei Error Size durch Length ersetzen und IsBound()
    ok es muss gleich mit QY08 komplett ersetzt werden durch PZUN.
    ok TOTAL von 1426 auf 1380
    ok wenn das auch funktioniert, in WEGVERGLEICHER das "for" raus.
    ok dann müsste das neue array deutlich schneller gehen
    ok TOTAL von 1380 auf 1319
    .. anschließend vielleicht [14] rausmachen
    .. und [1] auch raus
  ok voraussichtlich ist danach NZUI dran...als BLIST vielleicht
    nö mit ConvertToBlistRep()
    ok was auch ginge NZUI als fertig vorgegebenes Array von Vektoren
    ok TOTAL von 1319 auf 1174
  ok auch RINXS kann noch auf Array zugeschnitten werden.
    ok dabei IS2 rausmach
    ok und FUN auch durch FUN8 ersetzen mit RI:=[]
    ok schließlich RINXS selbst, eigentlich nur RET:=ZEIG machen
  ok ZEIG[6] gleich von [] auf die richtige Größe setzen.
    ok TOTAL von 1174 auf 
  ok in QY14 nur imax bestimmen,
    ok doch da tritt folgender Fehler auf:
      R:=[[0],[0,0],[1,1,1],[0,0,0,2],[0,0,0,0,1],[0,0,0,1,1,3]]
      wird als [ 64, 213 ] begonnen, obwohl zu [ 64, 221 ] gehörend
      den Fehler muss ich schon finden, ok imax immer =1 nehmen.
      auch wenn kein Umsortieren, bleibt imax:=1.
  .. was schließlich auch noch ginge, klein und groß Phi zusammen zu 1phi
    .. in dem Zusammenhang, ob Matrixmultiplikation dabei ist
    .. TOTAL von auf
ok nächster Versuch auf 256 (oder 512 gar wenigstens den Anfang?) 
    

ok müsste in QY09 nicht auch Reversed stehen? Ganz zuvor nochmal prüfen!!
  ok nein, stimmt so, [0,1,0,0] ist 8. Dafür muss in PZUN Reversed raus!!
  ok denn [0,0,0,0,0,3] soll 3 sein!!!
  ok dagegen bei IZUN muss Reversed bleiben, damit NZUI Umkehrung ist.
.. doch das mit RBIT>0 nochmal in früheren durchlaufen lassen, ob das Einfluss hat.
.. die ersten 4 oder 5 .... brauchen auch nicht sein...
.. RINXS nochmal schneller wenn ZEIG als fertiges Array
.. in QY14 und drumherum XMERK als return übergeben
.. paarmal XSAMMEL anstelle von XZEIG verwendet, das irritiert
.. Formatierungssachen:
  .. in QY14 PMAX in PMIN und überall
  .. Einrückungen in QY14 und QY15
  .. LFDNR wird überhaupt nicht verwendet
  .. XSAMMEL[i][9] ist auch nicht verwendet,
  .. XSAMMEL[i][2]:=i ersetzen durch Unbind()
.. ob in der jetzigen Konstellation der WEGEVERGLEICHER noch nötig ist
.. Unbind(XSAMMEL[i][6]) wenn schon [12] ist

PZUN([0,0,0,0,0],5);0;
PZUN([0,0,0,0,3],5);3;
PZUN([0,0,2,0,3],5);35;
PZUN([3,3,3,3,3],5);4^3-1;
NZUI(7,4);[1,1,1,0];

RINXS:=function(R,ZEIGER,S)#ohne phi ob R in XSAMMEL ist
  local PNEU,RET,i;
  RET:=0;
  PNEU:=R[S];
  i:=PZUN(PNEU,S)+1;
#  Print("XXXX",PNEU,S,Size(R));
  if IsBound(ZEIGER[i]) then
    RET:=ZEIGER[i];
#    Print(RET[1]);
    if Size(R)>S then RET:=RINXS(R,RET[6],S+1); fi;
    fi;
#  Print("****",RET);
  return RET;
  end;
ZEIG:=RINXS([[0],[0,0],[1,1,1],[0,0,0,2],[0,0,0,2,3]],XSAMMEL,1);
ZEIG:=RINXS([[0],[0,0],[1,1,1],[0,0,0,2],[0,0,1,2,3]],XSAMMEL,1);
ZEIG:=RINXS([[0],[0,0],[1,1,1],[2,2,2,3],[0,0,0,0,0]],XSAMMEL,1);

GLOBZEIG:=[];
FUN8:=function(arg)#neu-->DIAG.txt
  RT:=arg;
  if RI=[] then R:=R5(RT); else R:=R5([RI,RT]); fi;
  RSIZE:=Size(R);
#Print("???",R,RINXS(R,XSAMMEL,1));
  if not (IsBound(GLOBZEIG[6][PZUN(R[RSIZE],RSIZE)+1])) then
    Print("\n",RT,"\c");
    P:=PcgsOfR(R);
#  Print(IdSmallGroup(P),"\c");
    inh:=inh+1;
    RMAXSUCH(P);Print("\c");
    if RI=[] then Add(ERGS[RSIZE],RT); else Add(ERGS[RSIZE],[RI,RT]); fi;
    fi;
  return [];
  end;

#Ablauf aus idP10 und sowas wie FUN6 aus idP13
ClearProfile();
ERGS:=[];XSAMMEL:=[];
IS:=[0..3];

#R:=[[0],[0,0],[1,1,1], [ 0, 0, 0, 2 ], [ 0, 0, 0, 0, 1 ], [ 0, 0, 0, 0, 1, 3 ] ];P:=PcgsOfR(R);RMAXSUCH(P);

R:=[[0],[0,0],[1,1,1]];P:=PcgsOfR(R);RMAXSUCH(P);
XSAMMELVIEWER4(XSAMMEL);
R:=[[0],[0,0],[1,1,1]];GLOBZEIG:=RINXS(R,XSAMMEL,1);

ERGS[3]:=[];
ERGS[4]:=[];
RI:=[];ListX(IS,IS,FUN8);Size(ERGS[4]);7;
XSAMMELVIEWER2(XSAMMEL);
XSAMMELVIEWER4(XSAMMEL);#123444

ERGS[4]:=[[0,2],[1,2],[2,3]];
ERGS[5]:=[];
for RI in ERGS[4] do
  GLOBZEIG:=RINXS(R5(RI),XSAMMEL,1);
  Print("\n***P17***",RI);
  ListX(IS,IS,IS,FUN8);
  od;ERGS;Size(ERGS[5]);15;
XSAMMELVIEWER2(XSAMMEL);
XSAMMELVIEWER4(XSAMMEL);
ERGS[6]:=[];
for RI in ERGS[5] do
  GLOBZEIG:=RINXS(R5(RI),XSAMMEL,1);
  Print("\n***P17***",RI);
  ListX(IS,IS,IS,IS,FUN8);
  od;ERGS;Size(ERGS[6]);54;
XSAMMELVIEWER4(XSAMMEL);
SaveWorkspace("GAP64-54");
ERGS[7]:=[];
for RI in ERGS[6] do
  GLOBZEIG:=RINXS(R5(RI),XSAMMEL,1);
  Print("\n***P17***",RI);
  ListX(IS,IS,IS,IS,IS,FUN8);
  od;ERGS;Size(ERGS[7]);151;
SaveWorkspace("GAP128-151");
ERGS[8]:=[];
for RI in ERGS[7] do
  GLOBZEIG:=RINXS(R5(RI),XSAMMEL,1);
  Print("\n***P17***",RI);
  ListX(IS,IS,IS,IS,IS,IS,FUN8);
  od;ERGS;Size(ERGS[8]);433;
SaveWorkspace("GAP256-433");
ERGS[9]:=[];
for RI in ERGS[8] do
  GLOBZEIG:=RINXS(R5(RI),XSAMMEL,1);
  Print("\n***P17***",RI);
  ListX(IS,IS,IS,IS,IS,IS,IS,FUN8);
  od;ERGS;Size(ERGS[9]);1112;
SaveWorkspace("GAP512-1112");

0000000
0000001
0000012
0001111
0001113
0003333
0010000
0012222
0101111
0101112
0113333
0131111
0223333
1113333
#Ergebnis stimmt jetzt so wie gewollt: immer 64 oder 256 oder auch 1024 bei der 128
gap> XSAMMELVIEWER4(XSAMMEL);

 1 [ 0 ] 1 [1] 1 [ 2, 1 ]
   2 [ 0, 0 ] 1 [1] 3 [ 4, 2 ]
     3 [ 1, 1, 1 ] 1 [1] 12 [ 8, 2 ]
       4 [ 0, 0, 0, 2 ] 4 [1] 64 [ 16, 3 ]
         5 [ 0, 0, 0, 0, 0 ] 4 [1] 256 [ 32, 27 ]
           6 [ 0, 0, 0, 0, 0, 0 ] 8 [1] 1024 [ 64, 202 ]
             7 [ 0, 0, 0, 0, 0, 0, 0 ] 8 [1] 0 [ 128, 2163 ]
             7 [ 0, 0, 0, 0, 0, 0, 1 ] 16 [2] 0 [ 128, 2216 ]
             7 [ 0, 0, 0, 0, 0, 1, 1 ] 8 [6] 0 [ 128, 2194 ]
             7 [ 0, 0, 0, 0, 0, 1, 3 ] 16 [8] 0 [ 128, 2264 ]
             7 [ 0, 0, 0, 0, 0, 3, 3 ] 8 [16] 0 [ 128, 2178 ]
             7 [ 0, 0, 0, 0, 1, 0, 0 ] 8 [17] 0 [ 128, 2177 ]
             7 [ 0, 0, 0, 0, 1, 2, 2 ] 8 [27] 0 [ 128, 2257 ]
             7 [ 0, 0, 0, 1, 0, 1, 1 ] 8 [70] 0 [ 128, 2195 ]
             7 [ 0, 0, 0, 1, 0, 1, 2 ] 16 [71] 0 [ 128, 2222 ]
             7 [ 0, 0, 0, 1, 1, 3, 3 ] 8 [96] 0 [ 128, 2182 ]
             7 [ 0, 0, 0, 1, 3, 1, 1 ] 8 [118] 0 [ 128, 2167 ]
             7 [ 0, 0, 0, 2, 2, 3, 3 ] 8 [176] 0 [ 128, 2258 ]
             7 [ 1, 1, 1, 1, 1, 3, 3 ] 8 [352] 0 [ 128, 2201 ]
           6 [ 0, 0, 0, 0, 0, 1 ] 8 [2] 1024 [ 64, 226 ]
             7 [ 0, 0, 0, 0, 0, 1, 1 ] 16 [6] 0 [ 128, 2220 ]
             7 [ 0, 0, 0, 0, 0, 1, 2 ] 16 [7] 0 [ 128, 2269 ]
             7 [ 0, 0, 0, 0, 0, 2, 3 ] 16 [12] 0 [ 128, 2230 ]
             7 [ 0, 0, 0, 0, 0, 3, 3 ] 16 [16] 0 [ 128, 2274 ]
             7 [ 0, 0, 0, 0, 1, 0, 0 ] 16 [17] 0 [ 128, 2228 ]
             7 [ 0, 0, 0, 0, 1, 0, 2 ] 16 [19] 0 [ 128, 2266 ]
             7 [ 0, 0, 0, 0, 1, 0, 3 ] 16 [20] 0 [ 128, 2275 ]
             7 [ 0, 0, 0, 0, 1, 2, 2 ] 16 [27] 0 [ 128, 2278 ]
             7 [ 0, 0, 0, 0, 1, 3, 3 ] 16 [32] 0 [ 128, 2281 ]
             7 [ 0, 0, 0, 1, 0, 1, 1 ] 16 [70] 0 [ 128, 2200 ]
             7 [ 0, 0, 0, 1, 0, 1, 2 ] 16 [71] 0 [ 128, 2251 ]
             7 [ 0, 0, 0, 1, 1, 1, 3 ] 16 [88] 0 [ 128, 2290 ]
             7 [ 0, 0, 0, 1, 3, 1, 2 ] 16 [119] 0 [ 128, 2245 ]
             7 [ 0, 0, 0, 2, 3, 1, 1 ] 16 [182] 0 [ 128, 2213 ]
             7 [ 0, 0, 0, 2, 3, 2, 2 ] 16 [187] 0 [ 128, 2246 ]
           6 [ 0, 0, 0, 0, 0, 3 ] 8 [4] 1024 [ 64, 216 ]
             7 [ 0, 0, 0, 0, 0, 3, 3 ] 16 [16] 0 [ 128, 2219 ]
             7 [ 0, 0, 0, 0, 1, 2, 2 ] 16 [27] 0 [ 128, 2294 ]
             7 [ 0, 0, 0, 1, 0, 1, 1 ] 16 [70] 0 [ 128, 2226 ]
             7 [ 0, 0, 0, 1, 0, 1, 2 ] 16 [71] 0 [ 128, 2240 ]
             7 [ 0, 0, 0, 1, 0, 3, 3 ] 16 [80] 0 [ 128, 2181 ]
             7 [ 0, 0, 0, 1, 1, 2, 3 ] 16 [92] 0 [ 128, 2283 ]
             7 [ 0, 0, 0, 1, 3, 1, 1 ] 16 [118] 0 [ 128, 2192 ]
             7 [ 0, 0, 0, 1, 3, 1, 2 ] 16 [119] 0 [ 128, 2238 ]
             7 [ 0, 0, 0, 1, 3, 2, 3 ] 16 [124] 0 [ 128, 2265 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2232 ]
             7 [ 0, 0, 0, 2, 2, 1, 3 ] 16 [168] 0 [ 128, 2272 ]
             7 [ 1, 1, 1, 1, 1, 3, 3 ] 16 [352] 0 [ 128, 2242 ]
           6 [ 0, 0, 0, 0, 1, 0 ] 8 [5] 1024 [ 64, 215 ]
             7 [ 0, 0, 0, 0, 1, 0, 1 ] 16 [18] 0 [ 128, 2217 ]
             7 [ 0, 0, 0, 1, 0, 1, 3 ] 16 [72] 0 [ 128, 2277 ]
             7 [ 0, 0, 0, 1, 1, 2, 1 ] 16 [90] 0 [ 128, 2292 ]
             7 [ 0, 0, 0, 2, 2, 0, 1 ] 16 [162] 0 [ 128, 2237 ]
             7 [ 0, 0, 0, 2, 2, 1, 0 ] 16 [165] 0 [ 128, 2191 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 16 [422] 0 [ 128, 2223 ]
           6 [ 0, 0, 0, 0, 1, 2 ] 8 [7] 1024 [ 64, 241 ]
             7 [ 0, 0, 0, 0, 1, 2, 2 ] 16 [27] 0 [ 128, 2271 ]
             7 [ 0, 0, 0, 1, 1, 2, 2 ] 16 [91] 0 [ 128, 2261 ]
             7 [ 0, 0, 0, 1, 1, 3, 2 ] 16 [95] 0 [ 128, 2298 ]
           6 [ 0, 0, 0, 1, 0, 1 ] 8 [18] 1024 [ 64, 227 ]
             7 [ 0, 0, 0, 1, 0, 1, 1 ] 16 [70] 0 [ 128, 2221 ]
             7 [ 0, 0, 0, 1, 0, 1, 2 ] 16 [71] 0 [ 128, 2268 ]
             7 [ 0, 0, 0, 1, 3, 1, 2 ] 16 [119] 0 [ 128, 2267 ]
             7 [ 0, 0, 0, 1, 3, 2, 2 ] 16 [123] 0 [ 128, 2293 ]
             7 [ 0, 0, 0, 2, 2, 1, 1 ] 16 [166] 0 [ 128, 2253 ]
             7 [ 0, 0, 0, 2, 3, 1, 1 ] 16 [182] 0 [ 128, 2252 ]
             7 [ 0, 0, 0, 3, 3, 1, 1 ] 16 [246] 0 [ 128, 2207 ]
           6 [ 0, 0, 0, 1, 1, 3 ] 8 [24] 1024 [ 64, 219 ]
             7 [ 0, 0, 0, 1, 1, 3, 1 ] 16 [94] 0 [ 128, 2273 ]
             7 [ 0, 0, 0, 1, 1, 3, 2 ] 16 [95] 0 [ 128, 2225 ]
             7 [ 0, 0, 0, 2, 2, 1, 0 ] 16 [165] 0 [ 128, 2300 ]
             7 [ 0, 0, 0, 2, 3, 1, 1 ] 16 [182] 0 [ 128, 2187 ]
             7 [ 1, 1, 1, 1, 1, 3, 3 ] 16 [352] 0 [ 128, 2296 ]
           6 [ 0, 0, 0, 1, 3, 1 ] 8 [30] 1024 [ 64, 206 ]
             7 [ 0, 0, 0, 1, 3, 1, 1 ] 8 [118] 0 [ 128, 2218 ]
             7 [ 0, 0, 0, 1, 3, 1, 2 ] 16 [119] 0 [ 128, 2224 ]
             7 [ 0, 0, 0, 2, 3, 1, 3 ] 16 [184] 0 [ 128, 2176 ]
             7 [ 1, 1, 1, 1, 1, 3, 1 ] 8 [350] 0 [ 128, 2270 ]
             7 [ 1, 1, 1, 2, 2, 1, 2 ] 8 [423] 0 [ 128, 2227 ]
           6 [ 0, 0, 0, 2, 2, 3 ] 8 [44] 1024 [ 64, 242 ]
           6 [ 1, 1, 1, 1, 1, 3 ] 8 [88] 1024 [ 64, 232 ]
         5 [ 0, 0, 0, 0, 1 ] 4 [2] 256 [ 32, 28 ]
           6 [ 0, 0, 0, 0, 1, 0 ] 8 [5] 1024 [ 64, 203 ]
             7 [ 0, 0, 0, 0, 1, 0, 0 ] 8 [17] 0 [ 128, 2164 ]
             7 [ 0, 0, 0, 0, 1, 2, 2 ] 8 [27] 0 [ 128, 2199 ]
             7 [ 0, 0, 0, 0, 1, 3, 3 ] 8 [32] 0 [ 128, 2184 ]
             7 [ 0, 0, 0, 1, 1, 1, 1 ] 8 [86] 0 [ 128, 2196 ]
             7 [ 0, 0, 0, 1, 1, 2, 2 ] 8 [91] 0 [ 128, 2259 ]
             7 [ 0, 0, 0, 1, 2, 1, 1 ] 8 [102] 0 [ 128, 2180 ]
             7 [ 0, 0, 0, 1, 3, 1, 1 ] 8 [118] 0 [ 128, 2174 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 8 [128] 0 [ 128, 2203 ]
             7 [ 0, 0, 0, 2, 2, 1, 1 ] 8 [166] 0 [ 128, 2197 ]
             7 [ 0, 0, 0, 3, 1, 3, 3 ] 8 [224] 0 [ 128, 2205 ]
             7 [ 1, 1, 1, 1, 1, 2, 2 ] 8 [347] 0 [ 128, 2186 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 8 [422] 0 [ 128, 2183 ]
             7 [ 1, 1, 1, 2, 3, 1, 1 ] 8 [438] 0 [ 128, 2171 ]
           6 [ 0, 0, 0, 0, 1, 2 ] 8 [7] 1024 [ 64, 231 ]
             7 [ 0, 0, 0, 0, 1, 2, 3 ] 16 [28] 0 [ 128, 2249 ]
             7 [ 0, 0, 0, 1, 1, 1, 1 ] 16 [86] 0 [ 128, 2254 ]
             7 [ 0, 0, 0, 1, 1, 1, 2 ] 16 [87] 0 [ 128, 2280 ]
             7 [ 0, 0, 0, 1, 1, 2, 2 ] 16 [91] 0 [ 128, 2286 ]
             7 [ 0, 0, 0, 1, 2, 2, 2 ] 16 [107] 0 [ 128, 2229 ]
             7 [ 0, 0, 0, 1, 3, 1, 1 ] 16 [118] 0 [ 128, 2215 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2212 ]
             7 [ 0, 0, 0, 3, 1, 3, 3 ] 16 [224] 0 [ 128, 2256 ]
           6 [ 0, 0, 0, 0, 1, 3 ] 8 [8] 1024 [ 64, 221 ]
             7 [ 0, 0, 0, 1, 1, 1, 1 ] 16 [86] 0 [ 128, 2291 ]
             7 [ 0, 0, 0, 1, 1, 2, 2 ] 16 [91] 0 [ 128, 2279 ]
             7 [ 0, 0, 0, 1, 1, 2, 3 ] 16 [92] 0 [ 128, 2299 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2244 ]
             7 [ 1, 1, 1, 1, 1, 2, 2 ] 16 [347] 0 [ 128, 2289 ]
           6 [ 0, 0, 0, 1, 1, 1 ] 8 [22] 1024 [ 64, 228 ]
           6 [ 0, 0, 0, 1, 1, 1 ] 8 [22] 1024 [ 64, 228 ]
             7 [ 0, 0, 0, 1, 1, 1, 1 ] 16 [86] 0 [ 128, 2231 ]
             7 [ 0, 0, 0, 1, 1, 1, 3 ] 16 [88] 0 [ 128, 2276 ]
             7 [ 0, 0, 0, 1, 2, 2, 2 ] 16 [107] 0 [ 128, 2243 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2284 ]
             7 [ 0, 0, 0, 2, 2, 1, 1 ] 16 [166] 0 [ 128, 2214 ]
             7 [ 0, 0, 0, 2, 3, 1, 1 ] 16 [182] 0 [ 128, 2247 ]
           6 [ 0, 0, 0, 1, 1, 2 ] 8 [23] 1024 [ 64, 243 ]
             7 [ 0, 0, 0, 1, 1, 2, 3 ] 16 [92] 0 [ 128, 2297 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2285 ]
             7 [ 0, 0, 0, 2, 2, 2, 1 ] 16 [170] 0 [ 128, 2263 ]
           6 [ 0, 0, 0, 1, 2, 1 ] 8 [26] 1024 [ 64, 218 ]
             7 [ 1, 1, 1, 2, 2, 1, 2 ] 16 [423] 0 [ 128, 2193 ]
           6 [ 0, 0, 0, 1, 3, 1 ] 8 [30] 1024 [ 64, 213 ]
             7 [ 1, 1, 1, 1, 1, 2, 1 ] 8 [346] 0 [ 128, 2282 ]
             7 [ 1, 1, 1, 2, 2, 1, 2 ] 8 [423] 0 [ 128, 2239 ]
           6 [ 0, 0, 0, 1, 3, 3 ] 8 [32] 1024 [ 64, 234 ]
             7 [ 0, 0, 0, 2, 2, 1, 3 ] 16 [168] 0 [ 128, 2248 ]
           6 [ 0, 0, 0, 2, 2, 1 ] 8 [42] 1024 [ 64, 229 ]
             7 [ 0, 0, 0, 3, 1, 3, 1 ] 16 [222] 0 [ 128, 2250 ]
           6 [ 0, 0, 0, 3, 1, 3 ] 8 [56] 1024 [ 64, 236 ]
           6 [ 1, 1, 1, 1, 1, 2 ] 8 [87] 1024 [ 64, 223 ]
             7 [ 1, 1, 1, 1, 1, 2, 3 ] 16 [348] 0 [ 128, 2287 ]
           6 [ 1, 1, 1, 2, 2, 1 ] 8 [106] 1024 [ 64, 220 ]
             7 [ 1, 1, 1, 2, 2, 1, 3 ] 16 [424] 0 [ 128, 2295 ]
           6 [ 1, 1, 1, 2, 3, 1 ] 8 [110] 1024 [ 64, 210 ]
             7 [ 1, 1, 1, 2, 3, 1, 3 ] 8 [440] 0 [ 128, 2255 ]
         5 [ 0, 0, 0, 1, 0 ] 4 [5] 256 [ 32, 22 ]
           6 [ 0, 0, 0, 1, 0, 0 ] 4 [17] 1024 [ 64, 193 ]
             7 [ 0, 0, 0, 1, 0, 0, 0 ] 4 [65] 0 [ 128, 2151 ]
             7 [ 0, 0, 0, 1, 0, 0, 3 ] 8 [68] 0 [ 128, 2157 ]
             7 [ 0, 0, 0, 1, 1, 0, 0 ] 4 [81] 0 [ 128, 2166 ]
             7 [ 0, 0, 0, 1, 3, 0, 0 ] 4 [113] 0 [ 128, 2154 ]
             7 [ 0, 0, 0, 2, 2, 0, 0 ] 4 [161] 0 [ 128, 2168 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 4 [342] 0 [ 128, 2165 ]
             7 [ 1, 1, 1, 1, 1, 1, 2 ] 8 [343] 0 [ 128, 2188 ]
             7 [ 1, 1, 1, 2, 3, 1, 1 ] 4 [438] 0 [ 128, 2170 ]
             7 [ 1, 1, 1, 3, 2, 1, 1 ] 4 [486] 0 [ 128, 2153 ]
           6 [ 0, 0, 0, 1, 0, 3 ] 8 [20] 1024 [ 64, 199 ]
             7 [ 0, 0, 0, 1, 0, 3, 3 ] 16 [80] 0 [ 128, 2160 ]
             7 [ 0, 0, 0, 1, 3, 0, 0 ] 16 [113] 0 [ 128, 2161 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 16 [342] 0 [ 128, 2233 ]
           6 [ 0, 0, 0, 1, 1, 0 ] 4 [21] 1024 [ 64, 205 ]
             7 [ 0, 0, 0, 1, 3, 0, 2 ] 8 [115] 0 [ 128, 2211 ]
             7 [ 0, 0, 0, 3, 1, 0, 1 ] 8 [210] 0 [ 128, 2179 ]
             7 [ 1, 1, 1, 1, 1, 1, 3 ] 8 [344] 0 [ 128, 2260 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 8 [422] 0 [ 128, 2202 ]
           6 [ 0, 0, 0, 1, 3, 0 ] 4 [29] 1024 [ 64, 196 ]
             7 [ 0, 0, 0, 1, 3, 0, 3 ] 8 [116] 0 [ 128, 2159 ]
             7 [ 0, 0, 0, 2, 3, 0, 3 ] 8 [180] 0 [ 128, 2156 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 4 [342] 0 [ 128, 2198 ]
             7 [ 1, 1, 1, 1, 1, 1, 2 ] 8 [343] 0 [ 128, 2204 ]
             7 [ 1, 1, 1, 3, 3, 1, 3 ] 4 [504] 0 [ 128, 2206 ]
           6 [ 0, 0, 0, 2, 2, 0 ] 4 [41] 1024 [ 64, 207 ]
           6 [ 1, 1, 1, 1, 1, 1 ] 4 [86] 1024 [ 64, 204 ]
             7 [ 1, 1, 1, 1, 1, 1, 3 ] 8 [344] 0 [ 128, 2189 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 8 [422] 0 [ 128, 2175 ]
             7 [ 1, 1, 1, 2, 3, 1, 1 ] 8 [438] 0 [ 128, 2185 ]
           6 [ 1, 1, 1, 1, 1, 2 ] 8 [87] 1024 [ 64, 224 ]
             7 [ 1, 1, 1, 1, 1, 2, 3 ] 16 [348] 0 [ 128, 2190 ]
           6 [ 1, 1, 1, 2, 3, 1 ] 4 [110] 1024 [ 64, 209 ]
           6 [ 1, 1, 1, 3, 2, 1 ] 4 [122] 1024 [ 64, 195 ]
             7 [ 1, 1, 1, 3, 2, 1, 3 ] 4 [488] 0 [ 128, 2158 ]
         5 [ 0, 0, 0, 1, 1 ] 4 [6] 256 [ 32, 30 ]
           6 [ 0, 0, 0, 1, 3, 2 ] 8 [31] 1024 [ 64, 240 ]
           6 [ 0, 0, 0, 3, 1, 1 ] 8 [54] 1024 [ 64, 217 ]
             7 [ 1, 1, 1, 2, 2, 1, 3 ] 16 [424] 0 [ 128, 2241 ]
           6 [ 1, 1, 1, 1, 1, 3 ] 8 [88] 1024 [ 64, 244 ]
           6 [ 1, 1, 1, 2, 2, 1 ] 8 [106] 1024 [ 64, 233 ]
         5 [ 0, 0, 0, 1, 3 ] 4 [8] 256 [ 32, 25 ]
           6 [ 0, 0, 0, 1, 3, 3 ] 8 [32] 1024 [ 64, 201 ]
             7 [ 0, 0, 0, 1, 3, 3, 3 ] 16 [128] 0 [ 128, 2162 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 16 [342] 0 [ 128, 2235 ]
             7 [ 1, 1, 1, 1, 1, 2, 2 ] 16 [347] 0 [ 128, 2236 ]
           6 [ 0, 0, 0, 2, 3, 3 ] 8 [48] 1024 [ 64, 198 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 8 [342] 0 [ 128, 2210 ]
           6 [ 1, 1, 1, 1, 1, 1 ] 4 [86] 1024 [ 64, 230 ]
           6 [ 1, 1, 1, 1, 1, 2 ] 8 [87] 1024 [ 64, 235 ]
           6 [ 1, 1, 1, 3, 3, 3 ] 4 [128] 1024 [ 64, 237 ]
         5 [ 0, 0, 0, 2, 2 ] 4 [11] 256 [ 32, 31 ]
         5 [ 1, 1, 1, 1, 1 ] 4 [22] 256 [ 32, 29 ]
           6 [ 1, 1, 1, 1, 1, 3 ] 8 [88] 1024 [ 64, 225 ]
             7 [ 1, 1, 1, 1, 1, 3, 3 ] 16 [352] 0 [ 128, 2234 ]
           6 [ 1, 1, 1, 2, 2, 1 ] 8 [106] 1024 [ 64, 214 ]
             7 [ 1, 1, 1, 2, 3, 1, 2 ] 8 [439] 0 [ 128, 2288 ]
           6 [ 1, 1, 1, 2, 3, 1 ] 8 [110] 1024 [ 64, 222 ]
         5 [ 1, 1, 1, 2, 3 ] 4 [28] 256 [ 32, 33 ]
         5 [ 1, 1, 1, 3, 2 ] 4 [31] 256 [ 32, 24 ]XORMAT:=MatrixOf([[0],[0,0],[0,0,0],[0,0,0,0],[0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0]]);;

           6 [ 1, 1, 1, 3, 2, 3 ] 4 [124] 1024 [ 64, 200 ]
        4 [ 1, 1, 1, 2 ] 4 [3] 64 [ 16, 4 ]
         5 [ 0, 0, 0, 1, 1 ] 4 [6] 256 [ 32, 23 ]
           6 [ 0, 0, 0, 1, 1, 0 ] 4 [21] 1024 [ 64, 194 ]
             7 [ 0, 0, 0, 1, 1, 0, 0 ] 4 [81] 0 [ 128, 2152 ]
             7 [ 1, 1, 1, 1, 1, 1, 1 ] 4 [342] 0 [ 128, 2173 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 4 [422] 0 [ 128, 2155 ]
             7 [ 1, 1, 1, 2, 3, 1, 1 ] 4 [438] 0 [ 128, 2169 ]
           6 [ 1, 1, 1, 1, 1, 1 ] 4 [86] 1024 [ 64, 212 ]
             7 [ 1, 1, 1, 1, 1, 1, 3 ] 8 [344] 0 [ 128, 2209 ]
             7 [ 1, 1, 1, 2, 2, 1, 1 ] 8 [422] 0 [ 128, 2208 ]
           6 [ 1, 1, 1, 2, 2, 1 ] 4 [106] 1024 [ 64, 197 ]
           6 [ 1, 1, 1, 2, 3, 1 ] 4 [110] 1024 [ 64, 208 ]
             7 [ 1, 1, 1, 3, 2, 1, 3 ] 8 [488] 0 [ 128, 2262 ]
         5 [ 1, 1, 1, 1, 1 ] 4 [22] 256 [ 32, 35 ]
           6 [ 1, 1, 1, 1, 1, 3 ] 8 [88] 1024 [ 64, 239 ]
           6 [ 1, 1, 1, 2, 2, 1 ] 8 [106] 1024 [ 64, 238 ]
         5 [ 1, 1, 1, 2, 2 ] 4 [27] 256 [ 32, 26 ]
         5 [ 1, 1, 1, 2, 3 ] 4 [28] 256 [ 32, 32 ]
           6 [ 1, 1, 1, 3, 2, 3 ] 8 [124] 1024 [ 64, 245 ]
       4 [ 2, 2, 2, 3 ] 2 [8] 64 [ 16, 2 ]
         5 [ 0, 0, 0, 0, 0 ] 1 [1] 256 [ 32, 34 ]
           6 [ 0, 0, 0, 0, 0, 0 ] 8 [1] 1024 [ 64, 211 ]
             7 [ 0, 0, 0, 0, 0, 0, 0 ] 8 [1] 0 [ 128, 2172 ]
         5 [ 0, 0, 0, 1, 2 ] 4 [7] 256 [ 32, 21 ]
           6 [ 0, 0, 0, 1, 2, 0 ] 4 [25] 1024 [ 64, 192 ]
             7 [ 0, 0, 0, 1, 2, 0, 0 ] 4 [97] 0 [ 128, 2150 ]

  </FILE>


<NACHLAD> #oben ändern

  </NACHLAD>

gap> DisplayProfile();
  count  self/ms  chld/ms  stor/kb  chld/kb  package  function
 114930      294      124     9806     3055  (oprt.)  Flat
 549128      623        0    34310        0           DEEP_COPY_OBJ
   7870        9     1159      307   134795           PcgsByPcSequenceNCMI
   8322       16     1281      325   147650           PcgsByPcSequenceNC15
  25895     1628      664     1213       39           XLEER
   4161     1338     2463   211470   232483           QY15
1592329     4097       11   981398        0           IZUN
  25895     1906     2277    45322   206575           XMISCH
  59345       83     6715     2318  1175852           PcgsByPcSequenceNC14
1476615     7066        0  1671116        0           QY08
   4161     2135    12068   111255  1808745           QY14
  25669    11193     4259  1020371   148234           XFUELL
1847604    18156     2021   930800    28869  GAP      Group
4974995    23400     1851  3020481    30054  (oprt.)  Size
210981*    27307      467  1564703        0           Commu
128021*    30904        0  6400005        0           QY09
396645*    32928      590  2267146        0  (oprt.)  Add
434207*    34762      777  4842868        0           NZUI
 512735      636    56173    20028  9872966           PcgsByPcSequenceNC07
 668024      745    60281    26094  112789*           PcgsByPcSequenceNC12
1472452    23280    41931  1643228  4570628           QY21
4198005    55495    12700  5408141   775314           QY10
179770*    89820        0  103194*     6591  (oprt.)  ExponentsOfPcElement
 159670    14660   107422   728359  175575*           QY12
 919635   120510     4459  148394*   202153  (oprt.)  RightTransversal
 548886    55287    71722  5952777  6931961           WEGEVERGLEICHER
1468291     2125   149022    57355  246635*           PcgsByPcSequenceNC11
106916*   193246        0  137829*        0  (oprt.)  PcElementByExponentsNC
1468291    24123   225719  1122031  344248*           QY11
2724815   271475     2814  472091*    69394  (oprt.)  PcgsByPcSequenceNC
 548886    85508   332665  108021*  346816*           QY07
 919635    37997  1112237  4295249  133533*           QY13
         1172752           139321*                    TOTAL
alle «- Markierung sind aktuelle Verbesserungen, Rest nicht mit aktualisiert
</LOS>