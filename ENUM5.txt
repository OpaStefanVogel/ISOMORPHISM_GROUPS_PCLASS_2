#asterix:./GAP4R7P4/gap4r7/bin/gap.sh
#Read("Desktop/GAP/PCLASS2/ENUM5.txt");
n:=0*Z(2);
z:=Z(2);
#V:=FullRowSpace( GF(2),d*(d+1)/2 );

d:=2;
P:=Group((1,2)(3,4),(2,4),(2,3));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q2:=Orbits(P,V,Permuted);Size(Q2);SortedList(List(Q2,i->Size(i)));
#5
#[ 1, 1, 4, 4, 6 ]
d:=3;
P:=Group(
  (1,2)(3,4)(5,6)(7,8),
  (2,4)(6,8),
  (2,3,5)(7,6,4));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q3:=Orbits(P,V,Permuted);Size(Q3);SortedList(List(Q3,i->Size(i)));
#10
#[ 1, 1, 8, 8, 14, 28, 28, 56, 56, 56 ]
d:=4;
P:=Group(
  (1,2)(3,4)(5,6)(7,8)(9,10)(11,12)(13,14)(15,16),
  (2,4)(6,8)(10,12)(14,16),
  (2,3,5,9)(4,7,13,10)(6,11)(15,14,12,8));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q4:=Orbits(P,V,Permuted);;Size(Q4);SortedList(List(Q4,i->Size(i)));
Q41:=Orbit(P,[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(Q4);
#32
#[ 1, 1, 16, 16, 30, 120, 120, 140, 140, 240, 240, 448, 448,
#  560, 560, 840, 840, 840, 1680, 1680, 1680, 1680, 1920, 
#  2688, 2688, 4480, 4480, 6720, 6720, 6720, 6720, 10080 ]
K41:=Orbit(P,[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K41);
K42:=Orbit(P,[n,z,z,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K42);
K43:=Orbit(P,[n,z,z,z,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K43);
K44:=Orbit(P,[n,z,z,n,z,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K44);
K45:=Orbit(P,[n,z,z,n,z,n,n,n,z,n,n,n,n,n,n,n],Permuted);;Size(K45);
K46:=Orbit(P,[n,z,z,n,z,n,n,n,z,n,n,n,n,n,n,z],Permuted);;Size(K46);
G41:=Orbit(P,[n,z,z,n,z,n,n,z,n,n,n,n,n,n,n,n],Permuted);;Size(G41);
G42:=Orbit(P,[n,z,z,n,z,n,n,z,z,n,n,z,n,z,z,n],Permuted);;Size(G42);
G43:=Orbit(P,[n,z,z,z,z,n,n,n,z,n,n,n,z,n,n,n],Permuted);;Size(G43);
G44:=Orbit(P,[n,z,z,z,z,z,z,n,z,n,n,n,n,n,n,z],Permuted);;Size(G44);
G45:=Orbit(P,[n,z,z,z,z,z,z,n,z,z,z,n,n,z,z,z],Permuted);;Size(G45);
G46:=Orbit(P,[n,z,z,z,z,z,z,n,z,z,z,n,z,n,n,n],Permuted);;Size(G46);

#2 5
#3 10
#4 2560

#ohne e:
d:=2;
P:=Group((1,3),(1,2));Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q2:=Orbits(P,V,Permuted);Size(Q2);SortedList(List(Q2,i->Size(i)));
#4
#[ 1, 1, 3, 3 ]
d:=3;
P:=Group(
  (1,3)(5,7),
  (1,2,4)(6,5,3));Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q3:=Orbits(P,V,Permuted);;Size(Q3);SortedList(List(Q3,i->Size(i)));
#10
#[ 1, 1, 7, 7, 7, 7, 21, 21, 28, 28 ]
d:=4;
P:=Group(
  (1,3)(5,7)(9,11)(13,15),
  (1,2,4,8)(3,6,12,9)(5,10)(14,13,11,7)
  );Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q4:=Orbits(P,V,Permuted);;Size(Q4);SortedList(List(Q4,i->Size(i)));
#46
#[ 1, 1, 15, 15, 15, 15, 35, 35, 105, 105, 105, 105, 105, 105, 120, 120,
#  168, 168, 280, 280, 315, 315, 420, 420, 420, 
#  420, 420, 420, 420, 420, 840, 840, 840, 840, 840, 840, 
#  1680, 1680, 1680, 1680, 2520, 2520, 2520, 2520, 2520, 2520 ]
K41:=Orbit(P,[z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K41);
K42:=Orbit(P,[z,z,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K42);
K43:=Orbit(P,[z,z,z,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K43);
K44:=Orbit(P,[z,z,n,z,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K44);
K45:=Orbit(P,[z,z,n,z,n,n,n,z,n,n,n,n,n,n,n],Permuted);;Size(K45);
K46:=Orbit(P,[z,z,n,z,n,n,n,z,n,n,n,n,n,n,z],Permuted);;Size(K46);
G41:=Orbit(P,[z,z,n,z,n,n,z,n,n,n,n,n,n,n,n],Permuted);;Size(G41);
G42:=Orbit(P,[z,z,n,z,n,n,z,z,n,n,z,n,z,z,n],Permuted);;Size(G42);
G43:=Orbit(P,[z,z,z,z,n,n,n,z,n,n,n,z,n,n,n],Permuted);;Size(G43);
G44:=Orbit(P,[z,z,z,z,z,z,n,z,n,n,n,n,n,n,z],Permuted);;Size(G44);
G45:=Orbit(P,[z,z,z,z,z,z,n,z,z,z,n,n,z,z,z],Permuted);;Size(G45);
G46:=Orbit(P,[z,z,z,z,z,z,n,z,z,z,n,z,n,n,n],Permuted);;Size(G46);
SortedList(G46)=SortedList(K46);
#Ergebnis: bis auf d=2 auch 4 10 2560

#2 3 4
#3 6 8
#4 10 16
#5 15 32
#6 21 64 

Pr:=function(L)
  return L{[1,2,3,4,5,6,8,9,10,12]};
  end;
DrT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;
PrT:=function(L)
  return [
    L[1],L[2],L[3],L[4],L[5],L[6],
    n,L[7],L[8],L[9],n,L[10],n,n,n];
  end;
QQD4:=Unique(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQD4);List(QQD4,i->Size(i));
QQP4:=Unique(List(Q4,j->SortedList(List(j,i->Pr(i)))));;Size(QQP4);

FilterG:=function(LL)
  local RET,L;
  RET:=false;
  for L in LL do if 
    L[7]=L[1]+L[2]+L[3]+L[4]+L[5]+L[6] and
    L[11]=L[1]+L[2]+L[3]+L[8]+L[9]+L[10] and
    L[13]=L[1]+L[4]+L[5]+L[8]+L[9]+L[12] and
    L[14]=L[2]+L[4]+L[6]+L[8]+L[10]+L[12] and
    L[15]=L[3]+L[5]+L[6]+L[9]+L[10]+L[12]
    then RET:=true; fi; od;
  return RET;
  end;
FilterK:=function(LL)
  local RET,L;
  RET:=false;
  for L in LL do if 
    L[7]=n and
    L[11]=n and
    L[13]=n and
    L[14]=n and
    L[15]=n
    then RET:=true; fi; od;
  return RET;
  end;
FilterG(G41);
Collected(List(Q4,i->FilterG(i)));
List(Q4,i->FilterG(i));
List(Q4,i->FilterK(i));
List(Q4,i->FilterG(i)=true and FilterK(i)=true);
Q4FILTG:=Filtered(Q4,FilterG);;Size(Q4FILTG);
QQD4:=Unique(List(Q4FILTG,j->Unique(SortedList(List(j,i->Pr(i))))));;Size(QQD4);List(QQD4,i->Size(i));
Q4FILTK:=Filtered(Q4,FilterK);;Size(Q4FILTK);
QQP4:=Unique(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=Unique(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=Unique(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
#nochmal einzelne Schritte:
List(Q4,i->Size(i));
QQP4:=List(Q4,j->List(j,i->DrT(i)));;List(QQP4,i->Size(i));
QQP4:=List(Q4,j->SortedList(List(j,i->DrT(i))));;List(QQP4,i->Size(i));
QQP4:=List(Q4,j->Unique(SortedList(List(j,i->DrT(i)))));;List(QQP4,i->Size(i));
QQP4:=Collected(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;List(QQP4,i->Size(i[1]));List(QQP4,i->i[2]);
QQP4:=Unique(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
#nochmal mit Q4FILTK:
List(Q4FILTK,i->Size(i));
QQP4:=List(Q4FILTK,j->List(j,i->DrT(i)));;List(QQP4,i->Size(i));
QQP4:=List(Q4FILTK,j->SortedList(List(j,i->DrT(i))));;List(QQP4,i->Size(i));
QQP4:=List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i)))));;List(QQP4,i->Size(i));
QQP4:=Collected(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;List(QQP4,i->Size(i[1]));List(QQP4,i->i[2]);
QQP4:=Unique(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));


#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
########## ^^^ soweit aus D4_2E #######
#hier der neue Anlauf, was auch funktioniert 
### aus ENUM.txt:
MACH:=function(d)
  local i,j,K,L,n;
  n:=2^d;K:=[];L:=[];
  for i in [1..n-1] do
    if not(IsBound(K[i])) then
      if IsOddInt(i) then K[i]:=i+2; K[i+2]:=i; else K[i]:=i; fi;
      fi; 
    od;
  for i in [1..n-1] do
    j:=2*i;
    if j>=n then j:=j mod n +1; fi;
    L[i]:=j;
    od;
  return Group(PermList(K),PermList(L));
  end;
### in CYCLQ.txt hatt ich auch
G:=SmallGroup(2,1);#1          #M1, M2, M3, M4, M5
G:=ElementaryAbelianGroup(4);  # 3   6   9  12  15
G:=ElementaryAbelianGroup(8);  # 6  12  18  24  30
G:=ElementaryAbelianGroup(16); #10  20  30  40  50
G:=ElementaryAbelianGroup(32); #15  30  45  60  75
G:=ElementaryAbelianGroup(64); #21  42  63  84 105
G:=ElementaryAbelianGroup(128);#28
G:=ElementaryAbelianGroup(256);#36
mats:=List(Pcgs(G),x->IdentityMat(1,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(2,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(3,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(4,GF(2)));
M:=GModuleByMats(mats,GF(2));
T:=TwoCocycles(G,M);Size(T);
B:=TwoCoboundaries(G,M);
L:=Extensions(G,M);;Size(L);
L1:=Collected(List(L,i->IdSmallGroup(i)));
L2:=Collected(List(L,i->Size(FrattiniSubgroup(i))));

S:=SplitExtension(G,M);
IdSmallGroup(S);
IdSmallGroup(ModuleOfExtension(S));
T:=TwoCocycles(G,M);
B:=TwoCoboundaries(G,M);
CH:=TwoCohomology(G, M);
Size(PreImage(CH.cohom));
Collected(List(T,i->IdSmallGroup(Extension(G,M,i))));
Collected(List(PreImages(CH.cohom),i->IdSmallGroup(Extension(G,M,i))));
Collected(List(Extensions(G,M),i->IdSmallGroup(i)));

### unklar


#### hier der neueste Anlauf:
Q:=[];QQP:=[];QQL:=[];
d:=4;#d:=5;#d:=3;
P:=MACH(d);Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q[d]:=OrbitsDomain(P,V,Permuted);;Size(Q[d]);SortedList(List(Q[d],i->Size(i)));
#QQP[d]:=Unique(List(Q[d],j->SortedList(Unique(List(j,i->DrT(i))))));;Size(QQP[d]);List(QQP[d],i->Size(i));
QQP[d]:=Set(List(Q[d],j->Set(List(j,i->DrT(i))))));;Size(QQP[d]);List(QQP[d],i->Size(i));
LogTo("GAP_LOGFILE4.txt");
for j in [1..Size(Q[d])] do
  Print("\n",j,List(Q[d][j][1],function(i) if i=n then return 0; else return 1; fi; end));
  od;
LogTo();
Q4FILTG:=Filtered(Q[d],FilterG);;Size(Q4FILTG);
List(Q4FILTG,i->Size(i));

VV:=Enumerator(V);
GZ:=Orbit(P,VV[999999],Permuted);;Size(GZ);#4999680
GZ:=Orbit(P,[n,z,n,n,z,z,n,n,n,z,z,n,z,z,n,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z],Permuted);;Size(GZ);#4999680 auch.
[n,z,n,n,z,z,n,n,n,z,z,n,z,n,z,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z] in GZ;
GZ2:=Orbit(P,[n,z,n,n,z,z,n,n,n,z,z,n,z,n,z,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z],Permuted);;Size(GZ2);#4999680 auch.


ConvI:=function(LL)
  local L,LLL,LLLL,MM,i,NN;
  LLLL:=[];
  for L in LL do 
    LLL:=ShallowCopy(L);
    if L[7]=n then LLL[7]:=z; else LLL[7]:=n; fi;
    if L[11]=n then LLL[11]:=z; else LLL[11]:=n; fi;
    if L[13]=n then LLL[13]:=z; else LLL[13]:=n; fi;
    if L[14]=n then LLL[14]:=z; else LLL[14]:=n; fi;
#    if L[15]=n then LLL[15]:=z; else LLL[15]:=n; fi;
    MM:=0;NN:=DrT(LLL);
    for i in [1..Size(QQP[d])] do
      if NN in QQP[d][i] then MM:=i; fi;
      od;
    Add(LLLL,MM);
    od;
  return Set(LLLL);
  end;

QQCONV:=Set(Q4FILTG,i->ConvI(i));
List(QQCONV,i->Size(i));








List(Q[d],i->Size(i));
B50:=[z,z,z,z,z,z,n,z,z,z,n,z,n,n,n];
B47:=[z,z,z,z,z,z,n,z,z,z,n,n,z,z,z];
B48:=[z,z,z,z,z,z,n,z,n,n,n,n,n,n,z];
B49:=[z,z,z,z,n,n,n,z,n,n,n,z,n,n,n];
B45:=[z,z,n,z,n,n,z,z,n,n,z,n,z,z,n];
B46:=[z,z,n,z,n,n,z,n,n,n,n,n,n,n,n];
B:=B50;
B:=B47;
B:=B48;
B:=B49;
B:=B45;
B:=B46;
for i in [1..Size(Q[d])] do if B in Q[d][i] then Print(i," "); fi; od;
#DA:=[41,35,24,25,10,5];
List(DA,i->Size(Q[4][i]));
List(Q[d],i->FilterG(i));
List(Q[d],i->FilterK(i));
Size(DrT(Q[d][1]));
Position(QQP[d],SortedList(Unique(List(Q[d][41],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][35],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][24],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][25],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][10],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][05],i->DrT(i)))));#7
List(Q[d],i->Size(i));
List(Q[d],j->Position(QQP[d],SortedList(Unique(List(j,i->DrT(i))))));

#A1:=[z,z,n,z,n,n,-,n,n,n,-,n,-,-,-];
XA1:=[z,n,n,n,n,n,n,n,n,n,n,n,n,n,n];
XA2:=[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n];
XA3:=[n,n,n,n,n,n,z,n,n,n,n,n,n,n,n];
XA4:=[z,z,z,z,z,z,n,n,n,n,n,n,n,n,n];
XA5:=[z,z,z,z,z,z,z,z,z,z,z,z,z,z,n];
B:=XA1;
B:=XA2;
B:=XA3;
B:=XA4;
B:=XA5;
SortedList(Unique(List(Q[d][9],i->DrT(i))));
DK:=[];for j in QQP[d][3] do
  Print("\n",j);
  for i in [1..Size(Q[d])] do if PrT(j) in Q[d][i] then Print(i," "); Add(DK,i);fi; od;
  od;Unique(SortedList(DK));
QQL[d]:=List(DA,i->Unique(SortedList(List(Q[d][i],j->Pr(j)))));List(QQL[d],i->Size(i));
Print(QQL[d][1]);
DK:=[];for j in QQL[d][1] do
  Print("\n",j);
  for i in [1..Size(Q[d])] do if PrT(j) in Q[d][i] then Print(i," "); Add(DK,i);fi; od;
  od;Unique(SortedList(DK));






#suche alternative
 Orbit(S,Z(2)^0*[1,0,0,0],OnLines);#da geht nur [1,0,0,0] nicht [1,0,0,0,1]
S:=GL(d,2);Size(S);#aber hab schonmal Size(S)=Size(P);
Orbit(S,Z(2)^0*[1,0,1,0,1,1,1,0,0,0,0,0,0,0,0],OnLines);
Orbit(S,List(V)[1],OnLines);

Q[d]:=Orbits(S,V,OnLines);;Size(Q[d]);SortedList(List(Q[d],i->Size(i)));


#
QSUM:=function(Q)
  local i,SUM;
  SUM:=0;
  for i in Q[1] do if i=z then SUM:=SUM+1; fi; od;
  return SUM;
  end;
List(Q[d],i->QSUM(i));
FQ:=Filtered(Q[d],i->QSUM(i)=8);;
UQ:=List(FQ,j->Unique(List(j,i->DrT(i))));;List(UQ,i->Size(i));
#[ 1, 105, 35, 420, 420, 15 ]



###### neu mit Action
DrT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;

n:=4;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,
    c*d,a*c*d,b*c*d,a*b*c*d];
A:=AutomorphismGroup(G);
P:=Action(A,L);
Size(P);
V:=GF(2)^(2^n-1);
ORB[n]:=OrbitsDomain(P,V,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n],j->Set(List(j,i->DrT(i)))));;
Size(QQP);List(QQP,i->Size(i));


#Variante mit Einselement,geht auch
DrFilt16:=function(L)
  return 
    L[8]=L[2]+L[3]+L[4]+L[5]+L[6]+L[7] and
    L[12]=L[2]+L[3]+L[4]+L[9]+L[10]+L[11] and
    L[14]=L[2]+L[5]+L[6]+L[9]+L[10]+L[13] and
    L[15]=L[3]+L[5]+L[7]+L[9]+L[11]+L[13] and
    L[16]=L[4]+L[6]+L[7]+L[10]+L[11]+L[13];
  end;
DrT16:=function(L)
  return [
    L[2]+L[8]+L[12]+L[14],
    L[3]+L[8]+L[12]+L[15],
    L[4]+L[8]+L[12]+L[16],
    L[5]+L[8]+L[14]+L[15],
    L[6]+L[8]+L[14]+L[16],
    L[7]+L[8]+L[15]+L[16],
    L[9]+L[12]+L[14]+L[15],
    L[10]+L[12]+L[14]+L[16],
    L[11]+L[12]+L[15]+L[16],
    L[13]+L[14]+L[15]+L[16]];
  end;
n:=4;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a^0,a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,
    c*d,a*c*d,b*c*d,a*b*c*d];
A:=AutomorphismGroup(G);
P:=Action(A,G);
Size(P);
V:=GF(2)^(2^n);
ORB[n]:=OrbitsDomain(P,V,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n],j->Set(List(j,i->DrT16(i)))));;
Size(QQP);List(QQP,i->Size(i));
FQ:=Filtered(ORB[n]{[1..46]},i->DrFilt16(i[1]));;
Size(FQ);List(FQ,i->Size(i));


DrTT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;
Q:=Action(A,G);
Size(Q);
V:=GF(2)^(2^n-1);
W:=GF(2)^(2^n);
ORB[n]:=OrbitsDomain(Q,W,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n],j->Set(List(j,i->DrT(i)))));;
Size(QQP);List(QQP,i->Size(i));

M:=Arrangements([0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],15);;
ORB[n]:=OrbitsDomain(P,M,Permuted);;
Size(ORB[n]);

n:=5;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
A:=AutomorphismGroup(G);
P:=Action(A,G);
Size(P);
M:=Arrangements([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],31);;#dauertS
Size(M);
ORB[n]:=OrbitsDomain(P,M,Permuted);;
Size(ORB[n]);


Float(10^308/11^297);
Float(10^309/11^296);
Float(10^309/11^297);

Float(10^308);
Float(10^309);

Float(11^296);
Float(11^297);


So, hier versuch ich als nächstes mal das DrTDr hinzubekommen.
NZUI:=function(n,S) return CoefficientsQadic(2^20+n,2){[1..S]}; end;
NZUI(13,7);
 Sum(NZUI(13,7));

DrTDr:=function(d)
  local i,INT,n,m,M,makt,j,k,SUM,MM;
  n:=2^d;
  m:=d*(d+1)/2;
  makt:=1;
  M:=NullMat(n-1,m);
  for i in [1..n-1] do
    INT:=NZUI(i,d);
#    Print("\n",INT);
    SUM:=Sum(INT);
    if SUM<3 then
      M[i][makt]:=1;
      makt:=makt+1;
      else
        for j in [1..d] do if INT[j]=1 then
          for k in [j..d] do if INT[k]=1 then
            if IsOddInt(SUM) and j=k then
              M[i][(k-1)*k/2+1]:=Z(2);
              fi;
            if j<k then
              M[i][(k-1)*k/2+j+1]:=Z(2);
#            Print("*",j,"-",k);
              fi;
            fi; od;
          fi; od;
        fi;
#    Print(M[i]);
    od;
  return M;
  end;
M:=DrTDr(3);
M:=DrTDr(4);
M:=DrTDr(5);
M:=DrTDr(6);
M:=DrTDr(7);
WirdDasNull:=function(M)
  local i,j,flag;
  MM:=TransposedMat(M)*M;
  flag:=true;
  for i in MM do for j in i do
    if j<>0*Z(2) then flag:=false; fi;
    od; od;
  return flag;
  end;
WirdDasNull(DrTDr(3));
WirdDasNull(DrTDr(4));
WirdDasNull(DrTDr(5));
WirdDasNull(DrTDr(6));
WirdDasNull(DrTDr(7));
WirdDasNull(DrTDr(8));
WirdDasNull(DrTDr(9));
for i in [1..100] do Print(i,WirdDasNull(DrTDr(i)),"\c"); od;

# jetzt die generierte Matrix Dr
z0:=0*Z(2); z1:=Z(2)^0;
NZUID:=function(n,S) return CoefficientsQadic(2^20+n,2){[1..S]}; end;
DrVektor:=[];k:=1;
for i in [1..100] do
  DrVektor[k]:=[0,i]; k:=k+1;
  for j in [1..i-1] do
    DrVektor[k]:=[j,i]; k:=k+1;
    od; od;
DrVektor;

DM:=function(i,j)
  local W1,W2,S;
  W1:=NZUID(i,20);
  S:=Sum(W1);
  if IsOddInt(S) then
    if DrVektor[j][1]=0 then 
      if W1[DrVektor[j][2]]=1 then return z1; else return z0; fi;
      else 
        if W1[DrVektor[j][2]]=1 and W1[DrVektor[j][1]]=1 then return z1; else return z0; fi;
        fi;
    else
      if DrVektor[j][1]=0 then 
        return z0;
        else 
          if W1[DrVektor[j][2]]=1 and W1[DrVektor[j][1]]=1 then return z1; else return z0; fi;
          fi;
        fi;
  end;

for i in [1..1023] do
  Print("\n",i," ");
  for j in [1..99] do
    if DM(i,j)=z0 then Print("0"); else Print("1"); fi;
    od;
  od;

DrTDrTEST:=function(d)
  local n,m,i,j,k,RET,SUM;
  n:=2^d;
  m:=d*(d+1)/2;
  RET:=false;
  for i in [1..m] do for j in [i..m ] do
    SUM:=z0;
    for k in [1..n-1] do
      SUM:=SUM+DM(k,i)*DM(k,j);
      od;
    if SUM=z1 then Print("1");RET:=true; fi;
    od; od;
  return RET;
  end;
DrTDrTEST(2);
DrTDrTEST(3);
DrTDrTEST(4);
DrTDrTEST(5);
DrTDrTEST(6);
DrTDrTEST(7);
DrTDrTEST(8);


  