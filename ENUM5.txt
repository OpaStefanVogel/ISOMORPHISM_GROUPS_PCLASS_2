#asterix:./GAP4R7P4/gap4r7/bin/gap.sh
#Read("Desktop/GAP/PCLASS2/ENUM5.txt");
n:=0*Z(2);
z:=Z(2);
#V:=FullRowSpace( GF(2),d*(d+1)/2 );

d:=2;
P:=Group((1,2)(3,4),(2,4),(2,3));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q2:=Orbits(P,V,Permuted);Size(Q2);SortedList(List(Q2,i->Size(i)));
#5
#[ 1, 1, 4, 4, 6 ]
d:=3;
P:=Group(
  (1,2)(3,4)(5,6)(7,8),
  (2,4)(6,8),
  (2,3,5)(7,6,4));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q3:=Orbits(P,V,Permuted);Size(Q3);SortedList(List(Q3,i->Size(i)));
#10
#[ 1, 1, 8, 8, 14, 28, 28, 56, 56, 56 ]
d:=4;
P:=Group(
  (1,2)(3,4)(5,6)(7,8)(9,10)(11,12)(13,14)(15,16),
  (2,4)(6,8)(10,12)(14,16),
  (2,3,5,9)(4,7,13,10)(6,11)(15,14,12,8));Size(P);
V:=FullRowSpace( GF(2),2^d );
Q4:=Orbits(P,V,Permuted);;Size(Q4);SortedList(List(Q4,i->Size(i)));
Q41:=Orbit(P,[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(Q4);
#32
#[ 1, 1, 16, 16, 30, 120, 120, 140, 140, 240, 240, 448, 448,
#  560, 560, 840, 840, 840, 1680, 1680, 1680, 1680, 1920, 
#  2688, 2688, 4480, 4480, 6720, 6720, 6720, 6720, 10080 ]
K41:=Orbit(P,[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K41);
K42:=Orbit(P,[n,z,z,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K42);
K43:=Orbit(P,[n,z,z,z,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K43);
K44:=Orbit(P,[n,z,z,n,z,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K44);
K45:=Orbit(P,[n,z,z,n,z,n,n,n,z,n,n,n,n,n,n,n],Permuted);;Size(K45);
K46:=Orbit(P,[n,z,z,n,z,n,n,n,z,n,n,n,n,n,n,z],Permuted);;Size(K46);
G41:=Orbit(P,[n,z,z,n,z,n,n,z,n,n,n,n,n,n,n,n],Permuted);;Size(G41);
G42:=Orbit(P,[n,z,z,n,z,n,n,z,z,n,n,z,n,z,z,n],Permuted);;Size(G42);
G43:=Orbit(P,[n,z,z,z,z,n,n,n,z,n,n,n,z,n,n,n],Permuted);;Size(G43);
G44:=Orbit(P,[n,z,z,z,z,z,z,n,z,n,n,n,n,n,n,z],Permuted);;Size(G44);
G45:=Orbit(P,[n,z,z,z,z,z,z,n,z,z,z,n,n,z,z,z],Permuted);;Size(G45);
G46:=Orbit(P,[n,z,z,z,z,z,z,n,z,z,z,n,z,n,n,n],Permuted);;Size(G46);

#2 5
#3 10
#4 2560

#ohne e:
d:=2;
P:=Group((1,3),(1,2));Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q2:=Orbits(P,V,Permuted);Size(Q2);SortedList(List(Q2,i->Size(i)));
#4
#[ 1, 1, 3, 3 ]
d:=3;
P:=Group(
  (1,3)(5,7),
  (1,2,4)(6,5,3));Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q3:=Orbits(P,V,Permuted);;Size(Q3);SortedList(List(Q3,i->Size(i)));
#10
#[ 1, 1, 7, 7, 7, 7, 21, 21, 28, 28 ]
d:=4;
P:=Group(
  (1,3)(5,7)(9,11)(13,15),
  (1,2,4,8)(3,6,12,9)(5,10)(14,13,11,7)
  );Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q4:=Orbits(P,V,Permuted);;Size(Q4);SortedList(List(Q4,i->Size(i)));
#46
#[ 1, 1, 15, 15, 15, 15, 35, 35, 105, 105, 105, 105, 105, 105, 120, 120,
#  168, 168, 280, 280, 315, 315, 420, 420, 420, 
#  420, 420, 420, 420, 420, 840, 840, 840, 840, 840, 840, 
#  1680, 1680, 1680, 1680, 2520, 2520, 2520, 2520, 2520, 2520 ]
K41:=Orbit(P,[z,n,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K41);
K42:=Orbit(P,[z,z,n,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K42);
K43:=Orbit(P,[z,z,z,n,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K43);
K44:=Orbit(P,[z,z,n,z,n,n,n,n,n,n,n,n,n,n,n],Permuted);;Size(K44);
K45:=Orbit(P,[z,z,n,z,n,n,n,z,n,n,n,n,n,n,n],Permuted);;Size(K45);
K46:=Orbit(P,[z,z,n,z,n,n,n,z,n,n,n,n,n,n,z],Permuted);;Size(K46);
G41:=Orbit(P,[z,z,n,z,n,n,z,n,n,n,n,n,n,n,n],Permuted);;Size(G41);
G42:=Orbit(P,[z,z,n,z,n,n,z,z,n,n,z,n,z,z,n],Permuted);;Size(G42);
G43:=Orbit(P,[z,z,z,z,n,n,n,z,n,n,n,z,n,n,n],Permuted);;Size(G43);
G44:=Orbit(P,[z,z,z,z,z,z,n,z,n,n,n,n,n,n,z],Permuted);;Size(G44);
G45:=Orbit(P,[z,z,z,z,z,z,n,z,z,z,n,n,z,z,z],Permuted);;Size(G45);
G46:=Orbit(P,[z,z,z,z,z,z,n,z,z,z,n,z,n,n,n],Permuted);;Size(G46);
SortedList(G46)=SortedList(K46);
#Ergebnis: bis auf d=2 auch 4 10 2560

#2 3 4
#3 6 8
#4 10 16
#5 15 32
#6 21 64 

Pr:=function(L)
  return L{[1,2,3,4,5,6,8,9,10,12]};
  end;
DrT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;
PrT:=function(L)
  return [
    L[1],L[2],L[3],L[4],L[5],L[6],
    n,L[7],L[8],L[9],n,L[10],n,n,n];
  end;
QQD4:=Unique(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQD4);List(QQD4,i->Size(i));
QQP4:=Unique(List(Q4,j->SortedList(List(j,i->Pr(i)))));;Size(QQP4);

FilterG:=function(LL)
  local RET,L;
  RET:=false;
  for L in LL do if 
    L[7]=L[1]+L[2]+L[3]+L[4]+L[5]+L[6] and
    L[11]=L[1]+L[2]+L[3]+L[8]+L[9]+L[10] and
    L[13]=L[1]+L[4]+L[5]+L[8]+L[9]+L[12] and
    L[14]=L[2]+L[4]+L[6]+L[8]+L[10]+L[12] and
    L[15]=L[3]+L[5]+L[6]+L[9]+L[10]+L[12]
    then RET:=true; fi; od;
  return RET;
  end;
FilterK:=function(LL)
  local RET,L;
  RET:=false;
  for L in LL do if 
    L[7]=n and
    L[11]=n and
    L[13]=n and
    L[14]=n and
    L[15]=n
    then RET:=true; fi; od;
  return RET;
  end;
FilterG(G41);
Collected(List(Q4,i->FilterG(i)));
List(Q4,i->FilterG(i));
List(Q4,i->FilterK(i));
List(Q4,i->FilterG(i)=true and FilterK(i)=true);
Q4FILTG:=Filtered(Q4,FilterG);;Size(Q4FILTG);
QQD4:=Unique(List(Q4FILTG,j->Unique(SortedList(List(j,i->Pr(i))))));;Size(QQD4);List(QQD4,i->Size(i));
Q4FILTK:=Filtered(Q4,FilterK);;Size(Q4FILTK);
QQP4:=Unique(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=Unique(List(Q4,j->SortedList(List(j,i->DrT(i)))));;Size(QQP4);List(QQP4,i->Size(i));
QQP4:=Unique(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
#nochmal einzelne Schritte:
List(Q4,i->Size(i));
QQP4:=List(Q4,j->List(j,i->DrT(i)));;List(QQP4,i->Size(i));
QQP4:=List(Q4,j->SortedList(List(j,i->DrT(i))));;List(QQP4,i->Size(i));
QQP4:=List(Q4,j->Unique(SortedList(List(j,i->DrT(i)))));;List(QQP4,i->Size(i));
QQP4:=Collected(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;List(QQP4,i->Size(i[1]));List(QQP4,i->i[2]);
QQP4:=Unique(List(Q4,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));
#nochmal mit Q4FILTK:
List(Q4FILTK,i->Size(i));
QQP4:=List(Q4FILTK,j->List(j,i->DrT(i)));;List(QQP4,i->Size(i));
QQP4:=List(Q4FILTK,j->SortedList(List(j,i->DrT(i))));;List(QQP4,i->Size(i));
QQP4:=List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i)))));;List(QQP4,i->Size(i));
QQP4:=Collected(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;List(QQP4,i->Size(i[1]));List(QQP4,i->i[2]);
QQP4:=Unique(List(Q4FILTK,j->Unique(SortedList(List(j,i->DrT(i))))));;Size(QQP4);List(QQP4,i->Size(i));


#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
########## ^^^ soweit aus D4_2E #######
#hier der neue Anlauf, was auch funktioniert 
### aus ENUM.txt:
MACH:=function(d)
  local i,j,K,L,n;
  n:=2^d;K:=[];L:=[];
  for i in [1..n-1] do
    if not(IsBound(K[i])) then
      if IsOddInt(i) then K[i]:=i+2; K[i+2]:=i; else K[i]:=i; fi;
      fi; 
    od;
  for i in [1..n-1] do
    j:=2*i;
    if j>=n then j:=j mod n +1; fi;
    L[i]:=j;
    od;
  return Group(PermList(K),PermList(L));
  end;
### in CYCLQ.txt hatt ich auch
G:=SmallGroup(2,1);#1          #M1, M2, M3, M4, M5
G:=ElementaryAbelianGroup(4);  # 3   6   9  12  15
G:=ElementaryAbelianGroup(8);  # 6  12  18  24  30
G:=ElementaryAbelianGroup(16); #10  20  30  40  50
G:=ElementaryAbelianGroup(32); #15  30  45  60  75
G:=ElementaryAbelianGroup(64); #21  42  63  84 105
G:=ElementaryAbelianGroup(128);#28
G:=ElementaryAbelianGroup(256);#36
mats:=List(Pcgs(G),x->IdentityMat(1,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(2,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(3,GF(2)));
mats:=List(Pcgs(G),x->IdentityMat(4,GF(2)));
M:=GModuleByMats(mats,GF(2));
T:=TwoCocycles(G,M);Size(T);
B:=TwoCoboundaries(G,M);
L:=Extensions(G,M);;Size(L);
L1:=Collected(List(L,i->IdSmallGroup(i)));
L2:=Collected(List(L,i->Size(FrattiniSubgroup(i))));

S:=SplitExtension(G,M);
IdSmallGroup(S);
IdSmallGroup(ModuleOfExtension(S));
T:=TwoCocycles(G,M);
B:=TwoCoboundaries(G,M);
CH:=TwoCohomology(G, M);
Size(PreImage(CH.cohom));
Collected(List(T,i->IdSmallGroup(Extension(G,M,i))));
Collected(List(PreImages(CH.cohom),i->IdSmallGroup(Extension(G,M,i))));
Collected(List(Extensions(G,M),i->IdSmallGroup(i)));

### unklar


#### hier der neueste Anlauf:
Q:=[];QQP:=[];QQL:=[];
d:=4;#d:=5;#d:=3;
P:=MACH(d);Size(P);
V:=FullRowSpace( GF(2),2^d-1 );
Q[d]:=OrbitsDomain(P,V,Permuted);;Size(Q[d]);SortedList(List(Q[d],i->Size(i)));
#QQP[d]:=Unique(List(Q[d],j->SortedList(Unique(List(j,i->DrT(i))))));;Size(QQP[d]);List(QQP[d],i->Size(i));
QQP[d]:=Set(List(Q[d],j->Set(List(j,i->DrT(i))))));;Size(QQP[d]);List(QQP[d],i->Size(i));
LogTo("GAP_LOGFILE4.txt");
for j in [1..Size(Q[d])] do
  Print("\n",j,List(Q[d][j][1],function(i) if i=n then return 0; else return 1; fi; end));
  od;
LogTo();
Q4FILTG:=Filtered(Q[d],FilterG);;Size(Q4FILTG);
List(Q4FILTG,i->Size(i));

VV:=Enumerator(V);
GZ:=Orbit(P,VV[999999],Permuted);;Size(GZ);#4999680
GZ:=Orbit(P,[n,z,n,n,z,z,n,n,n,z,z,n,z,z,n,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z],Permuted);;Size(GZ);#4999680 auch.
[n,z,n,n,z,z,n,n,n,z,z,n,z,n,z,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z] in GZ;
GZ2:=Orbit(P,[n,z,n,n,z,z,n,n,n,z,z,n,z,n,z,n,n,n,n,z,z,z,z,z,n,n,n,n,z,z,z],Permuted);;Size(GZ2);#4999680 auch.


ConvI:=function(LL)
  local L,LLL,LLLL,MM,i,NN;
  LLLL:=[];
  for L in LL do 
    LLL:=ShallowCopy(L);
    if L[7]=n then LLL[7]:=z; else LLL[7]:=n; fi;
    if L[11]=n then LLL[11]:=z; else LLL[11]:=n; fi;
    if L[13]=n then LLL[13]:=z; else LLL[13]:=n; fi;
    if L[14]=n then LLL[14]:=z; else LLL[14]:=n; fi;
#    if L[15]=n then LLL[15]:=z; else LLL[15]:=n; fi;
    MM:=0;NN:=DrT(LLL);
    for i in [1..Size(QQP[d])] do
      if NN in QQP[d][i] then MM:=i; fi;
      od;
    Add(LLLL,MM);
    od;
  return Set(LLLL);
  end;

QQCONV:=Set(Q4FILTG,i->ConvI(i));
List(QQCONV,i->Size(i));








List(Q[d],i->Size(i));
B50:=[z,z,z,z,z,z,n,z,z,z,n,z,n,n,n];
B47:=[z,z,z,z,z,z,n,z,z,z,n,n,z,z,z];
B48:=[z,z,z,z,z,z,n,z,n,n,n,n,n,n,z];
B49:=[z,z,z,z,n,n,n,z,n,n,n,z,n,n,n];
B45:=[z,z,n,z,n,n,z,z,n,n,z,n,z,z,n];
B46:=[z,z,n,z,n,n,z,n,n,n,n,n,n,n,n];
B:=B50;
B:=B47;
B:=B48;
B:=B49;
B:=B45;
B:=B46;
for i in [1..Size(Q[d])] do if B in Q[d][i] then Print(i," "); fi; od;
#DA:=[41,35,24,25,10,5];
List(DA,i->Size(Q[4][i]));
List(Q[d],i->FilterG(i));
List(Q[d],i->FilterK(i));
Size(DrT(Q[d][1]));
Position(QQP[d],SortedList(Unique(List(Q[d][41],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][35],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][24],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][25],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][10],i->DrT(i)))));#7
Position(QQP[d],SortedList(Unique(List(Q[d][05],i->DrT(i)))));#7
List(Q[d],i->Size(i));
List(Q[d],j->Position(QQP[d],SortedList(Unique(List(j,i->DrT(i))))));

#A1:=[z,z,n,z,n,n,-,n,n,n,-,n,-,-,-];
XA1:=[z,n,n,n,n,n,n,n,n,n,n,n,n,n,n];
XA2:=[n,z,n,n,n,n,n,n,n,n,n,n,n,n,n];
XA3:=[n,n,n,n,n,n,z,n,n,n,n,n,n,n,n];
XA4:=[z,z,z,z,z,z,n,n,n,n,n,n,n,n,n];
XA5:=[z,z,z,z,z,z,z,z,z,z,z,z,z,z,n];
B:=XA1;
B:=XA2;
B:=XA3;
B:=XA4;
B:=XA5;
SortedList(Unique(List(Q[d][9],i->DrT(i))));
DK:=[];for j in QQP[d][3] do
  Print("\n",j);
  for i in [1..Size(Q[d])] do if PrT(j) in Q[d][i] then Print(i," "); Add(DK,i);fi; od;
  od;Unique(SortedList(DK));
QQL[d]:=List(DA,i->Unique(SortedList(List(Q[d][i],j->Pr(j)))));List(QQL[d],i->Size(i));
Print(QQL[d][1]);
DK:=[];for j in QQL[d][1] do
  Print("\n",j);
  for i in [1..Size(Q[d])] do if PrT(j) in Q[d][i] then Print(i," "); Add(DK,i);fi; od;
  od;Unique(SortedList(DK));






#suche alternative
 Orbit(S,Z(2)^0*[1,0,0,0],OnLines);#da geht nur [1,0,0,0] nicht [1,0,0,0,1]
S:=GL(d,2);Size(S);#aber hab schonmal Size(S)=Size(P);
Orbit(S,Z(2)^0*[1,0,1,0,1,1,1,0,0,0,0,0,0,0,0],OnLines);
Orbit(S,List(V)[1],OnLines);

Q[d]:=Orbits(S,V,OnLines);;Size(Q[d]);SortedList(List(Q[d],i->Size(i)));


#
QSUM:=function(Q)
  local i,SUM;
  SUM:=0;
  for i in Q[1] do if i=z then SUM:=SUM+1; fi; od;
  return SUM;
  end;
List(Q[d],i->QSUM(i));
FQ:=Filtered(Q[d],i->QSUM(i)=8);;
UQ:=List(FQ,j->Unique(List(j,i->DrT(i))));;List(UQ,i->Size(i));
#[ 1, 105, 35, 420, 420, 15 ]



###### neu mit Action
DrT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;

n:=4;ORB1:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,c*d,a*c*d,b*c*d,a*b*c*d];
A:=AutomorphismGroup(G);
Size(A);
P:=Action(A,L);
Size(P);
V:=GF(2)^(2^n-1);
ORB1[n]:=OrbitsDomain(P,V,Permuted);;#schneller als Orbits
Size(ORB1[n]);
QQP:=Set(List(ORB1[n],j->Set(List(j,i->DrT(i)))));;
Size(QQP);List(QQP,i->Size(i));


#Variante mit Einselement,geht auch
DrFilt16:=function(L)
  return 
    L[8]=L[2]+L[3]+L[4]+L[5]+L[6]+L[7] and
    L[12]=L[2]+L[3]+L[4]+L[9]+L[10]+L[11] and
    L[14]=L[2]+L[5]+L[6]+L[9]+L[10]+L[13] and
    L[15]=L[3]+L[5]+L[7]+L[9]+L[11]+L[13] and
    L[16]=L[4]+L[6]+L[7]+L[10]+L[11]+L[13];
  end;
DrT16:=function(L)
  return [
    L[2]+L[8]+L[12]+L[14],
    L[3]+L[8]+L[12]+L[15],
    L[4]+L[8]+L[12]+L[16],
    L[5]+L[8]+L[14]+L[15],
    L[6]+L[8]+L[14]+L[16],
    L[7]+L[8]+L[15]+L[16],
    L[9]+L[12]+L[14]+L[15],
    L[10]+L[12]+L[14]+L[16],
    L[11]+L[12]+L[15]+L[16],
    L[13]+L[14]+L[15]+L[16]];
  end;
n:=4;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a^0,a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,c*d,a*c*d,b*c*d,a*b*c*d];
A:=AutomorphismGroup(G);
P:=Action(A,G);
Size(P);
V:=GF(2)^(2^n);
ORB[n]:=OrbitsDomain(P,V,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n]{[1..46]},j->Set(List(j,i->DrT16(i)))));;
Size(QQP);List(QQP,i->Size(i));
FQ:=Filtered(ORB[n]{[1..46]},i->DrFilt16(i[1]));;
Size(FQ);List(FQ,i->Size(i));


DrTT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;
Q:=Action(A,G);
Size(Q);
V:=GF(2)^(2^n-1);
W:=GF(2)^(2^n);
ORB[n]:=OrbitsDomain(Q,W,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n],j->Set(List(j,i->DrT(i)))));;
Size(QQP);List(QQP,i->Size(i));

M:=Arrangements([0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],15);;
ORB[n]:=OrbitsDomain(P,M,Permuted);;
Size(ORB[n]);

n:=5;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
A:=AutomorphismGroup(G);
P:=Action(A,G);
Size(P);
M:=Arrangements([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],31);;#dauertS
Size(M);
ORB[n]:=OrbitsDomain(P,M,Permuted);;
Size(ORB[n]);


Float(10^308/11^297);
Float(10^309/11^296);
Float(10^309/11^297);

Float(10^308);
Float(10^309);

Float(11^296);
Float(11^297);


###################So, hier versuch ich als nächstes mal das DrTDr hinzubekommen.
NZUI:=function(n,S) return CoefficientsQadic(2^20+n,2){[1..S]}; end;
NZUI(13,7);
 Sum(NZUI(13,7));

DrTDr:=function(d)
  local i,INT,n,m,M,makt,j,k,SUM,MM;
  n:=2^d;
  m:=d*(d+1)/2;
  makt:=1;
  M:=NullMat(n-1,m);
  for i in [1..n-1] do
    INT:=NZUI(i,d);
#    Print("\n",INT);
    SUM:=Sum(INT);
    if SUM<3 then
      M[i][makt]:=1;
      makt:=makt+1;
      else
        for j in [1..d] do if INT[j]=1 then
          for k in [j..d] do if INT[k]=1 then
            if IsOddInt(SUM) and j=k then
              M[i][(k-1)*k/2+1]:=Z(2);
              fi;
            if j<k then
              M[i][(k-1)*k/2+j+1]:=Z(2);
#            Print("*",j,"-",k);
              fi;
            fi; od;
          fi; od;
        fi;
#    Print(M[i]);
    od;
  return M;
  end;
M:=DrTDr(3);
M:=DrTDr(4);
M:=DrTDr(5);
M:=DrTDr(6);
M:=DrTDr(7);
WirdDasNull:=function(M)
  local i,j,flag;
  MM:=TransposedMat(M)*M;
  flag:=true;
  for i in MM do for j in i do
    if j<>0*Z(2) then flag:=false; fi;
    od; od;
  return flag;
  end;
WirdDasNull(DrTDr(3));
WirdDasNull(DrTDr(4));
WirdDasNull(DrTDr(5));
WirdDasNull(DrTDr(6));
WirdDasNull(DrTDr(7));
WirdDasNull(DrTDr(8));
WirdDasNull(DrTDr(9));
for i in [1..100] do Print(i,WirdDasNull(DrTDr(i)),"\c"); od;

####+++###+++###+++### jetzt die generierte Matrix Dr
z0:=0*Z(2); z1:=Z(2)^0;
NZUID:=function(n,S) return CoefficientsQadic(2^20+n,2){[1..S]}; end;
DrVektor:=[];k:=1;
for i in [1..100] do
  DrVektor[k]:=[0,i]; k:=k+1;
  for j in [1..i-1] do
    DrVektor[k]:=[j,i]; k:=k+1;
    od; od;
DrVektor;

DM:=function(i,j)
  local W1,W2,S;
  W1:=NZUID(i,20);
  S:=Sum(W1);
  if IsOddInt(S) then
    if DrVektor[j][1]=0 then 
      if W1[DrVektor[j][2]]=1 then return z1; else return z0; fi;
      else 
        if W1[DrVektor[j][2]]=1 and W1[DrVektor[j][1]]=1 then return z1; else return z0; fi;
        fi;
    else
      if DrVektor[j][1]=0 then 
        return z0;
        else 
          if W1[DrVektor[j][2]]=1 and W1[DrVektor[j][1]]=1 then return z1; else return z0; fi;
          fi;
        fi;
  end;

for i in [1..1023] do
  Print("\n",i," ");
  for j in [1..99] do
    if DM(i,j)=z0 then Print("0"); else Print("1"); fi;
    od;
  od;

DrTDrTEST:=function(d)
  local n,m,i,j,k,RET,SUM;
  n:=2^d;
  m:=d*(d+1)/2;
  RET:=false;
  for i in [1..m] do for j in [i..m ] do
    SUM:=z0;
    for k in [1..n-1] do
      SUM:=SUM+DM(k,i)*DM(k,j);
      od;
    if SUM=z1 then Print("1");RET:=true; fi;
    od; od;
  return RET;
  end;
DrTDrTEST(2);
DrTDrTEST(3);
DrTDrTEST(4);
DrTDrTEST(5);
DrTDrTEST(6);
DrTDrTEST(7);
DrTDrTEST(8);
DrTDrTEST(9);
DrTDrTEST(10);
DrTDrTEST(11);
DrTDrTEST(12);
DrTDrTEST(13);
DrTDrTEST(14);
DrTDrTEST(15);
DrTDrTEST(16);

DMmalVek:=function(vek)
  local d,i,j,m,n,RET;
  m:=Size(vek);
  d:=DrVektor[m][2];
  n:=2^d;
  RET:=[];
  for i in [1..n-1] do
    RET[i]:=z0;
    for j in [1..m] do
      RET[i]:=RET[i]+DM(i,j)*vek[j];
      od;
    od;
#  Error("Horror");
  return RET;
  end;

Scount:=function(vek)
  local i,SUM;
  SUM:=0;
  for i in [1..Size(vek)] do 
    if vek[i]=z1 then SUM:=SUM+1; fi;
    od;
  return SUM;
  end;



DM261:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z0,z0,z0,z0,z0]);Scount(last);
DM260:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z1,z0,z0,z0,z0]);Scount(last);
DM264:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z0,z0,z0,z1,z0,z0,z0,z1]);Scount(last);
DM263:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z0,z0,z0,z0]);Scount(last);
DM262:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0]);Scount(last);
DM265:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0]);Scount(last);
DM266:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1]);Scount(last);

n:=5;ORB51:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;f:=G.5;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,
    c*d,a*c*d,b*c*d,a*b*c*d,
    f,a*f,b*f,a*b*f,c*f,a*c*f,b*c*f,a*b*c*f,d*f,a*d*f,b*d*f,a*b*d*f,
    c*d*f,a*c*d*f,b*c*d*f,a*b*c*d*f];
A:=AutomorphismGroup(G);
P:=Action(A,L);
Size(P);
ORB261:=Orbit(P,DM261,Permuted);;Size(last);
ORB260:=Orbit(P,DM260,Permuted);;Size(last);
ORB264:=Orbit(P,DM264,Permuted);;Size(last);
ORB263:=Orbit(P,DM263,Permuted);;Size(last);
ORB262:=Orbit(P,DM262,Permuted);;Size(last);
ORB265:=Orbit(P,DM265,Permuted);;Size(last);
ORB266:=Orbit(P,DM266,Permuted);;Size(last);


DM2320:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z1,z0,z0,z0,z0,z0,z0,z0,z0,z0,z0]);Scount(last);
DM2319:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z1,z0,z0,z0,z0,z1,z0,z0,z0,z0,z0]);Scount(last);
DM2323:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z0,z0,z0,z0,z1,z0,z0,z0,z0,z1]);Scount(last);
DM2322:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0,z1,z0,z0,z0,z0,z0]);Scount(last);
DM2321:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0,z1,z1,z1,z0,z0,z0]);Scount(last);
DM2324:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z1,z0,z0]);Scount(last);
DM2327:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z0]);Scount(last);
DM2325:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0]);Scount(last);
DM2326:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1]);Scount(last);

n:=6;
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;f:=G.5;g:=G.6;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,
    c*d,a*c*d,b*c*d,a*b*c*d,
    f,a*f,b*f,a*b*f,c*f,a*c*f,b*c*f,a*b*c*f,d*f,a*d*f,b*d*f,a*b*d*f,
    c*d*f,a*c*d*f,b*c*d*f,a*b*c*d*f,
    g,a*g,b*g,a*b*g,c*g,a*c*g,b*c*g,a*b*c*g,d*g,a*d*g,b*d*g,a*b*d*g,
    c*d*g,a*c*d*g,b*c*d*g,a*b*c*d*g,
    f*g,a*f*g,b*f*g,a*b*f*g,c*f*g,a*c*f*g,b*c*f*g,a*b*c*f*g,d*f*g,a*d*f*g,b*d*f*g,a*b*d*f*g,
    c*d*f*g,a*c*d*f*g,b*c*d*f*g,a*b*c*d*f*g];
A:=AutomorphismGroup(G);
P:=Action(A,L);
Size(P);
ORB2320:=Orbit(P,DM2320,Permuted);;Size(last);
ORB2319:=Orbit(P,DM2319,Permuted);;Size(last);
ORB2323:=Orbit(P,DM2323,Permuted);;Size(last);
ORB2322:=Orbit(P,DM2322,Permuted);;Size(last);
ORB2321:=Orbit(P,DM2321,Permuted);;Size(last);
ORB2324:=Orbit(P,DM2324,Permuted);;Size(last);
ORB2327:=Orbit(P,DM2327,Permuted);;Size(last);
ORB2325:=Orbit(P,DM2325,Permuted);;Size(last);
ORB2326:=Orbit(P,DM2326,Permuted);;Size(last);


DM56083:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z1,z0,z0,z0,z0,z1,z0,z0,z0,z0,z0,z0,z0,z0,z0,z0,z0,z0]);Scount(last);
DM56082:=DMmalVek([z1,z1,z0,z1,z0,z0,z1,z0,z0,z0,z1,z0,z0,z0,z0,z1,z0,z0,z0,z0,z0,z1,z0,z0,z0,z0,z0,z0]);Scount(last);
DM56086:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0,z1,z0,z0,z0,z0,z0,z1,z0,z0,z0,z0,z0,z1]);Scount(last);
DM56085:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0,z1,z1,z1,z0,z0,z0,z1,z0,z0,z0,z0,z0,z0]);Scount(last);
DM56084:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z0,z0,z1,z1,z1,z0,z0,z0,z1,z1,z1,z0,z0,z0,z0]);Scount(last);
DM56087:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z1,z0,z0,z1,z1,z1,z1,z0,z0,z0]);Scount(last);
DM56090:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z0,z1,z1,z1,z1,z0,z0,z0]);Scount(last);
DM56088:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z1,z1,z1,z1,z1,z0,z0]);Scount(last);
DM56090:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z0,z0]);Scount(last);
DM56089:=DMmalVek([z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1,z1]);Scount(last);

n:=7;
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;f:=G.5;g:=G.6;h:=G.7;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,
    c*d,a*c*d,b*c*d,a*b*c*d,
    f,a*f,b*f,a*b*f,c*f,a*c*f,b*c*f,a*b*c*f,d*f,a*d*f,b*d*f,a*b*d*f,
    c*d*f,a*c*d*f,b*c*d*f,a*b*c*d*f,
    g,a*g,b*g,a*b*g,c*g,a*c*g,b*c*g,a*b*c*g,d*g,a*d*g,b*d*g,a*b*d*g,
    c*d*g,a*c*d*g,b*c*d*g,a*b*c*d*g,
    f*g,a*f*g,b*f*g,a*b*f*g,c*f*g,a*c*f*g,b*c*f*g,a*b*c*f*g,d*f*g,a*d*f*g,b*d*f*g,a*b*d*f*g,
    c*d*f*g,a*c*d*f*g,b*c*d*f*g,a*b*c*d*f*g,
    h,a*h,b*h,a*b*h,c*h,a*c*h,b*c*h,a*b*c*h,d*h,a*d*h,b*d*h,a*b*d*h,
    c*d*h,a*c*d*h,b*c*d*h,a*b*c*d*h,
    f*h,a*f*h,b*f*h,a*b*f*h,c*f*h,a*c*f*h,b*c*f*h,a*b*c*f*h,d*f*h,a*d*f*h,b*d*f*h,a*b*d*f*h,
    c*d*f*h,a*c*d*f*h,b*c*d*f*h,a*b*c*d*f*h,
    g*h,a*g*h,b*g*h,a*b*g*h,c*g*h,a*c*g*h,b*c*g*h,a*b*c*g*h,d*g*h,a*d*g*h,b*d*g*h,a*b*d*g*h,
    c*d*g*h,a*c*d*g*h,b*c*d*g*h,a*b*c*d*g*h,
    f*g*h,a*f*g*h,b*f*g*h,a*b*f*g*h,c*f*g*h,a*c*f*g*h,b*c*f*g*h,a*b*c*f*g*h,d*f*g*h,a*d*f*g*h,b*d*f*g*h,a*b*d*f*g*h,
    c*d*f*g*h,a*c*d*f*g*h,b*c*d*f*g*h,a*b*c*d*f*g*h];
A:=AutomorphismGroup(G);Size(A);
P:=Action(A,L);Size(P);
ORB56083:=Orbit(P,DM56083,Permuted);;Size(last);
ORB56082:=Orbit(P,DM56082,Permuted);;Size(last);
ORB56086:=Orbit(P,DM56086,Permuted);;Size(last);
ORB2322:=Orbit(P,DM2322,Permuted);;Size(last);
ORB2321:=Orbit(P,DM2321,Permuted);;Size(last);
ORB2324:=Orbit(P,DM2324,Permuted);;Size(last);
ORB2327:=Orbit(P,DM2327,Permuted);;Size(last);
ORB2325:=Orbit(P,DM2325,Permuted);;Size(last);
ORB2326:=Orbit(P,DM2326,Permuted);;Size(last);

#######------------+#################
z0:=0*Z(2); z1:=Z(2)^0;
DrT:=function(L)
  return [
    L[1]+L[7]+L[11]+L[13],
    L[2]+L[7]+L[11]+L[14],
    L[3]+L[7]+L[11]+L[15],
    L[4]+L[7]+L[13]+L[14],
    L[5]+L[7]+L[13]+L[15],
    L[6]+L[7]+L[14]+L[15],
    L[8]+L[11]+L[13]+L[14],
    L[9]+L[11]+L[13]+L[15],
    L[10]+L[11]+L[14]+L[15],
    L[12]+L[13]+L[14]+L[15]];
  end;
DrFilt:=function(L)
  return 
    L[7]=L[1]+L[2]+L[3]+L[4]+L[5]+L[6] and
    L[11]=L[1]+L[2]+L[3]+L[8]+L[9]+L[10] and
    L[13]=L[1]+L[4]+L[5]+L[8]+L[9]+L[12] and
    L[14]=L[2]+L[4]+L[6]+L[8]+L[10]+L[12] and
    L[15]=L[3]+L[5]+L[6]+L[9]+L[10]+L[12];
  end;

n:=4;ORB:=[];
G:=ElementaryAbelianGroup(2^n);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,c*d,a*c*d,b*c*d,a*b*c*d];
A:=AutomorphismGroup(G);
Size(A);
P:=Action(A,L);
Size(P);
V:=GF(2)^(2^n-1);
ORB[n]:=OrbitsDomain(P,V,Permuted);;#schneller als Orbits
Size(ORB[n]);
QQP:=Set(List(ORB[n],j->Set(List(j,i->DrT(i)))));;List(QQP,i->Size(i));
FQ:=Filtered(ORB[n],i->DrFilt(i[1]));;List(FQ,i->Size(i));




---------------------------------------------------------
also für No.27 da mach ich
--------------------------
dd:=4;#fuer Tabellenzeile TABLE1 d=4
G:=ElementaryAbelianGroup(2^dd);
a:=G.1;b:=G.2;c:=G.3;d:=G.4;
L:=[a,b,a*b,c,a*c,b*c,a*b*c,d,a*d,b*d,a*b*d,c*d,a*c*d,b*c*d,a*b*c*d];
A:=Action(AutomorphismGroup(G),L);
V:=GF(2)^(2^dd-1);#V enthält D als Teilraum
BAHNEN:=OrbitsDomain(A,V,Permuted);;Size(BAHNEN);#komplett alle Bahnen von A


#die Erweiterungsmatrix Erw
Erw:=Z(2)*[
  [1,0,0,0,0,0,0,0,0,0], #a^2
  [0,1,0,0,0,0,0,0,0,0], #b^2
  [0,0,1,0,0,0,0,0,0,0], #(ab)^2
  [0,0,0,1,0,0,0,0,0,0], #c^2
  [0,0,0,0,1,0,0,0,0,0], #(ac)^2
  [0,0,0,0,0,1,0,0,0,0], #(bc)^2
  [1,1,1,1,1,1,0,0,0,0], #(abc)^2=a^2*b^2*c^2*(ab)^2*(ac)^2*(bc)^2
  [0,0,0,0,0,0,1,0,0,0], #d^2
  [0,0,0,0,0,0,0,1,0,0], #(ad)^2
  [0,0,0,0,0,0,0,0,1,0], #(bd)^2
  [1,1,1,0,0,0,1,1,1,0], #(abd)^2=a^2*b^2*d^2*(ab)^2*(ad)^2*(bd)^2
  [0,0,0,0,0,0,0,0,0,1], #(cd)^2
  [1,0,0,1,1,0,1,1,0,1], #(acd)^2=a^2*c^2*d^2*(ac)^2*(ad)^2*(cd)^2
  [0,1,0,1,0,1,1,0,1,1], #(bcd)^2=b^2*c^2*d^2*(bc)^2*(bd)^2*(cd)^2
  [0,0,1,0,1,1,0,1,1,1] #(abcd)^2=(ab)^2*(ac)^2*(ad)^2*(bc)^2*(bd)^2*(cd)^2
  ];;
Erw_T:=TransposedMat(Erw);;


#jetzŧ mit Erw die Bahnen von A auf D herausfiltern:
BAHNEN_von_A_auf_D:=Filtered(BAHNEN,i->i[1]=Erw*i[1]{[1,2,3,4,5,6,8,9,10,12]});;
List(BAHNEN_von_A_auf_D,i->Size(i));#Ergebnis: Bahnlaengen der Gruppen G


#und durch Anwendung von Erw_T die Bahnen von A^T auf D bilden:
BAHNEN_von_AT_auf_D:=Set(List(BAHNEN,j->Set(List(j,i->Erw_T*i))));;
List(BAHNEN_von_AT_auf_D,i->Size(i));#Ergebnis: Bahnlaengen der Gruppen K




----------------------------------------------------

########Thema Boolsche Funktion
z0:=0*Z(2); z1:=Z(2)^0;
#z0:=0;z1:=1;
FORTSETZ:=function(h,d);
  if h=1 then return List([1..d],i->z0); fi;
  if h=2 then if d>1 then return List([1..d],i->z0); else return [z1]; fi; fi;
  if h=3 then return Concatenation([z1],List([1..d-1],i->z0)); fi;
  if h=4 then if d=3 then return([z1,z0,z0]); else return Concatenation([z1],List([1..d-2],i->z0),[z1]); fi; fi;
  if h=5 then if d=3 then return([z1,z1,z1]); else return Concatenation([z1],List([1..d-1],i->z0)); fi; fi;
  if h=6 then return Concatenation([z1,z1,z1],List([1..d-3],i->z0)); fi;
  if h>6 then return Concatenation([z1,z1,z1,z1],FORTSETZ(h-6,d-4)); fi;
  end;
for i in [1..2] do Print("\n",FORTSETZ(i,1)); od;
for i in [1..4] do Print("\n",FORTSETZ(i,2)); od;
for i in [1..5] do Print("\n",FORTSETZ(i,3)); od;
for i in [1..7] do Print("\n",FORTSETZ(i,4)); od;
for i in [1..8] do Print("\n",FORTSETZ(i,5)); od;
for i in [1..10] do Print("\n",FORTSETZ(i,6)); od;
for i in [1..11] do Print("\n",FORTSETZ(i,7)); od;

VORGAENGER:=[
 [1,1],
 [1,2,2,2],
 [1,3,3,4,4],
 [1,3,3,4,5,5,5],
 [1,3,3,5,6,6,7,7],
 [1,3,3,5,6,6,7,8,8,8],
 [1,3,3,5,6,6,7,9,9,10,10],
 [1,3,3,5,6,6,7,9,9,10,11,11,11],
 [1,3,3,5,6,6,7,9,9,10,12,12,13,13],
 [1,3,3,5,6,6,7,9,9,10,12,12,13,14,14,14],
 [1,3,3,5,6,6,7,9,9,10,12,12,13,15,15,16,16],
 ];
RMACHER:=function(h,d)
  local R;
  R:=[];
  if d=1 then R:=[]; else R:=RMACHER(VORGAENGER[d][h],d-1); fi;
  Add(R,FORTSETZ(h,d));
  return R;
  end;
TEST1:=RMACHER;
for i in [1..2] do Print("\n",TEST1(i,1)); od;
for i in [1..4] do Print("\n",TEST1(i,2)); od;
for i in [1..5] do Print("\n",TEST1(i,3)); od;
for i in [1..7] do Print("\n",TEST1(i,4)); od;
for i in [1..8] do Print("\n",TEST1(i,5)); od;
for i in [1..10] do Print("\n",TEST1(i,6)); od;
for i in [1..11] do Print("\n",TEST1(i,7)); od;
for i in [1..13] do Print("\n",TEST1(i,8)); od;
for i in [1..14] do Print("\n",TEST1(i,9)); od;
for i in [1..16] do Print("\n",TEST1(i,10)); od;

#hierrein von oben DMmalVek und dazu DM und DrVektor, dann müsste schon gehen
R:=RMACHER(3,3);
D:=DMmalVek(Flat(RMACHER(8,5)));


KZAHL:=function(VEKT)
  local SUM,i;
  SUM:=0;
  for i in VEKT do if i=z1 then SUM:=SUM+1; fi; od;
  return SUM;
  end;
KZAHL([z0,z1,z1,z0,z1,z0]);

LMACH:=function(G)
  local GENS,BITS,i,j,n,S,RET,RT;
  n:=Size(G);
  GENS:=GeneratorsOfGroup(G);
  S:=Size(GENS);
  RET:=[];
  for i in [1..n-1] do
    BITS:=NZUID(i,S);
    Print("\n",BITS);
    RT:=Identity(G);
    for j in [1..S] do
      if BITS[j]=1 then RT:=RT*GENS[j]; fi;
      od;
    RET[i]:=RT;
    od;
  return RET;
  end;

TEST1:=function(n,k) return KZAHL(DMmalVek(Flat(RMACHER(n,k)))); end; 

TEST2:=function(h,d)
  local R,ORB,A,V,n;
  n:=d;
  R:=DMmalVek(Flat(RMACHER(h,d)));
  G:=ElementaryAbelianGroup(2^n);
  L:=LMACH(G);
  A:=Action(AutomorphismGroup(G),L);
  ORB:=Orbit(A,R,Permuted);;
  return Size(ORB);
  end;
TEST1:=TEST2;




############### ab hier A*A^T
G1:=(1,2);
G2:=(1,2);
A:=Group(G1,G2);
V:=GF(2)^3;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
for s in [0..2] do ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2]})=s);;Print(Size(ORBAB)," "); od;

#d=3:
G1:=(1,2)(5,6);
G2:=(1,2,4)(3,6,5);
A:=Group(G1,G2);
V:=GF(2)^6;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
for s in [0..3] do ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4]})=s);;Print(Size(ORBAB)," "); od;

#d=4:
G1:=(1,2)(5,6)(8,9);
G2:=(1,2,4,7)(3,6,10,8)(5,9);
A:=Group(G1,G2);
V:=GF(2)^10;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
for s in [0..4] do ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4,7]})=s);;Print(Size(ORBAB)," "); od;
ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4,7]})=1);Print(ORBAB);
List(ORBAB,i->Size(i));
ORBABB:=List(ORBAB,i->Filtered(i,j->j[1]=z1));OPRINT4B(ORBABB);
ORBAC:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4,7]})=2);Print(ORBAC);
List(ORBAC,i->Size(i));
ORBACC:=List(ORBAC,i->Filtered(i,j->j[1]=z1 and j[2]=z1));OPRINT4C(ORBACC);

OPRINT4B:=function(W)
  local i;
  if IsList(W) then 
    Print(" [ ");
    if Size(W)=10 then 
      OPRINT4B(W[3]);OPRINT4B(W[5]);OPRINT4B(W[8]);Print("-");
      OPRINT4B(W[6]);OPRINT4B(W[9]);OPRINT4B(W[10]);
      else for i in W do OPRINT4B(i); od; fi; 
    Print(" ] ");  
    else if W=z1 then Print("1"); else Print("0"); fi; fi;
  end;
OPRINT4C:=function(W)
  local i;
  if IsList(W) then 
    Print(" [ ");
    if Size(W)=10 then 
      OPRINT4C(W[3]);Print("-");OPRINT4C(W[5]);OPRINT4C(W[8]);OPRINT4C(W[6]);OPRINT4C(W[9]);
      Print("-");OPRINT4C(W[10]);
      else for i in W do OPRINT4C(i); od; fi; 
    Print(" ] ");  
    else if W=z1 then Print("1"); else Print("0"); fi; fi;
  end;
 
#d=5:
G1:=(1,2)(5,6)(8,9)(12,13);
G2:=(1,2,4,7,11)(3,6,10,15,12)(5,9,14,8,13);
A:=Group(G1,G2);
V:=GF(2)^15;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
for s in [0..5] do ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4,7,11]})=s);;Print(Size(ORBAB)," "); od;

#d=6:
G1:=(1,2)(5,6)(8,9)(12,13)(17,18);
G2:=(1,2,4,7,11,16)(3,6,10,15,21,17)(5,9,14,20,12,18)(8,13,19);
A:=Group(G1,G2);
V:=GF(2)^21;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
for s in [0..6] do ORBAB:=Filtered(ORB,i->KZAHL(i[1]{[1,2,4,7,11,16]})=s);;Print(Size(ORBAB)," "); od;
  

#d=7:
G1:=(1,2)(5,6)(8,9)(12,13)(17,18)(23,24);
G2:=(1,2,4,7,11,16,22)(3,6,10,15,21,28,23)(5,9,14,20,27,17,24);
A:=Group(G1,G2);
V:=GF(2)^28;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
ORBAB:=Filtered(ORB,i->i[1][1]=z0 and i[1][2]=z0 and i[1][4]=z0 and i[1][7]=z0 and i[1][11]=z0 and i[1][16]=z0 and i[1][22]=z0);Size(ORBAB);

###dazu a->ab ac->abc hinzu
#d=3:
GZ:=Z(2)*[
  [0,0,1,0,0,0],
  [0,1,0,0,0,0],
  [1,0,0,0,0,0],
  [0,0,0,1,0,0],
  [1,1,1,1,1,1],
  [0,0,0,0,0,1]
  ];
#d=4:
GZ:=Z(2)*[
  [0,0,1,0,0,0,0,0,0,0],
  [0,1,0,0,0,0,0,0,0,0],
  [1,0,0,0,0,0,0,0,0,0],
  [0,0,0,1,0,0,0,0,0,0],
  [1,1,1,1,1,1,0,0,0,0],
  [0,0,0,0,0,1,0,0,0,0],
  [0,0,0,0,0,0,1,0,0,0],
  [1,1,1,0,0,0,1,1,1,0],
  [0,0,0,0,0,0,0,0,1,0],
  [0,0,0,0,0,0,0,0,0,1]
  ];
#d=5:
G1:=(1,2)(5,6)(8,9)(12,13);
G2:=(1,2,4,7,11)(3,6,10,15,12)(5,9,14,8,13);
A:=Group(G1,G2);
V:=GF(2)^15;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
G1:=Z(2)*[
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],#a
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#b
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],#ab
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],#c
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],#ac
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],#bc
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],#d
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],#ad
  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],#bd
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],#cd
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],#f
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],#af
  [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],#bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],#cf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]#df
  ];
G2:=Z(2)*[
#  a b   c     d       f
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],#a
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],#b
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],#ab
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],#c
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],#ac
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],#bc
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],#d
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],#ad-bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],#bd
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#cd
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#f
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],#af
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],#bf
  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],#cf
  [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0]#df
  ];
AX:=Group(G1,G2);Size(A);
VX:=GF(2)^15;
ORBX:=OrbitsDomain(AX,VX);;
ORBX:=List(ORBX,i->AsSet(i));;
Size(VX);Size(ORBX);
GZ:=Z(2)*[
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
  [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
  [1,1,1,0,0,0,1,1,1,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [1,1,1,0,0,0,0,0,0,0,1,1,1,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
  ];
AG:=Group(G1,G2,GZ);Size(AG);
VG:=GF(2)^15;
ORBG:=OrbitsDomain(AG,VG);;
ORBG:=List(ORBG,i->AsSet(i));;
Size(VG);Size(ORBG);
AK:=Group(G1,G2,TransposedMat(GZ));Size(AK);
VK:=GF(2)^15;
ORBK:=OrbitsDomain(AK,VK);;
ORBK:=List(ORBK,i->AsSet(i));;
Size(VK);Size(ORBK);
IsSubset(ORBG[4],ORBX[82]);
ZUSAMMENSETZUNG:=function(ORBGK)
  local ANZ;
  for ii in [1..Size(ORBGK)] do
    ANZ:=0;
    Print("\n\nii=",ii,":\n");
    for i in [1..Size(ORBX)] do if IsSubset(ORBGK[ii],ORBX[i]) then Print(" ",i); ANZ:=ANZ+1; fi; od;
    Print("\nANZ=",ANZ);
    od;
  end;
ZUSAMMENSETZUNG(ORBG);
ii=1:
 1
ANZ=1

ii=2:
 2 6 81 250 544
 10 79 311 500 511
ANZ=5

ii=3:
 3 7 12 18 28 45 55 64 73 80 85 89 243 253 283 316 356 387 429 505 510 515 543
ANZ=23

ii=4:
 4 8 13 14 15 19 20 21 31 32 33 37 38 53 54 57 58 67 68 77 78 82 84 86 88 93 95 114 115
121 128 129 140 141 154 155 162 163 168 169 174 175 177 179 184 186 241 242 246 252 256
257 258 269 270 272 277 278 281 282 284 289 314 317 327 328 335 336 349 359 362 377 381
385 388 389 399 402 415 420 423 428 432 435 442 462 480 487 494 499 501 506 509 514 516
522 530 532 536 541 542
ANZ=101

ii=5:
 5 9 16 17 22 23 24 29 30 34 35 36 39 43 44 47 51 52 59 60 65 66 71 72 75 76 83 87 90 92
96 98 102 103 104 108 110 116 119 120 126 127 130 131 132 134 135 143 144 145 148 149 160
161 164 165 167 170 172 173 176 178 181 183 185 187 189 190 193 194 201 203 204 205 206
211 212 214 215 216 220 221 222 227 228 229 235 236 239 240 244 245 249 251 255 259 260
264 265 266 271 275 276 279 280 285 286 288 290 292 293 295 296 305 306 309 310 313 318
321 325 326 330 331 332 337 338 339 341 342 346 347 348 352 355 358 361 363 364 369 373
375 376 378 379 382 383 384 386 390 392 395 400 403 406 409 413 416 419 421 422 427 431
434 438 439 440 441 444 447 448 452 453 454 455 459 460 463 467 470 471 472 474 475 479
481 483 488 492 495 498 502 503 507 513 519 520 521 528 529 533 535 539 540
ANZ=204

ii=6:
 10 25 26 40 41 42 48 49 50 61 62 69 70 91 97 99 100 105 106 107 109 111 112 113 117 118
122 123 124 125 136 137 138 139 146 147 150 151 152 153 156 157 158 159 180 182 188 191
192 195 196 197 198 199 200 207 208 209 210 217 218 223 224 225 226 231 232 233 234 237
238 247 248 254 261 262 263 267 268 273 274 287 291 294 297 298 299 300 301 302 303 304
307 308 311 312 319 320 323 324 333 334 343 344 350 351 353 354 357 360 365 366 367 368
370 371 372 374 380 391 393 394 396 397 398 401 404 405 407 408 410 411 412 414 417 418
425 426 433 436 437 443 445 446 449 450 457 458 464 465 468 469 476 477 482 484 485 486
489 490 491 493 496 497 511 512 517 518 523 524 525 526 527 531 534 537 538
ANZ=177

ii=7:
 11 27 46 56 63 74 79 424 500 508
ANZ=10

ii=8:
 94 101 133 142 166 171 202 213 219 230 315 322 329 340 345 430 451 456 461 466 473 478 504
ANZ=23

ZUSAMMENSETZUNG(ORBK);
ii=1:
 1
ANZ=1

ii=2:
 2 3 4 5 6 7 8 9 24 27 39 45 47 55 63 73 162 177 193 241 283 347 421
ANZ=23

ii=3:
 10 79 311 500 511
ANZ=5

ii=4:
 11 25 26 28 40 43 44 46 48 53 54 56 61 62 64 71 72 74 77 78 91 93 165 166 168 171 172 174
176 179 182 185 190 192 196 202 203 205 212 213 235 237 239 243 247 249 254 256 277 279
281 285 289 291 296 298 305 307 309 312 329 332 337 345 352 353 375 378 379 383 389 394
395 408 411 417 424 425 428 439 441 446 447 451 459 466 470 478 480 483 490 496 501 502
504 512 513 514 516 523 524
ANZ=101

ii=5:
 12 13 14 15 16 17 18 19 20 21 22 23 29 30 31 32 33 34 35 36 37 38 41 42 49 50 51 52 57 58
59 60 65 66 67 68 69 70 75 76 90 94 96 98 102 104 106 107 109 114 116 118 121 122 123 128
130 133 134 135 140 143 144 146 147 154 156 157 163 164 167 178 180 181 184 194 195 197
198 199 200 201 204 215 217 219 222 227 229 242 244 245 246 248 257 259 262 263 269 272
284 286 287 288 290 321 322 323 328 348 349 350 351 354 355 357 362 363 368 373 387 422
423 426 427 430 435 436 453 455 505 520 532
ANZ=133

ii=6:
 80 313 314 503 508 509 515 529 530 542
ANZ=10

ii=7:
 81 92 169 170 173 175 183 186 191 206 211 214 236 238 240 250 255 278 280 282 292 297 306
308 310 315 318 319 334 335 339 340 341 342 344 376 377 380 384 391 392 397 398 399 400
403 404 406 407 410 414 415 416 419 420 440 442 445 448 452 460 461 463 464 469 472 473
474 475 477 482 485 486 488 489 493 494 495 498 499 506 507 510 521 522 527 528 534 537
538 539 540 541 543
ANZ=94

ii=8:
 82 83 84 85 86 87 88 89 95 97 99 100 101 103 105 108 110 111 112 113 115 117 119 120 124
125 126 127 129 131 132 136 137 138 139 141 142 145 148 149 150 151 152 153 155 158 159
160 161 187 188 189 207 208 209 210 216 218 220 221 223 224 225 226 228 230 231 232 233
234 251 252 253 258 260 261 264 265 266 267 268 270 271 273 274 275 276 293 294 295 299
300 301 302 303 304 316 317 320 324 325 326 327 330 331 333 336 338 343 346 356 358 359
360 361 364 365 366 367 369 370 371 372 374 381 382 385 386 388 390 393 396 401 402 405
409 412 413 418 429 431 432 433 434 437 438 443 444 449 450 454 456 457 458 462 465 467
468 471 476 479 481 484 487 491 492 497 517 518 519 525 526 531 533 535 536 544
ANZ=177

1  5 23 101 204 177 10  23#G
1 23  5 101 133  10 94 177#K
1 23  5 101 204  10 23 177#G umgeordnet










 4 8 13 14 15 19 20 21 31 32 33 37 38 53 54 57 58 67 68 77 78 82 84 86 88 93 95 114 115 
121 128 129 140 141 154 155 162 163 168 169 174 175 177 179 184 186 241 242 246 252 256 
257 258 269 270 272 277 278 281 282 284 289 314 317 327 328 335 336 349 359 362 377 381 
385 388 389 399 402 415 420 423 428 432 435 442 462 480 487 494 499 501 506 509 514 516 
522 530 532 536 541 542
#also warum ist dann GZ*ORBX[82] nicht in ORB[4]? Da ist was faul bei GZ*ORBX[82]
#ueberhaupt kommt unten eine ganz andere Bahn heraus:
#VEKT3:=[];TR(82);
 83 82 84 85 86 87 88 89 132 95 105 97 99 100 113 108 103 117 115 119 110 112 111 124 125 
126 127 138 137 131 129 139 136 148 149 145 120 207 142 221 150 151 152 153 141 155 161 
159 158 160 233 209 188 189 187 208 220 264 230 210 234 226 216 218 224 225 223 231 232 
268 252 253 251 258 228 270 260 276 273 265 267 266 274 275 303 295 293 294 271 361 330 
338 331 365 324 326 317 320 327 360 359 358 370 366 333 336 343 371 385 381 382 369 325 
316 364 372 386 346 412 396 390 402 401 409 393 405 413 418 481 299 300 301 304 458 374 
367 261 434 429 356 454 388 450 525 437 431 438 432 443 444 457 449 302 484 468 462 465 
476 471 467 487 492 497 479 535 526 533 456 536 544 491 519 433 518 531 517 101
#und wieso isT Group(G1,G2,GZZ) so gross? Da stimmt auch was nicht

GZZ:=Z(2)*[ #a->ac
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],
  [1,1,1,0,0,0,1,1,1,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],
  [1,1,1,0,0,0,0,0,0,0,1,1,1,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]
  ];
A:=Group(G1,G2,GZZ);Size(A);


TESTER:=function(ORBX)
  local i,j,k,KLEINER,S,T,GESAMT,PROD,VEKT;
  VEKT:=[];
  S:=Size(ORBX);
  for i in [1..S] do
    Print("\n",i);
    KLEINER:=false;
    T:=Size(ORBX[i]);
    for j in [1..T] do
      PROD:=GZ*ORBX[i][j];
      for k in [1..S] do
        if PROD in ORBX[k] then 
          Print(" ",k,"\c");
          if k>i then VEKT[k]:=1; fi;
          if k<i then VEKT[i]:=1; fi;
          fi;
        od;
      od;
    od;
  GESAMT:=0;
  for i in [1..S] do if not IsBound(VEKT[i]) then GESAMT:=GESAMT+1; fi; od;
  Print("\n",GESAMT-1);
  return VEKT;
  end;
TESTERG:=TESTER(ORBX);
ORBI:=[];for i in [1..Size(ORB)] do if not IsBound(TESTERG[i]) then Add(ORBI,ORB[i]); fi; od;
Size(ORBI);
Print(ORBI{[2..10]}[1]);


TESTER2:=function(ORBX)
  local i,j,k,KLEINER,S,T,GESAMT,PROD,VEKT2,FLAG;
  VEKT2:=[];
  S:=Size(ORBX);
  for i in [1..S] do
    Print("\n",i);
    KLEINER:=false;
    T:=Size(ORBX[i]);
    for j in [1..T] do
      PROD:=OnPoints(ORBX[i][j],GZ);
      for k in [1..S] do
        if PROD in ORBX[k] then 
          Print(" ",k,"\c");
          if not IsBound(VEKT2[i]) then VEKT2[i]:=[]; fi; VEKT2[i][k]:=1;
          if not IsBound(VEKT2[k]) then VEKT2[k]:=[]; fi; VEKT2[k][i]:=1;
          fi;
        od;
      od;
    od;
  GESAMT:=0;
  for i in [1..S] do
    FLAG:=false;
    for j in [1..i-1] do
      if IsBound(VEKT2[i][j]) then FLAG:=true; fi;
      od;
    if FLAG=false then GESAMT:=GESAMT+1; Print("\n",i," ",GESAMT-1); fi;
    od;
  Print("\n",GESAMT-1);
  return VEKT2;
  end;
TESTERG2:=TESTER2(ORBX);;
ORBI:=[];for i in [1..Size(ORB)] do if not IsBound(TESTERG[i]) then Add(ORBI,ORB[i]); fi; od;
Size(ORBI);
Print(ORBI{[2..10]}[1]);

  S:=90;
  GESAMT:=0;
  for i in [1..S] do
    FLAG:=false;
    for j in [1..i-1] do
      if IsBound(TESTERG2[i][j]) then FLAG:=true; fi;
      od;
    if FLAG=false then GESAMT:=GESAMT+1; Print("\n",i," ",GESAMT-1); fi;
    od;
  Print("\n",GESAMT-1);
1 0
2 1
10 2
11 3
12 4~
80 5
81 6
f82 7
f94 8
315 9
9
82 84 99 84 89 83 99 83 84 83 99
92 188 172 81 ...
#aaaahh so, es kann so sein, dass 82 nur auf 83 84 89 99 geht, aber diese oder weitere daraus folgende zurück auf 13!!!! muss ich gleich mal gucken
83 103 84 88 83 120 95 101 95 82 86 111 97 86 111 84 111 101 110 111 101 97 103 84 97 110 83 110 97 103 83 103 84 110 111 83 101 103 84 84 88 120 84 84 82

84 115 85 87 82 187 105 83 105 83 87 112 108 87 112 103 112 105 124 124 112 105 103 83 124 87 124 108 103 87 103 124 108 82 83 108 115 103 83 87 187 83 85 108 82

85 115 84 86 88 316 120 120 84 125 88 125 115 125 125 120 115 84 125 88 125

86 187 87 85 83 316 95 95 87 136 83 136 187 136 136 95 187 87 136 83 136

87 188 88 84 84 187 132 105 132 86 89 151 137 89 151 187 151 105 148 151 105 137 188 88 137 148 84 148 137 188 84 188 187 148 151 84 105 188 187 88 84 187 88 88 86 84 137 188 86 84 84 88 148 137 151 105 132 89 187 105 148

88 189 89 83 85 120 142 120 142 87 88 150 149 88 150 188 150 142 159 159 150 142 188 87 159 88 159 149 188 88 188 159 149 85 120 149 189 188 87 83 120 87 89 149 85 88 189 188 87 83 88 89 159 120 142 120 87 142 149 150 150

89 189 88 82 87 89 132 132 88 158 87 158 189 158 158 132 189 88 158 87 158

>90 184 90 90 14 321 21 21 90 164 14 164 184 164 164 21 184 90 164 14 164

>91 185 91 91 28 329 166 40 166 91 93 171 165 93 171 190 171 40 168 171 40 165 185 91 165 168 28 168 165 185 28 185 190 168 171 28 40 185 190 91 91 329 91 91 91 28 165 185 91 91 28 91 168 165 171 40 166 93 329 40 168

>92 186 92 92 81 339 170 92 170 92 92 170 169 92 170 191 170 170 173 173 170 170 191 92 173 92 173 169 191 92 191 173 169 81 92 169 186 191 92 92 339 92 92 169 81 92 186 191 92 92 92 92 173 92 170 339 92 170 169 170 170

93 192 93 93 91 345 166 166 93 172 91 172 192 172 172 166 192 93 172 91 172

>>94 102 102 96 96 122 122 122 121 96 102 102 102 121 102 121

95 105 105 83 83 86 86 86 132 83 105 105 105 132 105 132

>96 109 106 94 29 122 134 35 134 133 98 107 104 98 107 157 107 35 144 107 35 104 109 106 104 144 29 144 104 109 29 109 157 144 107 29 35 109 157 106 94 122 106 106 133 29 104 109 133 94 29 106 144 104 107 35 134 98 122 35 144

97 110 110 83 83 111 148 111 148 145 99 108 105 99 108 159 108 148 159 111 108 148 111 105 159 99 159 145 111 99 111 159 145 83 111 145 110 111 105 83 111 105 110 145 83 99 110 111 105 83 99 110 159 111 148 148 111 145 105 108 108

>98 109 107 15 96 20 20 134 20 154 15 107 109 15 107 107 134 156 107 109 109 156 96 156 109 109 154 96 134 154 107

99 112 108 82 97 99 160 148 160 155 100 112 110 100 112 161 112 148 158 112 148 110 112 108 110 158 97 158 110 112 97 112 161 158 112 97 148 112 161 108 82 99 108 108 155 97 110 112 155 82 97 108 158 110 112 148 160 100 99 148 158

100 113 113 99 99 160 160 160 160 99 113 113 113 160 113 160

101 83 83 105 105 105 83 105 83 83 105 83 105

102 102 94 106 104 180 107 116 107 106 107 116 29 107 116 180 116 30 104 118 116 30 104 102 94 104 118 118 30 104 102 29 102 180 118 30 118 102 29 102 94 106 180 94 94 106 94 118 104 29 106 180 29 29 30 116 107 107 106 30 180

103 103 103 105 105 187 124 187 124 119 108 117 83 108 117 188 117 124 188 84 117 124 84 83 188 108 188 119 84 108 84 188 119 105 187 119 103 84 83 105 187 83 103 119 105 108 103 84 83 105 108 103 188 187 124 124 187 119 83 117 117

104 118 118 102 102 116 33 116 33 130 31 128 96 31 128 197 128 33 197 107 128 33 107 96 197 31 197 130 107 31 107 197 130 102 116 130 118 107 96 102 116 96 118 130 102 31 118 107 96 102 31 118 197 116 33 33 116 130 96 128 128

105 120 119 103 101 187 136 105 136 131 110 131 95 110 131 220 131 87 129 207 105 131 87 129 111 97 129 207 84 207 105 142 129 111 84 111 220 207 105 142 101 105 142 120 95 120 111 220 97 103 187 97 119 131 119 142 101 95 101 84 120 111 131 220 103 97 103 131 103 84 119 207 95 105 101 84 105 136 110 105 187 87 187 131 97 103 87 84 136 110 187 105 87 95 142 101 87 136 95 187 120 97 111 131 220 131 129 136 105 119 142 207 105 131 129 110 220 105 110 119 120

#muss ich extra raussuchen aus TESTERG2 komplett aufgedröselt.
VEKT3:=[];
TR:=function(i)
  local j;
  for j in [1..Size(ORBX)] do
    if IsBound(TESTERG2[i][j]) then 
      if not IsBound(VEKT3[j]) then  
#        Print(" ",j);
        VEKT3[j]:=1;
        TR(j);
        TR(i);
        fi;
      fi;
    od;
  end;
VEKT3:=[];TR(82);
TRKOMPLETT:=function()
  local i,j;
  for i in [1..Size(ORBX)] do
    VEKT3:=[];TR(i);
    j:=1;
    while not IsBound(VEKT3[j]) do j:=j+1; od;
    if j>=i then Print(" ",i,"\c"); fi;
    od;
  end;
TRKOMPLETT();





!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!! und ich hab die 7 bei d=5 !!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
TESTERG2:=TESTER2(ORBX);;
TRKOMPLETT();
 1 2  3  4  5 10 11 94 #fuer nur GZ
 1 2 10 11 12 80 81 82 #fuer TransposedMat(GZ)


gap> TR(83);
 82 83 84 86 88 95 97 101 103 110 111 120
gap> TR(84);
 82 83 85 87 103 105 108 112 115 124 187
gap> TR(85);
 84 86 88 115 120 125 316
gap> TR(86);
 83 85 87 95 136 187 316
gap> TR(87);
 84 86 88 89 105 132 137 148 151 187 188
gap> TR(88);TESTERG2:=TESTER2(ORBX);;

 83 85 87 88 89 120 142 149 150 159 188 189
gap> TR(89);
 82 87 88 89 132 158 189
 
#mit dem zweiten GZ hatte ich
#GZ*ORB[14][34]=ORB[82][1]
#aber auch Size(Group(G1,G2,GZ))=15571898495080403735163399512932270930492602798087054670480539648000 statt 9999360



#Na mach ich Orbit gar komplett, isT aber gar nichT soooo einfach.
AREST:=Group(GZ);Size(AREST);
reduire:=function(Bahn,GZ)
  return 
  end;
ORBXY:=OrbitsDomain(AREST,ORBX,reduire);;Size(BAHNEN);#komplett alle Bahnen von A



###### nochmal d=6 extra komplett##########################################
#d=6:
G1:=(1,2)(5,6)(8,9)(12,13)(17,18);
G2:=(1,2,4,7,11,16)(3,6,10,15,21,17)(5,9,14,20,12,18)(8,13,19);
A:=Group(G1,G2);
V:=GF(2)^21;
ORB:=OrbitsDomain(A,V,Permuted);;
Size(V);Size(ORB);
G1:=Z(2)*[
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#a
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#b
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ab
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#c
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ac
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#bc
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#d
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],#ad
  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],#bd
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],#cd
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],#f
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],#af
  [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],#bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],#cf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],#df
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],#g
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],#ag
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0],#bg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],#cg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],#dg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]#fg
  ];
G2:=Z(2)*[
#  a b   c     d       f         g
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#a
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#b
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ab
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#c 4
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],#ac
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],#bc
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],#d 7
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],#ad-bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],#bd
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],#cd
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],#f 11
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],#af
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],#bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],#cf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],#df
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#g 16
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ag
  [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#bg
  [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],#cg
  [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],#dg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0]#fg 21
  ];
AX:=Group(G1,G2);Size(AX);
VX:=GF(2)^21;
ORBX:=OrbitsDomain(AX,VX);;
ORBX:=List(ORBX,i->AsSet(i));;
Size(V);Size(ORBX);
GZ:=Z(2)*[
  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#a
  [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#b
  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ab
  [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#c 4
  [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#ac
  [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#bc
  [0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],#d 7
  [1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],#ad
  [0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],#bd
  [0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],#cd
  [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],#f 11
  [1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],#af
  [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0],#bf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],#cf
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0],#df
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0],#g 16
  [1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],#ag
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],#bg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],#cg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],#dg
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]#fg 21
  ];
AG:=Group(G1,G2,GZ);Size(AG);
VG:=GF(2)^21;
ORBG:=OrbitsDomain(AG,VG);;
ORBG:=List(ORBG,i->AsSet(i));;
Size(VG);Size(ORBG);
AK:=Group(G1,G2,TransposedMat(GZ));Size(AK);
VK:=GF(2)^21;
ORBK:=OrbitsDomain(AK,VK);;
ORBK:=List(ORBK,i->AsSet(i));;
Size(VK);Size(ORBK);
IsSubset(ORBG[4],ORBX[82]);
ZUSAMMENSETZUNG:=function(ORBGK)
  local ii,i,ANZ;
  ANZ:=[];
  for ii in [1..Size(ORBGK)] do
    ANZ[ii]:=[];
    Print("\n\nii=",ii,":\n"," Size(ORBGK[i])=",Size(ORBGK[ii]),"\c");
    for i in [1..Size(ORBX)] do if IsSubset(ORBGK[ii],ORBX[i]) then Add(ANZ[ii],i); fi; od;
    Print("\nANZ=",ANZ[ii]);
    od;
  return ANZ;
  end;
ZUSAMMENG:=ZUSAMMENSETZUNG(ORBG);;
ZUSAMMENK:=ZUSAMMENSETZUNG(ORBK);;
List(ZUSAMMENG,i->Size(i));
List(ZUSAMMENK,i->Size(i));

ANZG=[ 1, 6, 37, 249, 922, 2027, 1699, 16, 92, 47 ]
ANZK=[ 1, 37, 6, 249, 604, 16, 410, 2027, 955, 791 ]
List(ORBG,i->Size(i));
List(ORBK,i->Size(i));
[ 1, 63, 1953, 39060, 273420, 874944, 874944, 651, 18228, 13888 ]
[ 1, 1953, 63, 39060, 182280, 651, 109368, 874944, 499968, 388864 ]
1,52649006623

#umgeordnet:
ANZG=[ 1, 6, 37, 249, 922, 2027, 1699, 16,  92,  47 ]
ANZK=[ 1, 6, 37, 249, 604, 2027,  955, 16, 410, 791 ]
[ 1, 63, 195ORBG[2]3, 39060, 273420, 874944, 874944, 651, 18228, 13888 ]
[ 1, 63, 1953, 39060, 182280, 874944, 499968, 651, 109368, 388864 ]
3/2 7/4 3*2 7*4

##### jetzt versuche ich, aus 
#SaveWorkspace("GAPOHNEWEGEBAUM");
BDISP:=function(L)
  local i,j;
  for i in [1..Size(L)] do
    if L[i]=z0 then Print("0"); else Print("1"); fi;
    od;
  end;

ii=2:
 2 6 81 250 544
 10 79 311 500 511
ANZ=5
for i in [2,6,81,250,544] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;
for i in [10,79,311,500,511] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;

ab c  d   f
000000000000001 10
000000000010000 5
000001001100111 5
000100100110011 10
111111111111111 1

ab c  d   f
000000000011111 5
000000111111110 10
000111111011100 10
011110110011000 5
110100100010000 1

ii=7:
 11 27 46 56 63 74 79 424 500 508
ii=6:
 80 313 314 503 508 509 515 529 530 542
ANZ=10
for i in [11,27,46,56,63,74,79,424,500,508] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;
for i in [80,313,314,503,508,509,515,529,530,542] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;

ab c  d   f
000000000100011 10
000000001100110 15
000000011101111 10
000000100010001 10
000000100110010 30
000000101110111 30
000000111111110 10
010100100010111 20
011110110011000 5
011110111111110 15

ab c  d   f
000000111111111 10
000111111011111 30
000111111111111 10
011110110011111 20
011110111111110 15
011110111111111 30
110100100011111 5
110100111111110 10
110100111111111 10
110111111011111 15
ab c  d   f

for ii in [1..Size(ZUSAMMENG)] do
  Print("\niiG=",ii);
  for i in ZUSAMMENG[ii] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;
  Print("\niiK=",ii);
  for i in ZUSAMMENK[ii] do Print("\n"); BDISP(ORBX[i][1]); Print(" ",Size(ORBX[i])); od;
  od;

1  5 23 101 204 177 10  23#G
1 23  5 101 133  10 94 177#K
1 23  5 101 204  10 23 177#G umgeordnet

iiG=2
ab c  d   f
000000000000001 10
000100100110011 10
000000000010000 5
000001001100111 5
111111111111111 1
iiK=3
000000111111110 10
000111111011100 10
000000000011111 5
011110110011000 5
ab c  d   f
110100100010000 1


iiG=3
ab c  d   f
000000011101110 10
000000100010000 10
000000111111111 10
001100100110011 10
110111111111111 10
000000000010001 20
000001001101111 20
000001001110111 20
000101101010100 20
010100100110011 20
000000000000011 30
000000000110000 30
000000001100111 30
000000100110011 30
000000101110110 30
000100100010011 30
001100111111110 30
001011011110000 5
011111111111111 5
110100100011111 5
011110110111100 15
000000000100100 15
000100100110111 60
000100100110011 10-
iiK=2
ab c  d   f
000111111011100 10-
000000001111000 60
000000001100110 15
000011011010000 15
000000000001111 5
000000000010000 5
010100100010000 5
000000000000011 30
000000000010011 30
000000000111100 30
000000100110010 30
000000101110110 30
000001110011000 30
000011100010000 30
000000000000111 20
000000000010001 20
000000000010111 20
000000011110000 20
000101101010100 20
000000000000001 10
000000011101110 10
000000100010000 10
000100100010000 10
001100100010000 10


iiG=4
000000000000111 20
000000000010011 30
000000000100101 60
000000000100111 60
000000000101100 30
000000000110001 60
000000000110011 30
000000000110100 60
000000001101110 60
000000001101111 60
000000001110000 60
000000001110110 60
000000001110111 60
000000011111110 20
000000011111111 20
000000100010010 60
000000100010011 60
000000100110110 120
000000100110111 120
000000101111110 60
000000101111111 60
000001001101000 10
000001001101011 60
000001001110000 20
000001001110011 60
000001001111111 20
000001010010000 15
000001011101110 30
000001011101111 30
000001011110111 60
000001100010000 30
000001100010001 30
000001100110010 60
000001100110011 60
000001101110110 30
000001101110111 30
000001110011000 30
000001110011001 30
000001110111010 60
000001110111011 60
000001111111110 30
000001111111111 30
000011011010000 15
000011011010011 30
000011011110000 30
000011011110011 30
000100100010000 10
000100100010001 30
000100100010111 60
000100100110101 120
000100100111111 30
000100101010100 60
000100101010101 60
000100101110110 60
000100101110111 60
000100101111011 60
000100111011100 30
000100111011101 30
000100111111110 30
000100111111111 30
000101101010101 60
000101101011100 60
000111111111111 10
001011011110001 20
001011100011110 20
001011100011111 20
001011100111100 60
001011100111101 60
001100100010011 30
001100100110111 60
001100100111111 30
001100101111010 60
001100101111110 120
001100111011110 60
001100111111111 30
001101101010100 20
001101101111000 60
001101101111100 60
001101111111110 60
001111111111111 10
010100100010011 60
010100100011111 20
010100100110111 60
010100100111011 60
010100101111001 60
010101101111000 20
010110110011000 20
010110110111100 60
010110111111110 60
010111111111111 20
011110110011001 30
011110110111101 60
011110111111111 30
110100100010111 20
110100100110011 10
110100100111111 30
110100111111111 10
110101101111000 10
110101110011111 15
110101111111111 30
110111111011111 15
iiK=4
000000000100011 10
000000000111101 60
000000000111111 30
000000001100111 30
000000001111001 60
000000001111110 60
000000001111111 60
000000011101111 10
000000011110001 20
000000011111110 20
000000011111111 20
000000100010001 10
000000100011110 20
000000100011111 20
000000100110011 30
000000100111110 60
000000100111111 60
000000101110111 30
000000101111110 60
000000101111111 60
000001001111001 60
000001001111111 20
000001110011011 120
000001110011110 60
000001110111010 60
000001110111101 60
000001110111110 120
000001111111110 30
000011011001111 15
000011011010011 30
000011011011111 15
000011011110001 60
000011011111100 30
000011011111111 30
000011100010011 60
000011100011101 60
000011100011110 60
000011100110010 30
000011100111101 60
000011100111110 60
000011111011100 30
000011111011110 60
000011111111110 30
000100100010011 30
000100100011100 30
000100100011111 30
000100100111100 30
000100100111111 30
000100111011100 30
000100111011110 60
000100111111110 30
000101101010111 60
000101101011100 60
000101101011111 60
000101101111100 60
000101101111111 60
000101111011100 60
000101111011110 120
000101111111110 60
000111111011101 30
001011100110010 30
001011100110101 60
001011100111110 60
001011111111110 10
001100100010111 60
001100100011100 30
001100101110110 60
001100101111011 60
001100101111100 120
001100111011100 30
001101101010100 20
001101101011011 60
001101101011100 60
001101110111100 60
001101111011100 60
001111111011100 10
010100100010111 20
010100100011000 20
010100100011111 20
010100101110110 15
010100101111000 60
010100101111111 60
010100110011000 30
010100110011110 60
010100111111110 30
010101110011000 30
010101110011110 60
010101111111110 30
010110110011000 20
010110110011100 60
010110111011100 60
010111111011100 20
011110110011001 30
011110110011011 60
011110110111011 20
110100100010001 10
110100100010011 30
110100100010111 20
110100100110011 10
110100101110110 15
110100101110111 30
iiG=5
000000000001111 5
000000000010111 20
000000000101101 60
000000000101111 30
000000000110101 120
000000000110111 60
000000000111100 30
000000001101010 60
000000001101011 60
000000001110001 60
000000001110010 120
000000001110011 120
000000001111000 60
000000001111110 60
000000001111111 60
000000011110000 20
000000011110110 60
000000011110111 60
000000100010110 60
000000100010111 60
000000100110100 60
000000100110101 60
000000100111110 60
000000100111111 60
000000101111010 60
000000101111011 60
000001001101001 60
000001001110001 60
000001001111000 20
000001001111011 60
000001010010001 60
000001010010110 30
000001010101101 60
000001010101111 60
000001010110000 60
000001010110101 120
000001010110111 120
000001011110000 60
000001011110011 120
000001011110110 60
000001011111110 60
000001011111111 60
000001100010010 120
000001100010011 120
000001100010110 60
000001100011000 60
000001100011001 60
000001100110101 60
000001100110110 120
000001100110111 120
000001100111010 120
000001100111011 120
000001101111110 60
000001101111111 60
000001110011010 120
000001110011011 120
000001110011111 60
000001110111100 60
000001110111110 120
000001110111111 120
000011011001111 15
000011011010001 60
000011011010111 60
000011011101111 10
000011011110001 60
000011011110100 60
000011011110111 60
000011011111100 30
000011100010000 30
000011100010001 30
000011100011100 60
000011100011110 60
000011100011111 60
000011100110010 30
000011100110011 30
000011100111100 60
000011100111101 60
000011100111111 60
000011101010100 60
000011101010101 60
000011101011001 60
000011101011010 120
000011101011011 120
000011101110110 60
000011101110111 60
000011101111010 60
000011111011100 30
000011111011101 30
000011111111110 30
000011111111111 30
000100100010100 60
000100100010101 120
000100100011111 30
000100100110100 60
000100100111101 60
000100101010110 120
000100101010111 120
000100101011011 120
000100101011100 120
000100101011101 120
000100101111010 60
000100101111110 120
000100101111111 120
000100111011110 60
000100111011111 60
000101101010111 60
000101101011000 60
000101101011011 60
000101101011101 120
000101101110111 20
000101101111000 60
000101101111011 60
000101101111100 60
000101111011100 60
000101111011101 60
000101111111110 60
000101111111111 60
000111111011111 30
001011011110011 30
001011100010000 10
001011100010110 60
001011100010111 60
001011100110011 30
001011100110100 60
001011100110101 60
001011100111110 60
001011100111111 60
001011101110110 30
001011101111010 60
001011101111011 60
001011111111111 10
001100100010000 10
001100100010001 30
001100100010111 60
001100100011111 30
001100100110101 120
001100100111101 60
001100101010100 60
001100101010101 60
001100101011010 120
001100101011110 120
001100101110110 60
001100101110111 60
001100101111011 60
001100101111100 120
001100101111111 120
001100111011100 30
001100111011101 30
001100111011111 60
001101101010101 60
001101101011000 60
001101101011100 60
001101101111001 120
001101101111101 120
001101110011101 120
001101110111101 120
001101111011110 120
001101111111111 60
001111111011111 30
010100100010000 5
010100100010001 30
010100100011011 60
010100100110101 60
010100100111001 120
010100100111111 60
010100101110110 15
010100101110111 30
010100101111000 60
010100101111011 120
010100110011000 30
010100110011001 30
010100110011111 60
010100110111010 60
010100110111011 60
010100110111100 60
010100111111110 30
010100111111111 30
010101101111001 60
010101110011001 30
010101110011110 60
010101110011111 60
010101110111010 60
010101110111100 60
010101110111101 60
010101111111111 30
010110110011001 60
010110110011100 60
010110110111101 120
010110111011110 120
010110111111111 60
010111111011111 60
011110110011011 60
011110110011111 20
011110110111111 60
110100100010011 30
110100100110111 60
110100100111100 30
110100100111101 60
110100101111111 60
110100111111110 10
110101101111001 60
110101101111111 20
110101110111111 60
110101111111110 30
iiK=5
000000000100100 15
000000000100101 60
000000000100111 60
000000000101100 30
000000000101101 60
000000000101111 30
000000000110000 30
000000000110001 60
000000000110011 30
000000000110100 60
000000000110101 120
000000000110111 60
000000001101010 60
000000001101011 60
000000001101110 60
000000001101111 60
000000001110000 60
000000001110001 60
000000001110010 120
000000001110011 120
000000001110110 60
000000001110111 60
000000001111010 120
000000001111011 120
000000011110010 60
000000011110011 60
000000011110110 60
000000011110111 60
000000100010010 60
000000100010011 60
000000100010110 60
000000100010111 60
000000100110100 60
000000100110101 60
000000100110110 120
000000100110111 120
000000100111100 60
000000100111101 60
000000101111010 60
000000101111011 60
000001001111000 20
000001010001111 15
000001010010001 60
000001010010110 30
000001010101101 60
000001010110000 60
000001010110011 60
000001010110100 120
000001010110110 120
000001011101110 30
000001011110000 60
000001011110010 120
000001011110111 60
000001011111000 60
000001011111001 60
000001100010000 30
000001100010010 120
000001100010111 60
000001100011000 60
000001100011001 60
000001100110010 60
000001100110101 60
000001100110110 120
000001100111000 120
000001100111001 120
000001101110110 30
000001101111000 60
000001101111001 60
000001110011001 30
000001110011010 120
000001110011111 60
000011011010001 60
000011011010101 60
000011011010111 60
000011011110000 30
000011100010001 30
000011100010010 60
000011100010100 120
000011100010101 120
000011100010110 120
000011100010111 120
000011100011100 60
000011100011111 60
000011101010100 60
000011101010110 120
000011101011000 60
000011101011011 120
000011101110110 60
000011101111010 60
000100100010001 30
000100100010100 60
000100100010101 120
000100100010111 60
000100100011101 60
000100101010100 60
000100101010110 120
000100101011001 60
000100101011010 120
000100101110110 60
000100101111011 60
000101101010101 60
000101101011000 60
000101101011001 120
000101101011011 60
000101101011101 120
001011100010000 10
001011100010001 10
001011100010010 60
001011100011111 20
001100100010001 30
001100100010011 30
001100100010100 60
001100100010101 120
001100100011101 60
001100100011111 30
001100100110100 60
001100100111111 30
001100101010100 60
001100101011001 60
001100101011110 120
001100111111110 30
010100100010001 30
010100100010011 60
010100100011001 60
010100100011011 60
010100100110100 15
010100100111011 60
010100100111100 60
010100110111010 60
010100110111100 60
011110110111100 15
110100100111100 30
110101101111000 10
iiG=7
000000000100011 10
000000001100110 15
000000011101111 10
000000100010001 10
000000111111110 10
011110111111110 15
000000100110010 30
000000101110111 30
011110110011000 5
010100100010111 20
iiK=6
ab c  d   f
011110110011111 20
110100100011111 5
000111111011111 30
011110111111111 30
000000111111111 10
000111111111111 10
011110111111110 15
110100111111110 10
110100111111111 10
110111111011111 15
iiK=7
000001001100111 5
000001001111011 60
000001110111011 60
000001110111100 60
000001110111111 120
000001111111111 30
000011011101111 10
000011011110011 30
000011011111101 60
000011100110011 30
000011100111100 60
000011100111111 60
000011111011101 30
000011111011111 60
000011111111111 30
000100100110011 10
000100100111101 60
000100111011101 30
000100111011111 60
000100111111111 30
000101101110111 20
000101101111101 120
000101111011101 60
000101111011111 120
000101111111111 60
001011011101111 1
001011011110011 30
001011011110111 20
001011100110111 120
001011100111100 60
001011101110110 30
001011101110111 30
001011101111010 60
001011101111011 60
001011101111111 60
001100101110111 60
001100101111010 60
001100101111101 120
001100111011101 30
001101101010111 60
001101101011000 60
001101101011111 60
001101101110111 20
001101101111000 60
001101101111001 120
001101101111101 120
001101101111111 60
001101110011101 120
001101110011111 60
001101110111111 60
001101111011111 120
001101111111110 60
001101111111111 60
001111111011111 30
001111111111111 10
010100101110111 30
010100101111001 60
010100101111110 60
010100110011001 30
010100110011111 60
010100111111111 30
010101101110111 5
010101101111001 60
010101101111011 60
010101110011011 120
010101110111010 60
010101110111011 60
010101110111100 60
010101110111101 60
010101110111111 120
010110110011011 60
010110110011111 60
010110110111011 20
010110110111101 120
010110110111111 60
010110111011111 120
010110111111110 60
010110111111111 60
010111111011111 60
010111111111111 20
011110110111101 60
011110110111111 60
011111111111111 5
110100100111101 60
110100100111111 30
110100101111110 60
110100101111111 60
110101101111011 60
110101110111100 12
110101110111101 60
110101110111111 60
110101111111110 30
110101111111111 30
110111111111111 10
iiG=8
000001010001111 15
000001010101100 12
000001100010111 60
000001100110100 60
000001110011110 60
000001110111101 60
000011100011101 60
000011100111110 60
000011101011000 60
000011101111011 60
001011011101111 1
001011100010001 10
001011100110010 30
001011101110111 30
001011111111110 10
010100100110100 15
010100110011110 60
010100110111101 60
010101101110111 5
010101110011000 30
010101110111011 60
010101111111110 30
011110110111011 20
iiG=6
000000000111101 60
000000000111111 30
000000001111001 60
000000001111010 120
000000001111011 120
000000011110001 20
000000011110010 60
000000011110011 60
000000100011110 20
000000100011111 20
000000100111100 60
000000100111101 60
000001001111001 60
000001010010011 60
000001010010111 60
000001010110001 120
000001010110011 60
000001010110100 120
000001010110110 120
000001010111100 60
000001010111101 120
000001010111111 60
000001011110001 60
000001011110010 120
000001011111000 60
000001011111001 60
000001011111010 120
000001011111011 120
000001100011010 120
000001100011011 120
000001100011110 60
000001100011111 60
000001100111000 120
000001100111001 120
000001100111100 120
000001100111101 120
000001100111110 120
000001100111111 120
000001101111000 60
000001101111001 60
000001101111010 120
000001101111011 120
000011011010101 60
000011011110101 120
000011011111101 60
000011011111111 30
000011100010010 60
000011100010011 60
000011100010100 120
000011100010101 120
000011100010110 120
000011100010111 120
000011100110100 120
000011100110101 120
000011100110110 120
000011100110111 120
000011101010110 120
000011101010111 120
000011101011100 120
000011101011101 120
000011101011110 120
000011101011111 120
000011101111100 120
000011101111101 120
000011101111110 120
000011101111111 120
000011111011110 60
000011111011111 60
000100100011100 30
000100100011101 60
000100100111100 30
000100101011000 60
000100101011001 60
000100101011010 120
000100101011110 120
000100101011111 120
000100101111100 120
000100101111101 120
000101101011001 120
000101101011111 60
000101101111001 120
000101101111101 120
000101101111111 60
000101110011100 60
000101110011101 120
000101110011111 60
000101110111100 60
000101110111101 120
000101110111111 60
000101111011110 120
000101111011111 120
000111111011101 30
001011011110111 20
001011100010010 60
001011100010011 60
001011100110110 120
001011100110111 120
001011101111110 60
001011101111111 60
001100100010100 60
001100100010101 120
001100100011100 30
001100100011101 60
001100100110100 60
001100100111100 30
001100101010110 120
001100101010111 120
001100101011000 60
001100101011001 60
001100101011011 120
001100101011100 120
001100101011101 120
001100101011111 120
001100101111101 120
001101101010111 60
001101101011001 120
001101101011011 60
001101101011101 120
001101101011111 60
001101101110111 20
001101101111011 60
001101101111111 60
001101110011100 60
001101110011111 60
001101110111100 60
001101110111111 60
001101111011100 60
001101111011101 60
001101111011111 120
001111111011101 30
010100100011000 20
010100100011001 60
010100100111000 60
010100100111100 60
010100100111101 120
010100101111010 120
010100101111110 60
010100101111111 60
010100110011010 120
010100110011011 120
010100110111110 120
010100110111111 120
010101101111011 60
010101101111111 20
010101110011010 120
010101110011011 120
010101110111110 120
010101110111111 120
010110110011011 60
010110110011101 120
010110110011111 60
010110110111011 20
010110110111111 60
010110111011100 60
010110111011101 60
010111111011100 20
010111111011101 60
110100100110101 60
110100101110111 30
110100101111010 60
110100101111011 60
110100101111110 60
110101101111011 60
110101110111101 60
010110111011111 120
ab c  d   f
000001010011111 15
000011011011111 15
110100100110100 15
110100101110110 15
000000000011111 5
001011011111111 5
110101101110111 5
000111111011100 10
001111111011100 10
110100100010001 10ok1
110100100010000 1
110101110111100 12
ab c  d   f
iiK=8
000001010101100 12
111111111111111 1
000001001101000 10
001011111111111 10
001100100110011 10ok1
ab c  d   f
001011011110000 5
001011011111111 5
110101101110111 5
000001010010000 15
000001010011111 15
110100100110100 15
110101110011111 15
000001001101001 60
000001001101011 60
000001001101111 20
000001001110000 20
000001001110001 60
000001001110011 60
000001001110111 20
000001010010011 60
000001010010111 60
000001010101111 60
000001010110001 120
000001010110101 120
000001010110111 120
000001010111100 60
000001010111101 120
000001010111111 60
000001011101111 30
000001011110001 60
000001011110011 120
000001011110110 60
000001011111010 120
000001011111011 120
000001011111110 60
000001011111111 60
000001100010001 30
000001100010011 120
000001100010110 60
000001100011010 120
000001100011011 120
000001100011110 60
000001100011111 60
000001100110011 60
000001100110100 60
000001100110111 120
000001100111010 120
000001100111011 120
000001100111100 120
000001100111101 120
000001100111110 120
000001100111111 120
000001101110111 30
000001101111010 120
000001101111011 120
000001101111110 60
000001101111111 60
000011011110100 60
000011011110101 120
000011011110111 60
000011100110100 120
000011100110101 120
000011100110110 120
000011100110111 120
000011101010101 60
000011101010111 120
000011101011001 60
000011101011010 120
000011101011100 120
000011101011101 120
000011101011110 120
000011101011111 120
000011101110111 60
000011101111011 60
000011101111100 120
000011101111101 120
000011101111110 120
000011101111111 120
000100100110100 60
000100100110101 120
000100100110111 60
000100101010101 60
000100101010111 120
000100101011000 60
000100101011011 120
000100101011100 120
000100101011101 120
000100101011110 120
000100101011111 120
000100101110111 60
000100101111010 60
000100101111100 120
000100101111101 120
000100101111110 120
000100101111111 120
000101101111000 60
000101101111001 120
000101101111011 60
000101110011100 60
000101110011101 120
000101110011111 60
000101110111100 60
000101110111101 120
000101110111111 60
001011011110001 20
001011100010011 60
001011100010110 60
001011100010111 60
001011100011110 20
001011100110011 30
001011100110100 60
001011100110110 120
001011100111101 60
001011100111111 60
001011101111110 60
001100100110101 120
001100100110111 60
001100100111100 30
001100100111101 60
001100101010101 60
001100101010110 120
001100101010111 120
001100101011000 60
001100101011010 120
001100101011011 120
001100101011100 120
001100101011101 120
001100101011111 120
001100101111110 120
001100101111111 120
001100111011110 60
001100111011111 60
001100111111111 30
001101101010101 60
001101101011001 120
001101101011101 120
001101101111011 60
001101101111100 60
001101110011100 60
001101110111101 120
001101111011101 60
001101111011110 120
001111111011101 30
010100100110011 20
010100100110101 60
010100100110111 60
010100100111000 60
010100100111001 120
010100100111101 120
010100100111111 60
010100101111010 120
010100101111011 120
010100110011010 120
010100110011011 120
010100110111011 60
010100110111101 60
010100110111110 120
010100110111111 120
010101101111000 20
010101101111111 20
010101110011001 30
010101110011010 120
010101110011111 60
010101110111110 120
010101111111111 30
010110110011001 60
010110110011101 120
010110110111100 60
010110111011101 60
010110111011110 120
010111111011101 60
110100100110101 60
110100100110111 60
110100101111010 60
110100101111011 60
110101101111001 60
110101101111111 20
gap> 

d = 6 :

iiG=1
000000000000000000000 1
iiK=1
000000000000000000000 1

iiG=2
000000000000000000001 15
000000000000000100000 6
000000000100011000111 15
010101101110111101111 6
000000100010001100011 20
001011011101111011111 1
iiK=3
ab c  d   f    g     
110100100010000100000 1
000000111111110111100 20
000000000000000111111 6
000000000011111111110 15
000111111011100111000 15
011110110011000110000 6

iiG=3
000000000000000000011 60
000000000000000100001 30
000000000000001000100 45
000000000000001100000 60
000000000000011000111 90
000000000000111001110 60
000000000001111011111 15
000000000010000100000 15
000000000010001100011 60
000000000010011100110 90
000000000010111101111 60
000000000011111111110 15
000000000100011100111 60
000000100010000100011 60
000000100010001100111 180
000000100110010100100 60
000001001100111010000 15
000001001100111100000 30
000001010001111011110 45
000001100010001100011 60
000001100010111101110 180
000011011101111011111 15
000100100010001100011 60
000101101010101101100 90
000101101110111101111 30
000111111011101111011 60
001011011101111111111 6
001011100010001111111 60
001011111111110111100 20
010100100010000101111 30
010100101110111101111 60
010101101110111111111 30
010101111111110111100 60
011110110011000110000 6
110101101110111101111 6
110101101111000110001 10
000000000100011001111 120
iiK=2
ab c  d   f    g     
000000000000111110000 120
000000000000000000001 15
000000000000000000011 60
000000000000000000111 60
000000000000000001111 30
000000000000000011111 6
000000000000000100000 6
000000000000000100001 30
000000000000000100011 60
000000000000000100111 60
000000000000000101111 30
000000000000001111100 60
000000000000011000110 45
000000000000011111000 180
000000000000111001110 60
000000000001111011110 15
000000000001111100000 30
000000000010000100000 15
000000000010001100010 60
000000000010011100110 90
000000000010111101110 60
000000000111100111000 90
000000001100110110000 90
000000001111000110000 180
000000011101110011100 10
000000011101110100000 60
000000011110000100000 60
000000100010000100000 20
000000100110010100100 60
000000101110110101100 60
000001110011000110000 60
000011011010000100000 45
000011100010000100000 60
000100100010000100000 15
000101101010100101000 30
001100100010000100000 15
010100100010000100000 6

iiG=4
000000000000000000111 60
000000000000000100011 60
000000000000001000101 180
000000000000001000111 180
000000000000001001100 180
000000000000001100001 120
000000000000001100011 60
000000000000001100100 180
000000000000011001110 360
000000000000011001111 360
000000000000011100000 180
000000000000011100110 180
000000000000011100111 180
000000000000111011110 120
000000000000111011111 120
000000000000111101110 120
000000000000111101111 120
000000000001111111110 30
000000000001111111111 30
000000000010000100010 120
000000000010000100011 120
000000000010001100110 360
000000000010001100111 360
000000000010011101110 360
000000000010011101111 360
000000000010111111110 120
000000000010111111111 120
000000000100011001000 60
000000000100011001011 360
000000000100011011111 60
000000000100011100000 60
000000000100011100011 180
000000000100011101111 120
000000000100100010000 15
000000000100100100000 90
000000000100111001110 180
000000000100111001111 180
000000000100111010111 180
000000000100111100111 360
000000000101100011000 45
000000000101100011001 90
000000000101101011010 180
000000000101101011011 180
000000000101111011110 90
000000000101111011111 90
000000000110000100000 90
000000000110000100001 90
000000000110001100010 180
000000000110001100011 180
000000000110011100110 90
000000000110011100111 90
000000000110100101000 180
000000000110100101001 180
000000000110101101010 360
000000000110101101011 360
000000000110111101110 180
000000000110111101111 180
000000000111100111000 90
000000000111100111001 90
000000000111101111010 180
000000000111101111011 180
000000000111111111110 90
000000000111111111111 90
000000001100110100000 90
000000001100110100011 180
000000001100111100000 180
000000001100111100011 180
000000011101110100000 60
000000011101110100011 60
000000011101111011111 20
000000011101111100000 60
000000011101111100011 60
000000100010000100000 20
000000100010000100001 60
000000100010000100111 180
000000100010001100101 360
000000100010001101111 180
000000100010010100100 180
000000100010010100101 180
000000100010011100110 180
000000100010011100111 180
000000100010011101011 360
000000100010110101100 180
000000100010110101101 180
000000100010111101110 180
000000100010111101111 180
000000100011110111100 60
000000100011110111101 60
000000100011111111110 60
000000100011111111111 60
000000100110010100101 180
000000100110010101100 360
000000101110111101111 60
000001001100111010001 120
000001001100111100001 120
000001001100111110000 30
000001001101000011111 60
000001001101000101110 60
000001001101001011100 180
000001001101001011101 360
000001001101111100000 120
000001001110000101110 120
000001001110000101111 120
000001001110001101100 360
000001001110001101101 360
000001001111000111110 120
000001001111000111111 120
000001001111001111100 360
000001001111001111101 360
000001010001111011111 45
000001010001111111110 90
000001010101111011110 180
000001011101110110011 180
000001011101111011111 60
000001100010000100011 180
000001100010001100111 360
000001100010001101111 180
000001100010001110011 180
000001100010011101010 360
000001100010011101110 720
000001100010110101110 360
000001100010111101111 180
000001100010111111110 360
000001100110010100100 120
000001100110011101000 360
000001100110011101100 360
000001100110111101110 360
000001101110110110011 180
000001101110111101111 60
000001110011000110000 60
000001110011110111101 180
000011011001111011111 45
000011011001111111110 90
000011011101111111111 60
000011100010001100011 60
000011100010001111011 180
000011100010001111111 180
000011100010011111010 360
000011100010011111110 360
000011100010111101110 360
000011100011101111011 180
000011100110011111000 180
000011100110011111100 180
000011101111011111000 360
000011111011100111111 180
000011111011101111011 60
000011111011110111101 180
000011111111110111100 60
000100100010000100011 180
000100100010000101111 120
000100100010001100111 180
000100100010001101011 360
000100100010011101001 360
000100100110011101000 120
000100101010100101000 120
000100101010101101100 360
000100101010111101110 360
000100101110111101111 120
000101101010100101001 180
000101101010100111000 120
000101101010101101101 360
000101101010101111100 360
000101101010111101111 180
000101101010111111110 360
000101101110111111111 120
000101111011100111111 360
000101111011101111011 120
000101111011110111101 360
000101111111110111100 120
000111111011100111011 180
000111111011101111111 180
001011011101111101111 30
001011011110000100000 15
001011011110000100001 15
001011011110001100010 60
001011011110001100011 60
001011011110011100110 90
001011011110011100111 90
001011011110111101110 60
001011011110111101111 60
001011011111111111110 15
001011011111111111111 15
001011100010000111111 60
001011100010001100011 20
001011100010001101111 180
001011100010001111101 120
001011100010011111111 360
001011100010111101111 180
001011100110010111000 180
001011101110111101111 60
001011101111010111000 120
001011101111110111100 180
001011111111110111101 60
001100100010000100111 60
001100100010001100011 60
001100100011100111110 180
001100100011101111010 180
001100100111100111111 180
001100100111101111011 180
001101101010100101000 30
001101101010101101100 90
001101101010111101110 90
001101101011000110001 180
001101101011001110101 360
001101101011011110111 180
001101101110111101111 30
001111111011100111111 60
001111111011101111011 60
010100100010000100111 120
010100100010000111111 30
010100100010001100011 60
010100100010001101111 180
010100100010111101111 60
010100100010111110001 120
010100100110011101000 60
010100100110100101111 90
010100100110111101111 180
010100101110110101111 90
010100101110111111111 180
010100110011001111100 180
010100111111110111100 60
010101101110111110111 120
010101101111000110000 60
010101101111000110001 60
010101101111001110010 180
010101101111001110011 180
010101101111011110110 180
010101101111011110111 180
010101101111111111110 60
010101101111111111111 60
010101110111011110111 120
010101110111110111100 360
010101111111110111101 180
010110110011000110000 30
010110110011001110100 90
010110110011011110110 90
010110110111011110111 30
010111111011100111111 120
010111111011101111011 120
011110110011000110001 60
011110110111011110111 30
110100100010000101111 30
110100100010001111111 60
110100100110011111000 60
110100101110111101111 60
110100101111110111100 90
110100111111110111101 60
110101101110111111111 30
110101101111000110011 90
iiK=4
000000000000001000011 20
000000000000001111101 120
000000000000001111111 60
000000000000011000111 90
000000000000011111001 180
000000000000011111110 180
000000000000011111111 180
000000000000111001111 60
000000000000111110001 120
000000000000111111110 120
000000000000111111111 120
000000000001111011111 15
000000000001111100001 30
000000000001111111110 30
000000000001111111111 30
000000000010000100001 15
000000000010000111110 30
000000000010000111111 30
000000000010001100011 60
000000000010001111110 120
000000000010001111111 120
000000000010011100111 90
000000000010011111110 180
000000000010011111111 180
000000000010111101111 60
000000000010111111110 120
000000000010111111111 120
000000000100011111001 180
000000000100011111111 60
000000000111100111011 360
000000000111100111110 180
000000000111101111010 180
000000000111101111101 180
000000000111101111110 360
000000000111111111110 90
000000001100110001111 90
000000001100110110011 180
000000001100110111111 90
000000001100111110001 360
000000001100111111100 180
000000001100111111111 180
000000001111000110011 360
000000001111000111101 360
000000001111000111110 360
000000001111001110010 180
000000001111001111101 360
000000001111001111110 360
000000001111110111100 180
000000001111110111110 360
000000001111111111110 180
000000011101110011111 60
000000011101110100011 60
000000011101110111100 60
000000011101110111111 60
000000011101111100001 120
000000011101111111100 60
000000011101111111111 60
000000011110000100011 120
000000011110000111101 120
000000011110000111110 120
000000011110001100010 60
000000011110001111101 120
000000011110001111110 120
000000011111110111100 60
000000011111110111110 120
000000011111111111110 60
000000100010000100011 60
000000100010000111100 60
000000100010000111111 60
000000100010001111100 60
000000100010001111111 60
000000100011110111100 60
000000100011110111110 120
000000100011111111110 60
000000100110010100111 180
000000100110010111100 180
000000100110010111111 180
000000100110011111100 180
000000100110011111111 180
000000100111110111100 180
000000100111110111110 360
000000100111111111110 180
000000101110110101111 180
000000101110110111100 180
000000101110110111111 180
000000101110111111100 180
000000101110111111111 180
000000101111110111100 180
000000101111110111110 360
000000101111111111110 180
000000111111110111101 60
000001001111001110010 180
000001001111001110101 360
000001001111001111110 360
000001001111111111110 60
000001110011000110111 360
000001110011000111100 180
000001110011011110110 360
000001110011011111011 360
000001110011011111100 720
000001110011110111100 180
000001110111010110100 120
000001110111010111011 360
000001110111010111100 360
000001110111101111100 360
000001110111110111100 360
000001111111110111100 60
000011011001111011110 15
000011011001111100001 90
000011011001111100110 180
000011011001111111111 90
000011011010000100111 180
000011011010000111110 90
000011011010011100110 90
000011011010011111001 90
000011011010011111110 180
000011011011111111110 45
000011011110001100010 180
000011011110001100101 180
000011011110001111001 360
000011011110001111110 360
000011011111100111000 90
000011011111100111110 180
000011011111111111110 90
000011100010000100111 180
000011100010000111011 180
000011100010000111100 180
000011100010011100110 180
000011100010011111011 360
000011100010011111100 360
000011100011101111010 180
000011100011101111100 360
000011100011110111100 180
000011100110010100100 60
000011100110010111011 180
000011100110010111100 180
000011100111101111010 180
000011100111101111100 360
000011100111110111100 180
000011111011100111000 60
000011111011100111100 180
000011111011110111100 180
000011111111110111100 60
000100100010000100111 60
000100100010000111000 60
000100100010000111111 60
000100100010011100110 45
000100100010011111000 180
000100100010011111111 180
000100100011100111000 90
000100100011100111110 180
000100100011111111110 90
000100100111100111000 90
000100100111100111110 180
000100100111111111110 90
000100111011100111000 60
000100111011100111100 180
000100111011110111100 180
000100111111110111100 60
000101101010100101111 120
000101101010100111000 120
000101101010100111111 120
000101101010111101110 90
000101101010111111000 360
000101101010111111111 360
000101101011100111000 180
000101101011100111110 360
000101101011111111110 180
000101101111100111000 180
000101101111100111110 360
000101101111111111110 180
000101111011100111000 120
000101111011100111100 360
000101111011110111100 360
000101111111110111100 120
000111111011100111001 90
000111111011100111011 180
000111111011101111011 60
001011100110010100100 60
001011100110010101011 360
001011100110010111100 180
001011100110101110011 120
001011100110101111100 360
001011100111110111100 180
001011111111110111100 20
001100100010000101111 120
001100100010000111000 60
001100100010111101110 180
001100100010111110111 180
001100100010111111000 360
001100100011100111000 90
001100101110110101100 120
001100101110110110111 360
001100101110110111000 360
001100101111011111000 360
001100101111100111000 360
001100111011100111000 60
001101101010100101000 30
001101101010100110111 120
001101101010100111000 120
001101101011011110110 90
001101101011011111000 360
001101101011100111000 180
001101110111100111000 180
001101111011100111000 120
001111111011100111000 15
010100100010000101111 30
010100100010000110000 30
010100100010000111111 30
010100100010111101110 60
010100100010111110000 120
010100100010111111111 120
010100100011000110000 60
010100100011000111110 120
010100100011111111110 60
010100101110110110000 90
010100101110110111111 90
010100101111000110000 180
010100101111000111110 360
010100101111111111110 180
010100110011000110000 60
010100110011000111100 180
010100110011110111100 180
010100111111110111100 60
010101110011000110000 60
010101110011000111100 180
010101110011110111100 180
010101111111110111100 60
010110110011000110000 30
010110110011000111000 120
010110110011100111000 180
010110111011100111000 120
010111111011100111000 30
011110110011000110001 60
011110110011000110011 180
011110110011000110111 120
011110110011001110011 60
011110110011011110110 90
011110110011011110111 180
110100100010000100001 15
110100100010000100011 60
110100100010000100111 60
110100100010000101111 30
110100100010001100011 20
110100100010011100110 45
110100100010011100111 90
110100100010111101110 60
110100100010111101111 60
110100101110110101111 90



