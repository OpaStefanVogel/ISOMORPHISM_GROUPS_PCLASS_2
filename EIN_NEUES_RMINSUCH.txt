#Read("EIN_NEUES_RMINSUCH.txt");

dmax:=10;
#dmax:=12;

XORMAT:=[[1]];
for i in [1..dmax] do
  n2:=2^(i-1);
  for j in [1..n2] do
    XORMAT[j+n2]:=[];
    for k in [1..n2] do
      XORMAT[j][k+n2]:=XORMAT[j][k]+n2;
      XORMAT[j+n2][k+n2]:=XORMAT[j][k];
      XORMAT[j+n2][k]:=XORMAT[j][k]+n2;
      od; od; od;
      
XORFUN:=function(i,j) return XORMAT[i+1][j+1]-1; end;

Diagonale:=function(G,flag)
  local HRES,i,j,D,DD,DDD,RET;
  RA:=RankPGroup(G);
  PC:=Pcgs(G);
  HRES:=Reversed(PC{[1..RA]});#Print(RA,PC,HRES);
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,HRES[i]*D[j]);
      od;
    od;
  DDD:=List(D);
  DD:=List(D,i->i^2);
  HRES:=MinimalGeneratingSet(Group(DD));
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,D[j]*HRES[i]);
      od;
    od;
  Add(D,D[1]^0,1); Add(DDD,D[1]^0,1);
  RET:=List(DD,i->Position(D,i)-1);
  if flag=1 then RET:=DDD; fi;
  return RET;
  end;

Diagonale(SmallGroup(4,1),0);
Diagonale(SmallGroup(8,2),0);
Diagonale(SmallGroup(16,3),0);
Diagonale(SmallGroup(256,55750),1);

COMPDIAG6E:=function(dd,D,flag)#neu
  local i,j,k,l,SD,ORBZU,MARK,NMARK,STUFE;
  SD:=Size(D);
  ORBZU:=[]; STUFE:=1;
  ORBZU[STUFE]:=List(D);
  ORBZU[STUFE][1]:=-1;
  repeat
    if flag=88 then Print("\n",ORBZU); fi;
    Print("#",Size(Collected(ORBZU[STUFE])),"\c");
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[-1];
      for j in [1..SD] do 
        MARK[i][j]:=[
          ORBZU[STUFE][i],
          ORBZU[STUFE][j],
          ORBZU[STUFE][XORMAT[j][i]]];
        od;
      MARK[i]:=Collected(MARK[i]{[1..SD]});
      od;
    STUFE:=STUFE+1;
    ORBZU[STUFE]:=[];
    for i in [1..SD] do for j in [i,i-1..1] do
      if MARK[i]=MARK[j] and ORBZU[STUFE-1][i]=ORBZU[STUFE-1][j] then ORBZU[STUFE][i]:=j; fi; od; od;
    until ORBZU[STUFE]=ORBZU[STUFE-1];  
  return ORBZU[STUFE];
  end;

COMPDIAG7E:=function(D)
  local i,j,SD,ORBZU,ORBZUMERK,MARK;
  SD:=Size(D); ORBZU:=List(D);
  repeat
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[];
      for j in [1..SD] do MARK[i][j]:=[ORBZU[j],ORBZU[XORMAT[j][i]]]; od;
      MARK[i]:=Collected(MARK[i]);
      od;
    ORBZUMERK:=ORBZU; ORBZU:=[1];
    for i in [2..SD] do for j in [i,i-1..2] do
      if MARK[i]=MARK[j] and ORBZUMERK[i]=ORBZUMERK[j] then ORBZU[i]:=j; fi; od; od;
    until ORBZU=ORBZUMERK;  
  return ORBZU;
  end;

RMINVORTEST:=function(D)
  local SD,S,STUFE,LRES,V,VARIANTEN,NEUE_VARIANTEN,RR,RMIN,RNEU,
  HRES,LD,ORBZU,ORBS,ONEU;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMIN:=[];
  ORBZU:=COMPDIAG6E(S,D,0);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1])];
  for STUFE in [1..S] do
    NEUE_VARIANTEN:=[];
    RNEU:=[9999];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;
      ORBS:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        RR:=[D[i]];
        for j in HRES do Add(RR,D[XORMAT[i][j]]); od;
        if RR<RNEU then NEUE_VARIANTEN:=[]; RNEU:=RR; fi;
        if RR=RNEU then
          LNEU:=List(LRES,j->XORMAT[i][j]);
          ONEU:=List(LNEU,j->ORBZU[j]);
          if not (ONEU in ORBS) then
            Add(ORBS,ONEU);
            VNEU:=StructuralCopy(V);
            Add(VNEU.HRES,i);
            VNEU.LRES:=Concatenation(LRES,LNEU);
            for i in LNEU do VNEU.LD[i]:=STUFE; od;
            Add(NEUE_VARIANTEN,VNEU);
            fi;
          fi;
        fi; od;
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    Add(RMIN,RNEU);
    od;
  return [RMIN,VARIANTEN];
  end;

ALPHA:=[0];#global weil von DNEU verÃ¤ndert
BETA:=[0];

DNEU:=function(d)
  local dneu,i;
  if not IsBound(ALPHA[d+1]) then
    dneu:=Size(BETA);
    for i in [dneu,dneu-1..1] do Add(BETA,XORMAT[d+1][BETA[i]+1]-1); od;
    for i in [1..dneu] do ALPHA[BETA[dneu+i]+1]:=dneu+i-1; od;
    fi;
  dneu:=ALPHA[d+1];
  return dneu;
  end;

DNEU(2);ALPHA;BETA;
DNEU(7);ALPHA;BETA;
DNEU(6);ALPHA;BETA;

RMINSUCH:=function(D)
  local SD,S,STUFE,LRES,V,VARIANTEN,NEUE_VARIANTEN,RR,RMIN,RNEU,
  HRES,KRES,LD,ORBZU,ORBS,ONEU;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMIN:=[];
  ORBZU:=COMPDIAG6E(S,D,0);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0])];
  for STUFE in [1..S] do
    NEUE_VARIANTEN:=[];
    RNEU:=[0];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;
      ORBS:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        RR:=List(KRES,i->DNEU(D[i]));
        if RR>RNEU then NEUE_VARIANTEN:=[]; RNEU:=RR; fi;#max geht schneller als min
        if RR=RNEU then
          LNEU:=List(LRES,j->XORMAT[i][j]);
          ONEU:=List(LNEU,j->ORBZU[j]);
          if not (ONEU in ORBS) then
            Add(ORBS,ONEU);
            VNEU:=StructuralCopy(V);
            Add(VNEU.HRES,i);
            VNEU.LRES:=Concatenation(LRES,LNEU);
            for i in LNEU do VNEU.LD[i]:=STUFE; od;
            VNEU.ALPHA:=ALPHA; VNEU.BETA:=List(BETA);
            Add(NEUE_VARIANTEN,VNEU);
            fi;
          fi;
        fi; od;
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    Add(RMIN,RNEU);
    od;
  return [RMIN,VARIANTEN];
  end;

Id:=[256,56089];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=RMINSUCH(D);;CE[1];

----------
Id:=[512,7533561];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG6E(RankPGroup(G),D,0);;
D;CE;
RE:=RMINSUCH(D);Size(RE[2]);
gap> RE:=RMINSUCH(D);Size(RE[2]);#mit Minimum
#9#20#21[ [ [ 0 ], [ 0, 0 ], [ 0, 0, 0 ], [ 0, 0, 0, 1 ], [ 0, 0, 1, 2, 2 ], 
      [ 4, 5, 6, 4, 4, 4 ] ], 
  [ 
      rec( ALPHA := [ 0, 3, 1, 2, 7, 4, 6, 5 ], 
          BETA := [ 0, 2, 3, 1, 5, 7, 6, 4 ], HRES := [ 2, 5, 17, 20, 15, 61 ]
            , LD := [ , 1, 4, 4, 2, 2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 4, 
              4, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6 ], 
          LRES := [ 1, 2, 5, 6, 17, 18, 21, 22, 20, 19, 24, 23, 4, 3, 8, 7, 
              15, 16, 11, 12, 31, 32, 27, 28, 30, 29, 26, 25, 14, 13, 10, 9, 
              61, 62, 57, 58, 45, 46, 41, 42, 48, 47, 44, 43, 64, 63, 60, 59, 
              51, 52, 55, 56, 35, 36, 39, 40, 34, 33, 38, 37, 50, 49, 54, 53 
             ] ), 
      rec( ALPHA := [ 0, 3, 1, 2, 6, 5, 7, 4 ], 
          BETA := [ 0, 2, 3, 1, 7, 5, 4, 6 ], HRES := [ 2, 5, 17, 20, 15, 62 ]
            , LD := [ , 1, 4, 4, 2, 2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 4, 
              4, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6 ], 
          LRES := [ 1, 2, 5, 6, 17, 18, 21, 22, 20, 19, 24, 23, 4, 3, 8, 7, 
              15, 16, 11, 12, 31, 32, 27, 28, 30, 29, 26, 25, 14, 13, 10, 9, 
              62, 61, 58, 57, 46, 45, 42, 41, 47, 48, 43, 44, 63, 64, 59, 60, 
              52, 51, 56, 55, 36, 35, 40, 39, 33, 34, 37, 38, 49, 50, 53, 54 
             ] ), 
      rec( ALPHA := [ 0, 3, 1, 2, 5, 6, 4, 7 ], 
          BETA := [ 0, 2, 3, 1, 6, 4, 5, 7 ], HRES := [ 2, 5, 17, 20, 16, 57 ]
            , LD := [ , 1, 4, 4, 2, 2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 4, 
              4, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6 ], 
          LRES := [ 1, 2, 5, 6, 17, 18, 21, 22, 20, 19, 24, 23, 4, 3, 8, 7, 
              16, 15, 12, 11, 32, 31, 28, 27, 29, 30, 25, 26, 13, 14, 9, 10, 
              57, 58, 61, 62, 41, 42, 45, 46, 44, 43, 48, 47, 60, 59, 64, 63, 
              56, 55, 52, 51, 40, 39, 36, 35, 37, 38, 33, 34, 53, 54, 49, 50 
             ] ), 
      rec( ALPHA := [ 0, 3, 1, 2, 4, 7, 5, 6 ], 
          BETA := [ 0, 2, 3, 1, 4, 6, 7, 5 ], HRES := [ 2, 5, 17, 20, 16, 58 ]
            , LD := [ , 1, 4, 4, 2, 2, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 4, 
              4, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
              6, 6, 6 ], 
          LRES := [ 1, 2, 5, 6, 17, 18, 21, 22, 20, 19, 24, 23, 4, 3, 8, 7, 
              16, 15, 12, 11, 32, 31, 28, 27, 29, 30, 25, 26, 13, 14, 9, 10, 
              58, 57, 62, 61, 42, 41, 46, 45, 43, 44, 47, 48, 59, 60, 63, 64, 
              55, 56, 51, 52, 39, 40, 35, 36, 38, 37, 34, 33, 54, 53, 50, 49 
             ] ) ] ]
4
gap> RE:=RMINSUCH(D);Size(RE[2]);#mit Maximum
#9#20#21[ [ [ 1 ], [ 3, 7 ], [ 7, 7, 5 ], [ 7, 7, 5, 1 ], [ 7, 3, 0, 0, 0 ], 
      [ 7, 2, 1, 4, 4, 0 ] ], 
  [ 
      rec( ALPHA := [ 0, 5, 1, 4, 6, 3, 7, 2 ], 
          BETA := [ 0, 2, 7, 5, 3, 1, 4, 6 ], 
          HRES := [ 11, 49, 41, 44, 57, 56 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 5, 4, 1, 5, 6, 6, 6, 6, 5, 4, 3, 5, 
              6, 6, 6, 6, 3, 5, 5, 4, 6, 6, 6, 6, 5, 4, 3, 5, 6, 6, 6, 6, 3, 
              5, 5, 4, 6, 6, 6, 6, 2, 5, 5, 4, 6, 6, 6, 6, 5, 4, 2, 5, 6, 6, 
              6, 6 ], 
          LRES := [ 1, 11, 49, 59, 41, 35, 25, 19, 44, 34, 28, 18, 4, 10, 52, 
              58, 57, 51, 9, 3, 17, 27, 33, 43, 20, 26, 36, 42, 60, 50, 12, 
              2, 56, 62, 8, 14, 32, 22, 48, 38, 29, 23, 45, 39, 53, 63, 5, 
              15, 16, 6, 64, 54, 40, 46, 24, 30, 37, 47, 21, 31, 13, 7, 61, 
              55 ] ), 
      rec( ALPHA := [ 0, 5, 1, 4, 7, 2, 6, 3 ], 
          BETA := [ 0, 2, 5, 7, 3, 1, 6, 4 ], 
          HRES := [ 11, 50, 42, 43, 58, 55 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 5, 4, 1, 5, 6, 6, 6, 6, 5, 4, 3, 5, 
              6, 6, 6, 6, 3, 5, 5, 4, 6, 6, 6, 6, 4, 5, 5, 3, 6, 6, 6, 6, 5, 
              3, 4, 5, 6, 6, 6, 6, 5, 2, 4, 5, 6, 6, 6, 6, 4, 5, 5, 2, 6, 6, 
              6, 6 ], 
          LRES := [ 1, 11, 50, 60, 42, 36, 25, 19, 43, 33, 28, 18, 4, 10, 51, 
              57, 58, 52, 9, 3, 17, 27, 34, 44, 20, 26, 35, 41, 59, 49, 12, 
              2, 55, 61, 8, 14, 32, 22, 47, 37, 29, 23, 46, 40, 54, 64, 5, 
              15, 16, 6, 63, 53, 39, 45, 24, 30, 38, 48, 21, 31, 13, 7, 62, 
              56 ] ), 
      rec( ALPHA := [ 0, 4, 1, 5, 7, 3, 6, 2 ], 
          BETA := [ 0, 2, 7, 5, 1, 3, 6, 4 ], 
          HRES := [ 11, 61, 33, 36, 53, 60 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 5, 4, 1, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              5, 4, 3, 5, 6, 6, 6, 6, 3, 5, 5, 4, 3, 5, 5, 4, 6, 6, 6, 6, 5, 
              4, 3, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 2, 5, 6, 6, 6, 6, 2, 5, 
              5, 4 ], 
          LRES := [ 1, 11, 61, 55, 33, 43, 29, 23, 36, 42, 32, 22, 4, 10, 64, 
              54, 53, 63, 9, 3, 21, 31, 41, 35, 24, 30, 44, 34, 56, 62, 12, 
              2, 60, 50, 8, 14, 28, 18, 40, 46, 25, 19, 37, 47, 57, 51, 5, 
              15, 16, 6, 52, 58, 48, 38, 20, 26, 45, 39, 17, 27, 13, 7, 49, 
              59 ] ), 
      rec( ALPHA := [ 0, 4, 1, 5, 6, 2, 7, 3 ], 
          BETA := [ 0, 2, 5, 7, 1, 3, 4, 6 ], 
          HRES := [ 11, 62, 34, 35, 54, 59 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 5, 4, 1, 5, 6, 6, 6, 6, 6, 6, 6, 6, 
              5, 4, 3, 5, 6, 6, 6, 6, 3, 5, 5, 4, 5, 3, 4, 5, 6, 6, 6, 6, 4, 
              5, 5, 3, 6, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 2, 6, 6, 6, 6, 5, 2, 
              4, 5 ], 
          LRES := [ 1, 11, 62, 56, 34, 44, 29, 23, 35, 41, 32, 22, 4, 10, 63, 
              53, 54, 64, 9, 3, 21, 31, 42, 36, 24, 30, 43, 33, 55, 61, 12, 
              2, 59, 49, 8, 14, 28, 18, 39, 45, 25, 19, 38, 48, 58, 52, 5, 
              15, 16, 6, 51, 57, 47, 37, 20, 26, 46, 40, 17, 27, 13, 7, 50, 
              60 ] ), 
      rec( ALPHA := [ 0, 5, 1, 4, 3, 6, 2, 7 ], 
          BETA := [ 0, 2, 6, 4, 3, 1, 5, 7 ], 
          HRES := [ 12, 53, 46, 47, 62, 52 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 4, 5, 5, 1, 6, 6, 6, 6, 5, 4, 3, 5, 
              6, 6, 6, 6, 5, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 3, 5, 6, 
              6, 6, 6, 5, 3, 4, 5, 6, 6, 6, 6, 2, 5, 5, 4, 6, 6, 6, 6, 4, 5, 
              5, 2 ], 
          LRES := [ 1, 12, 53, 64, 46, 39, 26, 19, 47, 38, 27, 18, 4, 9, 56, 
              61, 62, 55, 10, 3, 17, 28, 37, 48, 20, 25, 40, 45, 63, 54, 11, 
              2, 52, 57, 8, 13, 31, 22, 43, 34, 30, 23, 42, 35, 49, 60, 5, 
              16, 15, 6, 59, 50, 36, 41, 24, 29, 33, 44, 21, 32, 14, 7, 58, 
              51 ] ), 
      rec( ALPHA := [ 0, 5, 1, 4, 2, 7, 3, 6 ], 
          BETA := [ 0, 2, 4, 6, 3, 1, 7, 5 ], 
          HRES := [ 12, 54, 45, 48, 61, 51 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 4, 5, 5, 1, 6, 6, 6, 6, 5, 4, 3, 5, 
              6, 6, 6, 6, 5, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 3, 6, 
              6, 6, 6, 3, 5, 5, 4, 6, 6, 6, 6, 5, 2, 4, 5, 6, 6, 6, 6, 5, 4, 
              2, 5 ], 
          LRES := [ 1, 12, 54, 63, 45, 40, 26, 19, 48, 37, 27, 18, 4, 9, 55, 
              62, 61, 56, 10, 3, 17, 28, 38, 47, 20, 25, 39, 46, 64, 53, 11, 
              2, 51, 58, 8, 13, 31, 22, 44, 33, 30, 23, 41, 36, 50, 59, 5, 
              16, 15, 6, 60, 49, 35, 42, 24, 29, 34, 43, 21, 32, 14, 7, 57, 
              52 ] ), 
      rec( ALPHA := [ 0, 4, 1, 5, 2, 6, 3, 7 ], 
          BETA := [ 0, 2, 4, 6, 1, 3, 5, 7 ], 
          HRES := [ 12, 57, 38, 39, 50, 64 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 4, 5, 5, 1, 6, 6, 6, 6, 6, 6, 6, 6, 
              5, 4, 3, 5, 6, 6, 6, 6, 5, 3, 4, 5, 6, 6, 6, 6, 5, 3, 4, 5, 6, 
              6, 6, 6, 5, 4, 3, 5, 4, 5, 5, 2, 6, 6, 6, 6, 2, 5, 5, 4, 6, 6, 
              6, 6 ], 
          LRES := [ 1, 12, 57, 52, 38, 47, 30, 23, 39, 46, 31, 22, 4, 9, 60, 
              49, 50, 59, 10, 3, 21, 32, 45, 40, 24, 29, 48, 37, 51, 58, 11, 
              2, 64, 53, 8, 13, 27, 18, 35, 42, 26, 19, 34, 43, 61, 56, 5, 
              16, 15, 6, 55, 62, 44, 33, 20, 25, 41, 36, 17, 28, 14, 7, 54, 
              63 ] ), 
      rec( ALPHA := [ 0, 4, 1, 5, 3, 7, 2, 6 ], 
          BETA := [ 0, 2, 6, 4, 1, 3, 7, 5 ], 
          HRES := [ 12, 58, 37, 40, 49, 63 ], 
          LD := [ , 5, 5, 4, 6, 6, 6, 6, 4, 5, 5, 1, 6, 6, 6, 6, 6, 6, 6, 6, 
              5, 4, 3, 5, 6, 6, 6, 6, 5, 3, 4, 5, 6, 6, 6, 6, 3, 5, 5, 4, 6, 
              6, 6, 6, 4, 5, 5, 3, 5, 4, 2, 5, 6, 6, 6, 6, 5, 2, 4, 5, 6, 6, 
              6, 6 ], 
          LRES := [ 1, 12, 58, 51, 37, 48, 30, 23, 40, 45, 31, 22, 4, 9, 59, 
              50, 49, 60, 10, 3, 21, 32, 46, 39, 24, 29, 47, 38, 52, 57, 11, 
              2, 63, 54, 8, 13, 27, 18, 36, 41, 26, 19, 33, 44, 62, 55, 5, 
              16, 15, 6, 56, 61, 43, 34, 20, 25, 42, 35, 17, 28, 14, 7, 53, 
              64 ] ) ] ]


Liste_der_Markierungen:=[];Liste_der_Id:=[];Doppelte_Markierungen:=[];
for kk in [1] do#..6] do#for kk in [1,2] do#for kk in [1] do
for m in [2..8] do n:=2^m;
  for Id in IdsOfAllSmallGroups(Size,n,PClassPGroup,2,RankPGroup,m-kk) do #,RankPGroup,m-1,m-2,m-3
  #m:=9;n:=512;for i in [10494201..10494212] do Id:=[512,i];
  #m:=9;n:=512;for i in [10493062..10494173] do Id:=[512,i];
  #m:=9;n:=512;for i in [7532393..10481221] do Id:=[512,i];
    Print("\nId=",Id," \c");
    G:=SmallGroup(Id);
    RANK:=RankPGroup(G);
    Print("Rank=",RANK," \c");
    D:=Diagonale(G,0);
    Add(D,0,1);
    #CE:=COMPDIAG6E(RANK,D,0);
    #M:=Size(Collected(CE))-1;#e weg
    #Print(" ",M," \c");
    #RE:=RMINVORTEST(D);
    #REV:=Size(RE[2]);
    #Print(" ",REV," \c");
    #if REV<>1 then Error("REV<>1"); fi;
    RE:=RMINSUCH(D);
    RES:=Size(RE[2]);
    Print(" ",RES," \c");
    if RE[1] in Liste_der_Markierungen then Error("doppelt"); fi;
    Add(Liste_der_Markierungen,[RE[1],Id]);
    Print(" ok\c");
    #Print(" ",COMPDIAG6E(RANK,D,0)=COMPDIAG7E(D),"\c");
    #if COMPDIAG6E(RANK,D,0)<>COMPDIAG7E(D) then Error("ungleich"); fi;
    od;
  od;
 od;

SortedList(Liste_der_Markierungen);

SmallGroupsInformation(512);
Remove(IdsOfAllSmallGroups(Size,256,PClassPGroup,2,RankPGroup,m-5),1);  
     #m-2                        #m-3           #m-4
#16  #2-4 (3)
#32  #21-35 (15)                 #2
#64  #192 - 245 (54)             #55-82 (28)
#128 #2150 - 2300 (151)          #997-1600
#256 #55626 - 56058 (433)        #26973-53037  #6732-10297 
#512 #10494201 - 10494212 r8 (12)
#512 #10493062 - 10494173 r7 (1112) #7532393 - 10481221 r6 #420515 - 6249623 r5 #60904 - 67612 r4 #2045 r3

