#XSAMMEL:=[];#nur anfangs einmal
IS:=[2,1];
for i1 in IS do i2:=i1;
#  for i2 in IS do
    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6);
            R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[i1,i2,i3,i4,i5,i6]];
#            G1:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
#            if G1<>fail then 
              G:=PcgsOfR(R);
              Print(IdSmallGroup(G),"\c");RMAXSUCH(G); 
#              fi;
            od;
          od;
        od;
      od;
#    od;
  od;

IS:=[4,3,2,1];
for i1 in IS do i2:=i1; i3:=i1;
#  for i2 in IS do
#    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6);
            R:=[[1],[1,1],[2,2,2],[2,2,2,2],[2,2,2,2,2],[i1,i2,i3,i4,i5,i6]];
#            G1:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
#            if G1<>fail then 
              G:=PcgsOfR(R);
              Print(IdSmallGroup(G),"\c");RMAXSUCH(G);
#              fi;
            od;
          od;
        od;
#      od;
#    od;
  od;

IS:=[2,1];
for i1 in IS do i2:=i1;
#  for i2 in IS do
    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            for i7 in IS do
              Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6," ",i7);
              R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[i1,i2,i3,i4,i5,i6,i7]];
#              G1:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
#              if G1<>fail then 
                G:=PcgsOfR(R);
                Print(IdSmallGroup(G),"\c");RMAXSUCH(G);
#                fi;
              od;
            od;
          od;
        od;
      od;
#    od;
  od;
XSAMMEL128:=StructuralCopy(XSAMMEL);;

IS:=[4,3,2,1];
for i1 in IS do i2:=i1; i3:=i1;
#  for i2 in IS do
#    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            for i7 in IS do
              Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6," ",i7);
              R:=[[1],[1,1],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[i1,i2,i3,i4,i5,i6,i7]];
#              G1:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
#              if G1<>fail then 
                G:=PcgsOfR(R);
                Print(IdSmallGroup(G),"\c");RMAXSUCH(G);
#                fi;
              od;
            od;
          od;
        od;
#      od;
#    od;
  od;

IS:=[2,1];
for i1 in IS do i2:=i1;
#  for i2 in IS do
    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            for i7 in IS do
              for i8 in IS do
                Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6," ",i7," ",i8);
                R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[i1,i2,i3,i4,i5,i6,i7,i8]];
                G:=PcgsOfR(R);
                Print(IdSmallGroup(G),"\c");RMAXSUCH(G);
                od;
              od;
            od;
          od;
        od;
      od;
#    od;
  od;
XSAMMEL256:=StructuralCopy(XSAMMEL);;

IS:=[4,3,2,1];
for i1 in IS do i2:=i1; i3:=i1;
#  for i2 in IS do
#    for i3 in IS do
      for i4 in IS do
        for i5 in IS do
          for i6 in IS do
            for i7 in IS do
              for i8 in IS do
                Print("\n",i1," ",i2," ",i3," ",i4," ",i5," ",i6," ",i7," ",i8,"\c");
                R:=[[1],[1,1],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[i1,i2,i3,i4,i5,i6,i7,i8]];
                G:=PcgsOfR(R);
                Print(IdSmallGroup(G),"\c");RMAXSUCH(G);
                od;
              od;
            od;
          od;
        od;
#      od;
#    od;
  od;

2 Ergebnisse:
- bei weitem nicht alle i1...i5 bilden eine Gruppe, ach ja, die ersten drei i1=i2=i3 sind ja gleich!!!
    aber außer wo i1=i2=2, da kann und muss auch i3=1 sein!!!
- warum durchläuft eine bereits in XSAMMEL enthaltene Gruppe alle "...."?

G:=SmallGroup(128,2229);
RMAXSUCH(G);time;
#dauert 1600
R:=[[1],[1,1],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[4,4,4,4,4,4,4]];
G:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
RMAXSUCH(G);time;
G:=PcgsOfR(R);
RMAXSUCH(G);time;
#dauert 17760
#und hält sich überdies bei einzelnen Punkten "." auf
#das darf doch nicht sein!!!
#das könnte daran liegen, dass ich wohl den [[1],[1,1]...]-Zweig aus XSAMMEL ausgeschlossen habe, 
#der muss dann halt wieder mit rein.
#ok hab das in Zeile 88 auskommetiert
#daraufhin erscheint auch [[1],[1,1],[4,4,4]] in XSAMMELVIEWER2(XSAMMELVIEWER2
vv aber jetzt dauert inh=202 ewig, 
vv ich vermute weil viele XMERK in XSAMMEL rein müssen)???
vv auch dauert RMAXSUCH immer noch ewig 
vv zweite Fehlermöglichkeit: G ist keine pc-Group
vv also muss ich das entsprechende MatrixOf suchen oder machen...
ok ja das ist PcgsOfR(R) aus D4_2_37.txt!!! Also alles da
ok jetzt geht Versuch1 ganz flott, sogar schneller bei nur [[1],[2,2]]
.. aber das dürfte eigentlich nicht sein, mit [[1],[1,1]...] muss schneller sein
.. und das brauch ich auch jetzt, weil viel isomorph ist.
.. dazu mache ich mal in beiden Varianten ... 

T(64);
G:=SmallGroup(64,226);
RMAXSUCH(G);time;

.. der Unterschied ist 200 zu 1780. Das darf doch nicht sein!!!
.. gut, das muss ich rausbekommen, erstemal überlegen, das ist die nächste Aufgabe.
.. wenn G schon drin ist, müsste das ja sofort rauskommen!!!

QY10A:=function(HRES,S,GROUP)#ob HRES ein pcgs ist
  local RET,j;
  RET:=(HRES[1])^2 in GROUP;
  for j in [2..S] do
    if not Commu(HRES[1],HRES[j]) in GROUP then RET:=false; fi; od;#C
#if S=2 and (HRES[1])^2=(HRES[1])^0 then RET:=false; fi;#wenn if, dann nur [[1],[2,2]...] in XSAMMEL rein, dafür längere Suche wenn G schon in XSAMMEL drin
#if S=3 and (HRES[1]*HRES[3])^2=(HRES[1])^0 then RET:=false; fi;
#if S=4 and (HRES[1]*HRES[2])^2=(HRES[1])^0 and (HRES[2]*HRES[3])^2<>(HRES[1])^0 then RET:=false; fi;
  return RET;
  end;

.. noch zu unübersichtlich, also vielleicht reicht schon

T(8);
G:=SmallGroup(8,3);
RMAXSUCH(G);time;

.. ja, das reicht schon: 10 - 20. G entspricht
Prob:=function(RX);
  R:=RX;
  G:=PcgsOfR(R);
  n:=Size(G);
  RMAXSUCH(G);
  Print(IdSmallGroup(G));
  end;
  

Prob([[1],[1,1],[3,1,3]]);
Prob([[1],[1,1],[4,1,1]]);
Prob([[1],[1,1],[1,3,1]]);
Prob([[1],[1,1],[1,4,4]]);
Prob([[1],[1,1],[1,1,2]]);
Prob([[1],[1,1],[2,2,1]]);
Prob([[1],[2,2],[1,1,1]]);
R:=[[1],[1,1],[3,3,1]];
G:=PcgsOfR(R);IdSmallGroup(G);
n:=Size(G);RMAXSUCH(G);time;
R:=[[1],[1,1],[3,3,3]];
G:=PcgsOfR(R);IdSmallGroup(G);
n:=Size(G);RMAXSUCH(G);time;

ok hab jetzt extra neu XSAMMELVIEWER1(XSAMMEL)
vv und bei Prob(...) da ist eindeutig was nicht funktionierend!!!
vv deranbleiben!!! aber erstmal Pause.
vv huiii da stimmt ja überhaupt nix
   vv erstens einmal das erste R ist meistens false, muss aber immer true sein
   ok zweitens dann wenn einmal true-1-1, dann dürfen nur noch Punkte "..." sein
      das konnte aber an erstens liegen weil ERSTBIT dann -1 ist
      und dann soll ja BRIT unwirksam sein
      also liegt alles an erstens.
ok na gut, hab eine mögliche Stelle gefunden: 
   in QY13 muss bei ZR[3]=0 auch RDRIN=-1 gesetzt werden
   das ist möglicherweise bei irgendeiner Umstellung verlorengegangen
vv jetzt aber ist bei n=64, inh=197 ein HRES=67 statt HRES=[...] da.???
   das nachher weiter, erstmal kurze Pause
   Versuch: ich setze bei ZR[3]=0 auch RDRIN=-1 nur beim allerallerersten Durchlauf
   ALLERANFANGSBIT:=-1;
ok da muss noch ALLERANFANGSBIT:=-1 aucH beim ersten ZR[3]<>0 rein
   dann erhalte ich das gewünschte Resultat:
   mit/ohne [[1],[1,1]...] 
   T(64) 1950/390 ms
   RMAXSUCH(SmallGroup(64,226) 140/0 ms !!!
   Versuch1 geht trotz zusätzlichem [[1],[1,1]...] bei i1-i6 minimal schneller.
   Ergebnis von i1-i7 steht noch aus, aber "ohne" ist schon beim Aufholen
   also Versuch1 mit [[1],[1,1]...]
üü dann muss ich aber nochmal schauen, 
   ob es auch doch noch öfters geht, damit nix verschenkt.
ok auch mal die überflüssigen i1<>i2<>i3 herausnehmen und damit MatrixOf
   ok perfekt: Am Anfang großer Rückstand, am Ende riesen Vorsprung.
vv wo ist 

R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2]];
G:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));
RMAXSUCH(G);time;
G:=PcgsOfR(R);
RMAXSUCH(G);time;

ok ach so, ist gar nicht dabei bei R:=[[1],[1,1],[2,2,2]..., 
   dehalb umändern bei IS=[2,1];
.. dann muss ich aber nochmal schauen, 
   ob es auch doch noch öfters geht, damit nix verschenkt.
   denn inh=202 dauert doch auffällig lange
   dabei auch Size am längsten und PositionFirstComponentRepariert
nö dazu ALLERANFANGSBIT:=0 mal von RMAXSUCH in QY13 verschieben
   nur probehalber mal, geht aber leider nicht.

ClearProfile();
G:=SmallGroup(64,202);
RMAXSUCH(G);time;
DisplayProfile();

ClearProfile();
G:=SmallGroup(64,201);
RMAXSUCH(G);time;
DisplayProfile();

also nix geht heute mehr -> Aus.

ok warum geht "ist schon drin" oftmals erst nach 4 oder 5 Punkten?
   nee das ist schon ok, das ist weil nicht jedes HRES ein pcgs ist
   und hat auch kaum Zeitverbrauch
ok neue GAP-Version mal installieren ob da PositionFirstComponent korrekt geht
   ist installiert, aber PositionFirstComponent geht dort noch nicht
ok jetzt ist bei inh=56089 nochmal ein Fehler: R=[[..2,1]] dauert ewig???
   huuu ja, da ist bei XSAMMELVIEWER1(XSAMMEL)
   tatsächlich nicht 8[2,2,2,2,2,2,2,1] enthalten
   und auch nicht 8[2,2,2,2,2,2,1,2]
   und 8[2,2,2,2,2,2,1,1]
   das müsste aber alles schon bei 8[2,2,2,2,2,2,2,2]
   mit rauskommen
   Vorgehen: ich ergänze mal noch die fehlenden
   und vergleiche dann die beiden XSAMMEL 
   das läuft darauf hinaus, QY13 nochmal durchzuchecken.
   aaaaha, das liegt daran weil ich für n=nmax=256 
   eine Speichersparmodus drin hab, den muss ich natürlich ausmachen
   und auch in XSAMMEL die 255 256 in was anderes umwandeln z.B. 10001 und 10002
   ok das scheint der Fehler gewesen zu sein, 
   jetzt sollte auch i1-i8 durchgehen

ClearProfile();
XSAMMEL:=[];#nur anfangs einmal
G:=SmallGroup(256,56089);
RMAXSUCH(G);time;Print("\007");
DisplayProfile();
XSAMMELMERK56089:=StructuralCopy(XSAMMEL);;
XSAMMEL:=StructuralCopy(XSAMMELMERK56089);;
R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2]];
G:=PcgsOfR(R);Size(G);IdSmallGroup(G);
RMAXSUCH(G);time;
R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,1]];
G:=PcgsOfR(R);Size(G);IdSmallGroup(G);
RMAXSUCH(G);time;
XSAMMELMERK56089A:=StructuralCopy(XSAMMEL);;
R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,1,2]];
G:=PcgsOfR(R);Size(G);IdSmallGroup(G);
RMAXSUCH(G);time;
XSAMMELMERK56089B:=StructuralCopy(XSAMMEL);;
R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,1,1]];
G:=PcgsOfR(R);Size(G);IdSmallGroup(G);
RMAXSUCH(G);time;
XSAMMELMERK56089C:=StructuralCopy(XSAMMEL);;

nö was auch interessant wäre, statt R=[1][1,1]...[4...]] durchweg mit
   R=[1][2,2]...[4...]] zu beginnen
ok dafür bräuchte ich aber ein IsConfluent für das Pcgs
.. auch ListX müsste ich mal aktivieren.
ok aber neee, R=[1][2,2]...[4...]] geht nicht als Ausgangspunkt
   weil dann statt 4... auch 1-256 stehen kann...
   also bleibt doch nur R=[1][1,1]...[4...]].
.. dann nochmal den ganzen RBIT-Ablauf von QY13 checken.
   .. ich mach mal WEGEBAUM raus
      da geht n=32, inh=51 verhältnismäßig langsam, das dürfte eigentlich nicht sein
      also ALLERANFANGSBIT auch inaktiv machen.
      da ist bei n=32, inh=21 ein Error in WEBEBAUM
      den wollte ich sowieso rausmach-->
      dann fehlt bei n=64, inh=226 auf einmal [32,27] und [32,28]
      wieso das?, Die waren doch schon bei T(32) dabei!!!
      und wieso ist da HRES2=1083 und nicht [...irgendwas...]???
      aha, da wurde halt 32,27] und [32,28] nicht vollständig gespeichert
      das auch bei [32,48] --> extra probieren
      und sogar bei [16,13]
      na und da stimmt was nicht
      das erste [ 1, 1, 8 ] ist [8,3]
      aber das dritte [ 1, 1, 3 ] ist [8,2]
      und kann deshalb unmöglich ZR3MERK=0 zurückliefern
      denn das sollte noch nicht in XSAMMEL drin sein!!!???!!!
      nee doch, [ 1, 1, 3 ] war schon mal weiter oben drin ganz kurz
      nächster Versuch, ich generiere [8,2] und [8,3] extra vorher
.. so, jetzt hab ich mal in QY21MINI die völlig unverständliche Zeile
      #  if ISO=0 then INDEX1:=0; else INDEX1:=ZEIGER[ISO][14]; fi;
      herausgemacht, mal sehen, was da läuft.

Gruppe [ 8, 2 ] jetzt drin 
[ 1, 1, 8 ][ 10001, 10001, 10002, 10001 ] -1 0 
[ 1, 1, 4 ][ 10002, 10002, 10001, 10002 ] 0 -1 .
[ 1, 1, 3 ][ 10002, 10002, 10001, 10002 ] 0 -1 ..

XSAMMEL:=[];#nur anfangs einmal
G:=SmallGroup(64,267);
RMAXSUCH(G);time;Print("\007");


XSAMMEL:=[];#nur anfangs einmal
G:=SmallGroup(32,48);
RMAXSUCH(G);time;Print("\007");
XSAMMELVIEWER1(XSAMMEL);

XSAMMEL:=[];#nur anfangs einmal
G:=SmallGroup(16,13);
RMAXSUCH(G);time;Print("\007");
XSAMMELVIEWER1(XSAMMEL);

XSAMMEL:=[];#nur anfangs einmal
G:=SmallGroup(8,2);
RMAXSUCH(G);time;
G:=SmallGroup(8,3);
RMAXSUCH(G);time;
G:=SmallGroup(8,4);
RMAXSUCH(G);time;
XSAMMELVIEWER1(XSAMMEL);
G:=SmallGroup(16,13);
RMAXSUCH(G);time;Print("\007");
XSAMMELVIEWER1(XSAMMEL);
