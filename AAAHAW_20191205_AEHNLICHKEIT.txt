#gap -L GAP_WORKSPACE #mit ERGS2_2945_20180813, AB_JETZT_NEU.txt bis RVOND4 mit dmax:=10 und PcgsOfR.txt.
##weiterer Versuch: Markierung verfeinern mit Aut(Aut(G)) oder wenigstens mit ConjugacyClasses
#Read("PcgsOfR.txt");
#Read("AB_JETZT_NEU.txt"); bis Ausgabe "....." reicht
#die schweren waren  [ 655, 569 ], [ 713, 705 ] in AAAHAX Zeile 500
####13#### ist MARKZAHL4 aus ERGSGRAPH.html
#0zuerst RVOND wenn nur 0,1 in D:
RVOND1:=function(dd,D)
  local d,j,R,RI;
  R:=[[0]];
  for d in [1..dd] do
    RI:=[D[2^(d-1)],D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
#RVOND1(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[0],[1,1],[1,1,2],[1,1,2,3],[0,0,0,0,0]];

#1zuerst als Probe aus ERGS1 echte Gruppen machen mit PcgsOfR:
dd:=4;
R:=ERGS1[dd][6]; #[[1],[1,1]], für PcgsOfR(R) muss das [[0],[1,1],[1,1,1]] sein, also los:
D:=DIAG(R); #ergibt [0,1,1,1]
Remove(D,1);
RD:=RVOND1(dd,D);[[0],[1,1],[1,1,1]];
G:=PcgsOfR(RD); IdSmallGroup(G); #[32,50]

for dd in [1..7] do #IdSmallGroup nur bis 256=2*2^7
  Print("\n");
  for i in [1..Size(ERGS1[dd])] do
    R:=ERGS1[dd][i];
    D:=DIAG(R);
    Remove(D,1);
    RD:=RVOND1(dd,D);
    G:=PcgsOfR(RD); 
    ID:=IdSmallGroup(G);
    Print(ID);
    od;
  od;

#[ 4, 1 ]
#[ 8, 3 ][ 8, 2 ][ 8, 4 ]
#[ 16, 11 ][ 16, 10 ][ 16, 13 ][ 16, 12 ]
#[ 32, 46 ][ 32, 45 ][ 32, 49 ][ 32, 48 ][ 32, 47 ][ 32, 50 ]
#[ 64, 261 ][ 64, 260 ][ 64, 264 ][ 64, 263 ][ 64, 262 ][ 64, 265 ][ 64, 266 ]
#[ 128, 2320 ][ 128, 2319 ][ 128, 2323 ][ 128, 2322 ][ 128, 2321 ][ 128, 2324 ][ 128, 2327 ][ 128, 2325 ][ 128, 2326 ]
#[ 256, 56083 ][ 256, 56082 ][ 256, 56086 ][ 256, 56085 ][ 256, 56084 ][ 256, 56087 ][ 256, 56090 ][ 256, 56088 ][ 256, 56091 ][ 256, 56089 ]
#10494201 - 10494212

#2wenn das bis hierher funktioniert, dann Versuch zusätzliche Markierung finden:

VERFEINERUNG:=function(D)
  SD:=Size(D);
  C:=COMPDIAGSTABERZ(D);
  S:=Group(STABMACH2(C)); #hier vorsichtshalber nochmal mit Aut(G) vergleichen
  T:=ConjugacyClasses(S);
  Print("T",Size(T),"\c");
  #U:=Orbits(S,[1..SD]);
  V:=List([1..Size(T)],i->Orbits(Group(List(T[i])),[1..SD]));#auch nur [2]
#  V:=List([3],i->Orbits(Group(List(T[i])),[2]));#nur [3] [2]
  Print("V\c");
  WS:=Collected(List(V,v->List(v,w->SortedList(w))));
  Print("WS\c");
  #W:=Collected(List(V,v->Collected(List(v,w->Collected(List(w,i->C[i]))))));
  return [C,Collected(C),WS];
  end;

dd:=3; 
i:=1;
R:=ERGS1[dd][i];
D:=DIAG(R);
VERFEINERUNG(D);
#Zwischenergebnis:
#U=  [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 7, 6, 8 ] ]
#V=[ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 6, 7, 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6, 7, 8 ] ] ]
#das ist schon mal eine Verfeinerung 2/3 und 58/67

dd:=1;R:=[[1]];D:=DIAG(R); VERFEINERUNG(D);#nix brauchbares
  [ 2, 3 ], 
  [ [ 2, 1 ], [ 3, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ] ], 1 ] ] ]
dd:=2;R:=[[1],[0,0]];D:=DIAG(R); VERFEINERUNG(D);#[ 3, 7, 11, 15 ], [ 4, 8, 12, 16 ]
  [ 2, 1, 0, 0 ], 
  [ [ 0, 2 ], [ 1, 1 ], [ 2, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], 1 ], [ [ [ 1 ], [ 2 ], [ 3, 4 ] ], 1 ] 
     ] ]
dd:=2;R:=[[1],[1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 6 ], [ 3, 7 ], [ 4, 8 ]
  [ 2, 1, 1, 1 ], 
  [ [ 1, 3 ], [ 2, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], 1 ], [ [ [ 1 ], [ 2, 3, 4 ] ], 2 ] ] ]
dd:=3;R:=[[1],[0,0],[1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 10 ], [ 3, 11 ], [ 4, 12 ], [ 5, 13 ], [ 6, 14 ], [ 7, 15 ], [ 8, 16 ]
  [ 2, 1, 0, 0, 1, 1, 3, 0 ], 
  [ [ 0, 3 ], [ 1, 3 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6 ], [ 3, 4, 8 ], [ 7 ] ], 2 ] ] ]
dd:=4;R:=[[1],[0,0],[1,1,1],[0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ]... und [ 2, 6, 5 ], [ 7, 12, 14 ] 
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ], 
  [ [ 0, 9 ], [ 1, 6 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ], 1 ], 
      [ 
          [ [ 1 ], [ 2, 5, 6 ], [ 3, 4, 8, 9, 10, 11, 13, 15, 16 ], 
              [ 7, 12, 14 ] ], 5 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 12, 14 ], [ 3, 4, 8, 9, 10, 11, 13, 15, 16 ] ],
          3 ] ] ]
dd:=4;R:=[[1],[0,0],[1,1,1],[1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ],
  [ 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ], 
  [ [ 0, 5 ], [ 1, 10 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 9, 10, 11, 13, 15, 16 ], [ 3, 4, 8, 12, 14 ] ],
          6 ] ] ]
dd:=5;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 34 ], [ 3, 35 ], 
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      3, 0, 1, 1, 0, 0, 0, 1 ], 
  [ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 27, 28, 32 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31 ], 
              [ 25 ] ], 10 ] ] ]
dd:=6;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
      0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ], 
  [ [ 0, 35 ], [ 1, 28 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  36, 38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 33, 
                  34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 58, 
                  59, 61, 63, 64 ] ], 21 ] ] ]
dd:=6;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[1,1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1 ], 
  [ [ 0, 27 ], [ 1, 36 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  33, 34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 
                  58, 59, 61, 63, 64 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 36, 
                  38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62 ] ], 24 ] ] ]
dd:=7;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
      0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 
      3, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 
      0, 1, 0, 0, 1, 1, 1, 0 ], 
  [ [ 0, 63 ], [ 1, 63 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ], [ 65 ], [ 66 ], 
              [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], [ 73 ], [ 74 ], 
              [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], [ 82 ], 
              [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], 
              [ 91 ], [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], 
              [ 99 ], [ 100 ], [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], 
              [ 106 ], [ 107 ], [ 108 ], [ 109 ], [ 110 ], [ 111 ], [ 112 ], 
              [ 113 ], [ 114 ], [ 115 ], [ 116 ], [ 117 ], [ 118 ], [ 119 ], 
              [ 120 ], [ 121 ], [ 122 ], [ 123 ], [ 124 ], [ 125 ], [ 126 ], 
              [ 127 ], [ 128 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  36, 38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62, 65, 66, 67, 
                  69, 71, 72, 73, 75, 76, 80, 81, 83, 84, 88, 89, 90, 91, 93, 
                  95, 96, 99, 100, 104, 105, 106, 107, 109, 111, 112, 116, 
                  118, 122, 125, 126, 127 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 33, 
                  34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 58, 
                  59, 61, 63, 64, 68, 70, 74, 77, 78, 79, 82, 85, 86, 87, 92, 
                  94, 98, 101, 102, 103, 108, 110, 113, 114, 115, 117, 119, 
                  120, 121, 123, 124, 128 ], [ 97 ] ], 29 ] ] ]
dd:=8;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);#

dd:=dd+1; D:=Concatenation(D,D); VERFEINERUNG(D);
                                                                                            a
                                                a                       a           a   a b b
                        a           a     a  b  b           a     a  b  b     a  b  b c c c c
            a     a  b  b     a  b  b  c  c  c  c     a  b  b  c  c  c  c  d  d  d  d d d d d
   e  a  b  b  c  c  c  c  d  d  d  d  d  d  d  d  f  f  f  f  f  f  f  f  f  f  f  f f f f f 
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 0 1 0 0 ]
#     x        x  x  y              y     y           x        x  x  y              y   y
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,0,0,0,1, 
#     x        x  x  y              y     y        x  x  y     X     x  x  y     x  x       y
#  0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,0,1,0,0 
#           y     y           y        x  x  y        y        x  x  y              y   y

#   a   a   a   a   a   a   a   a    a   a   a   a   a   a   a   a
# 0,x,0,0,x,x,1,0,0,0,0,1,0,1,0,0, x,x,1,0,1,0,x,x,1,0,x,x,0,0,0,1,
# 0,0,0,1,0,1,0,0,0,1,0,0,x,x,1,0, 0,1,0,0,x,x,1,0,0,0,0,1,0,1,0,0,
# 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1, 1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1,
# 1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1, 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,
# 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0, 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,
# 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0, 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,
# 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0, 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,
# 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0, 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0
135,120,1
#×:1, 0, 1, 1, 
#x=[ 2, 6, 5, 22, 21, 18 ], y=[ 7, 12, 14, 28, 30, 23 ], 
a c ac, a f af, a bcf abcf, a bdf abdf, c f cf, c bf bcf,
#statt x^2=0 x^2=2 bei y^2=(yx)^2 für alle y
#statt x^2=1 x^2=3 bei y^2!=(yx)^2 für alle y

#x×y=x·1·y
#1×1=1
#0×0=1

#x×y=x·a^-1·y
#a×a=a also neutrales Element
#e×e=a^-1=a

#gebraucht wird sowas wie wenn x^2=y^2=1 und (xy)^2!=0, darf aber 0^_ sein

MARKZAHL:=function(G)
  local x,y,MERK,n,a,e;
  MERK:=[0,0,0,0];
  e:=Identity(G);
  n:=Size(G);
  for x in G do
    a:=true;
    if x^2=e then
      for y in G do if a then if not y^2=(y*x)^2 then a:=false; fi; fi; od;
      if a then MERK[3]:=MERK[3]+1; else MERK[1]:=MERK[1]+1; fi;
      else
        for y in G do if a then if y^2=(y*x)^2 then a:=false; fi; fi; od;
        if a then MERK[4]:=MERK[4]+1; else MERK[2]:=MERK[2]+1; fi;
        fi;
    od;
  g:=Gcd(MERK);
  MERK:=MERK/g;
  return [g,Reversed(SortedList(MERK)),MERK];
  end;
G:=SmallGroup(256,56082);
MARKZAHL(G);

MARKZAHL:=function(G)
  local x,y,MERK,MGES,n,a,e;
  MGES:=[];
  e:=Identity(G);
  n:=Size(G);
  for x in G do
    MERK:=[];
    for y in G do Add(MERK,[x^2,y^2,(x*y)^2]); od;
    Add(MGES,Collected(MERK));
    od;
#[ [ [ [ 112, 128, 112 ], 112 ], [ [ 144, 128, 144 ], 140 ], [ [ 144, 256, 144 ], 4 ] ] ]
  MGES:=Reversed(SortedList(List(Collected(MGES),i->i[2])));
  g:=Gcd(MGES);
  return [g,MGES/g];
  end;
G:=SmallGroup(256,56082);
MARKZAHL(G);
  
for n in [2..9] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",MARKZAHL(G),",\n");
    od;
  od;

TABELLE:=[
[ 4, 1 ], [ 2, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 8, 2 ], [ 4, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 8, 3 ], [ 2, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 8, 4 ], [ 2, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 16, 10 ], [ 8, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 16, 11 ], [ 4, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 16, 12 ], [ 4, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 16, 13 ], [ 2, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 32, 45 ], [ 16, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 32, 46 ], [ 8, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 32, 47 ], [ 8, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 32, 48 ], [ 4, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 32, 49 ], [ 2, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 32, 50 ], [ 2, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 64, 260 ], [ 32, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 64, 261 ], [ 16, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 64, 262 ], [ 16, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 64, 263 ], [ 8, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 64, 264 ], [ 4, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 64, 265 ], [ 4, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 64, 266 ], [ 2, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 128, 2319 ], [ 64, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 128, 2320 ], [ 32, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 128, 2321 ], [ 32, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 128, 2322 ], [ 16, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 128, 2323 ], [ 8, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 128, 2324 ], [ 8, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 128, 2325 ], [ 4, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 128, 2326 ], [ 2, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 128, 2327 ], [ 2, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 256, 56082 ], [ 128, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 256, 56083 ], [ 64, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 256, 56084 ], [ 64, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 256, 56085 ], [ 32, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 256, 56086 ], [ 16, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 256, 56087 ], [ 16, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 256, 56088 ], [ 8, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 256, 56089 ], [ 4, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 256, 56090 ], [ 4, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 256, 56091 ], [ 2, [ 63, 63, 1, 1 ], [ 63, 63, 1, 1 ] ],
[ 512, 10494201 ], [ 256, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 512, 10494202 ], [ 128, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 512, 10494203 ], [ 128, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 512, 10494204 ], [ 64, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 512, 10494205 ], [ 32, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 512, 10494206 ], [ 32, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 512, 10494207 ], [ 16, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 512, 10494208 ], [ 8, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 512, 10494209 ], [ 8, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 512, 10494210 ], [ 4, [ 63, 63, 1, 1 ], [ 63, 63, 1, 1 ] ],
[ 512, 10494211 ], [ 2, [ 135, 120, 1, 0 ], [ 135, 120, 1, 0 ] ],
[ 512, 10494212 ], [ 2, [ 136, 119, 1, 0 ], [ 119, 136, 1, 0 ] ],
];

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",Size(OrbitsDomain(AutomorphismGroup(G),G)),",\n");
    od;
  od;

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",Size(ConjugacyClasses(G)),",\n");
    od;
  od;

for n in [2..5] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print("\n-------------------------\n",IdSmallGroup(G),",\n");
    Display(CharacterTable(G));
    od;
  od;

F:=FreeGroup("e","f","a","b","c","d");AssignGeneratorVariables(F);
R:=ParseRelators([e,f,a,b,c,d],"e^2=e, f^2=e, \
  a^2=f, \
  b^2=(a*b)^2=e,  \
  c^2=(a*c)^2=(b*c)^2=f, \
  d^2=(a*d)^2=(b*d)^2=(c*d)^2=f \
  ");
G:=F/R;
IdSmallGroup(G);
T:=CharacterTable(G);Display(T);

F:=FreeGroup("e","f","a","b","c","d","g","h");AssignGeneratorVariables(F);
R:=ParseRelators([e,f,a,b,c,d,g,h],"e^2=e, f^2=e, \
  a^2=f, \
  b^2=(a*b)^2=e,  \
  c^2=(a*c)^2=(b*c)^2=f, \
  d^2=(a*d)^2=(b*d)^2=(c*d)^2=f, \
  g^2=e^2, (a*g)^2=a^2, (b*g)^2=b^2, (c*g)^2=c^2, (d*g)^2=d^2, \
  h^2=e^2, (a*h)^2=a^2, (b*h)^2=b^2, (c*h)^2=c^2, (d*h)^2=d^2, (d*h)^2=d^2 \
  ");
G:=F/R;
P:=Image(IsomorphismPermGroup(G));
IdSmallGroup(P);
T:=CharacterTable(G);Display(T);

##################################aus AAAAHAY: 6, 168, 21060, 9999360, 
#                                               a                       a           a   a b b
#                       a           a     a  b  b           a     a  b  b     a  b  b c c c c
#           a     a  b  b     a  b  b  c  c  c  c     a  b  b  c  c  c  c  d  d  d  d d d d d
#  e  a  b  b  c  c  c  c  d  d  d  d  d  d  d  d  f  f  f  f  f  f  f  f  f  f  f  f f f f f 
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 0 1 0 0 ]
#  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 9 0 1 2
 [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,0,0,0,1 ]
   -  z        x  x  y              y     y        x  x  y     y     x  x  -     x  x       y
   -  w        w  w                                v  u              v  u  -     u  v

Gb:=Group(
  (2,3),
  (2,4)
  );
Size(Gb); #6

Gc:=Group(
  (2,3,5)(4,7,6),
  (2,4)(6,8)
  );
Size(Gc); #168

Gd:=Group(
  (2,3,5,9)(4,7,13,10)(6,11)(8,15,14,12),
  (2,4)(6,8)(10,12)(14,16)
  );
Size(Gd); #20160

Gf:=Group(
  (2,3,5,9,17)(4,7,13,25,18)(6,11,21,10,19)(8,15,29,26,20)(12,23,14,27,22)(16,31,30,28,24),
  (2,4)(6,8)(10,12)(14,16)(18,20)(22,24)(26,28)(30,32)
  );
Size(Gf); #9999360

dd:=6;
AUT_A:=function(dd)
  L:=[]; for i in [1..2^dd] do L[i]:=((2*(i-1)) mod (2^dd-1))+1; od; Remove(L);
  P1:=PermList(L);
  P2:=();  for i in [1..2^(dd-2)] do P2:=P2*(4*i-2,4*i); od;
  return Group(P1,P2);
  end;

Gg:=AUT_A(6);
Gh:=AUT_A(7);
Gk:=AUT_A(8);

OSf:=OrbitStabilizer(Gf,[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0],Permuted);;
Orbit(OSf.stabilizer,2);
Orbits(OSf.stabilizer,[1..32]);

dd:=3;
R:=[[1],[0,0],[1,1,1]];
D:=DIAG(R); 
G:=AUT_A(dd);
O0:=Orbit(G,D,Permuted);;Size(O0);
S1:=Stabilizer(G,D,Permuted);;Size(S1);#6
[ [ "1", "3", "5" ], 
  [ "4", "3", "5" ] ]

[ "5", "7", "1", "8", "10", "20", "40", "80", "100", "200", "400" ]
[ "5", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400" ]
[ (2,6,5)(3,8,4), (2,6)(4,8) ]
O1:=Orbits(S1,[1..8]);#[ 1 ], [ 2, 6, 5 ], [ 3, 4, 8 ], [ 7 ]
S2:=Stabilizer(S1,O1[2][1]);;Size(S2);#2
[ (3,4)(5,6) ]
O2:=Orbits(S2,O1[2]);#[ 2 ], [ 5, 6 ]
S3:=Stabilizer(S2,O2[2][1]);;Size(S3);#1

dd:=5;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];
D:=DIAG(R); 
G:=AUT_A(dd);
O0:=Orbit(G,D,Permuted);;Size(O0);
S1:=Stabilizer(G,D,Permuted);;Size(S1);#720
[ [ "1", "2", "4", "E", "16" ], 
  [ "1", "2","10", "E", "16" ], 
  [ "1", "3", "5", "9", "11" ], 
  [ "1", "8", "5", "2", "1A" ], 
  [ "4", "3", "5", "A", "12" ] ]
[ "14", "1C", "11", "13", "B", "20", "40", "80", "100", "200", "400" ]
[ "16", "8", "17", "A", "12", "20", "40", "80", "100", "200", "400" ]
[ "4", "C", "1", "3", "1B", "20", "40", "80", "100", "200", "400" ]
[ "6", "15", "10", "C", "14", "20", "40", "80", "100", "200", "400" ]
[ "D", "3", "17", "1E", "6", "20", "40", "80", "100", "200", "400" ]
[ "1F", "1D", "B", "15", "D", "20", "40", "80", "100", "200", "400" ]
[ "5", "A", "1", "9", "11", "20", "40", "80", "100", "200", "400" ]
[ "D", "2", "12", "E", "16", "20", "40", "80", "100", "200", "400" ]
[ "10", "9", "1B", "1C", "4", "20", "40", "80", "100", "200", "400" ]
[ "1F", "1C", "D", "2", "1A", "20", "40", "80", "100", "200", "400" ]
[ (2,24,18)(3,30)(4,11,20,29,22,13)(5,14,21,28,19,12)(6,27)(7,17,23)(9,15,
    31)(10,26,16), (2,28,17,23)(3,20,31,16)(4,9,15,26)(6,32,21,19)(7,24,27,
    12)(8,13,11,30)(10,22)(14,18) ]
O1:=Orbits(S1,[1..32]);#[ 2, 27, 6, 23, 12, 24, 5, 28, 17, 21, 7, 14, 18, 19, 32 ]
S2:=Stabilizer(S1,O1[2][1]);;Size(S2);#48
[ (9,15)(10,16)(11,13)(12,14)(17,23)(18,24)(19,21)(20,22), 
  (3,9,16,29)(4,10,15,30)(5,27,17,24)(6,28,18,23)(7,19,32,12)(8,20,31,11)(13,
    22)(14,21) ]
O2:=Orbits(S2,O1[2]);#[ 2 ], [ 5, 23, 28, 6, 17, 27, 24, 18 ], [ 7, 21, 12, 19, 14, 32 ]
S3:=Stabilizer(S2,O2[2][1]);;Size(S3);#6
[ (9,15)(10,16)(11,13)(12,14)(17,23)(18,24)(19,21)(20,22), 
  (3,16)(4,15)(7,12)(8,11)(19,32)(20,31)(23,28)(24,27) ]
O3:=Orbits(S3,O2[2]);#[ 5 ], [ 6 ], [ 17, 23, 28 ], [ 18, 24, 27 ]
S4:=Stabilizer(S3,O3[3][1]);;Size(S4);#2
[ (3,16)(4,15)(7,12)(8,11)(19,32)(20,31)(23,28)(24,27) ]
O4:=Orbits(S4,O3[3]);#[ 17 ], [ 23, 28] 
S5:=Stabilizer(S4,O4[2][1]);;Size(S5);#1

dd:=7;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(G,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#1451520
[ [ "1", "2", "4", "8", "10", "38", "58" ], 
  [ "1", "2", "4", "8", "40", "38", "58" ], 
  [ "1", "2", "4", "E", "16", "26", "46" ], 
  [ "1", "2", "4","20", "16",  "8", "68" ], 
  [ "1", "2","10", "E", "16", "2A", "4A" ], 
  [ "1", "3", "5", "9", "11", "21", "41" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A" ], 
  [ "4", "3", "5", "A", "12", "22", "42" ] ]

[ "4A", "54", "50", "76", "29", "74", "14", "80", "100", "200", "400" ]
[ "6F", "26", "62", "51", "41", "4D", "2D", "80", "100", "200", "400" ]
[ "14", "3F", "4A", "49", "67", "45", "25", "80", "100", "200", "400" ]
[ "3B", "43", "5C", "39", "47", "37", "57", "80", "100", "200", "400" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#23040
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#720
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#48
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#6
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#2
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#1

dd:=9;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#47377612800
[ [ "1", "2", "4", "8", "10", "20", "40", "E0", "160" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160" ], 
  [ "1", "2", "4", "8", "10", "38", "58", "98", "118" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58", "A8", "128" ], 
  [ "1", "2", "4", "E", "16", "26", "46", "86", "106" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128" ], 
  [ "1", "2","10", "E", "16", "2A", "4A", "8A", "10A" ], 
  [ "1", "3", "5", "9", "11", "21", "41", "81", "101" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A" ], 
  [ "4", "3", "5", "A", "12", "22", "42", "82", "102" ] ]

[ "2C", "3F", "15E", "BE", "9B", "A3", "155", "174", "F4", "200", "400" ]
[ "5C", "19", "B", "7", "67", "BE", "100", "81", "101", "200", "400" ]
[ "B1", "76", "155", "18B", "D2", "1E0", "1F8", "1C7", "47", "200", "400" ]
[ "160", "AA", "14C", "74", "C4", "DD", "6F", "3A", "1BA", "200", "400" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 5, 6, 27
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#185794560
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#1451520
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#23040
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 353, 257, 281, 503 ...] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#720
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, ...] 
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#48
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ...]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#6
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#2
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#1

dd:=11; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#24815256521932800
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580"*], 

  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0" ], 

  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428" ], 

  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A" ], 

  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402" ] ]

[ "1A1", "55C", "AB", "67C", "1B7", "7C9", "6E7", "7EB", "71D", "289", "489" ]
[ "745", "51B", "46B", "75C", "D7", "611", "389", "53B", "1D6", "6D1", "D1" ]
[ "2A9", "E1", "714", "5BB", "1D4", "300", "5C7", "332", "51D", "EB", "6EB" ]
[ "32D", "739", "578", "485", "460", "4E0", "112", "2ED", "35", "77C", "17C" 
[ "45C", "1EC", "59F", "288", "1B3", "11B", "2CF", "6D2", "6C8", "309", "509" ]
[ "54C", "41B", "33D",  "C2", "6E8",  "4D", "4ED",  "81", "1BC", "2C3", "4C3" ]
[ "3E9", "6DF", "107", "56A", "66B", "432", "69F", "262", "786", "5ED", "3ED" ]
[ "1",   "2",   "4",   "8",    "10",  "20",  "40",  "80", "100", "380", "580" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 2024, 32, 28, 27, 104, 1952, 1980, 100,
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#24257337753600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 27, 1948, 2019, 1947, 
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#47377612800
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 2025, 1937, 2031,
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#185794560
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 238, 142, 1902, 814,
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#1451520
O6:=Orbits(S5,O5[2]);#[ 23 ],[ 28, 2020, 100, 508,
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#23040
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ...]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#720
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ...], [ 150, 246 ...]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#48
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1230, 1902, 
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#6
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622 ...]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#2
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 1358 ]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#1

dd:=13; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#24815256521932800
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "E00", "1600" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200","1000", "E00", "1600"*], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580", "980", "1180" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "800", "580", "200", "1A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580",*"A80", "1280" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460", "860", "1060" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680", "A80", "1280" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0", "8A0", "10A0" ], 

  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418", "818", "1018" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0", "8A0", "10A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428", "828", "1028" ], 

  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406", "806", "1006" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428", "828", "1028" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A" ], 

  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401", "801", "1001" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402", "802", "1002" ] ]

dd:=15; #zuvor ERWIND für dmax:=15 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#27930968965434591767112450048000
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "800", "1000", "3800", "5800" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "800", "4000", "3800", "5800"*], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "E00", "1600", "2600", "4600" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400","2000", "1600",  "800", "6800" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200","1000", "E00", "1600",*"2A00", "4A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580", "980", "1180", "2180", "4180" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "800", "580", "200", "1A00", "2A00", "4A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580",*"A80", "1280", "2280", "4280" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460", "860", "1060", "2060", "4060" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680", "A80", "1280", "2280", "4280" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0", "8A0", "10A0", "20A0", "40A0" ], 
  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418", "818", "1018", "2018", "4018" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0", "8A0", "10A0", "20A0", "40A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428", "828", "1028", "2028", "4028" ], 
  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406", "806", "1006", "2006", "4006" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428", "828", "1028", "2028", "4028" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A", "200A", "400A" ], 
  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401", "801", "1001", "2001", "4001" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A", "200A", "400A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402", "802", "1002", "2002", "4002" ] ]

V:=GeneratorsSmallest(S1);
List([1..Size(V)],j->List(OnTuples(List([1..dd],k->2^(k-1)+1),V[j]),i->HexStringInt(i-1)));


dd:=2;
R:=[[1],[0,0]];
D:=DIAG(R); 
Gd:=AUT_A(dd);
O1:=Orbit(Gd,D,Permuted);;Size(O1);
S1:=Stabilizer(Gd,D,Permuted);;Size(S1);#72

dd:=4;
D:=[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0];
Gd:=AUT_A(dd);
O1:=Orbit(Gd,D,Permuted);;Size(O1);
S1:=Stabilizer(Gd,D,Permuted);;Size(S1);#72
O2:=Orbits(S1,[1..16]);#[ 1 ], [ 2, 14, 6, 7, 5, 12 ], [ 3, 16, 11, 13, 8, 9, 10, 4, 15 ] 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#12
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 6 ], [ 7, 12, 14 ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#6
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ]
S4:=Stabilizer(S3,O2[3][1]);;Size(S4);#2
O5:=Orbits(S4,O3[3]);#[ 7 ], [ 12, 14 ]
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#1

dd:=6;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0]];
D:=DIAG(R); 
Gg:=AUT_A(dd);
O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(Gg,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(Gg,[D0,D1],OnTuplesSets);;Size(S1);#40320
O2:=Orbits(S1,[1..64]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#1440
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#120
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#24
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#6
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#2
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#1
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ]

dd:=8;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);Collected(D);
D1:=SortedList(D1);Collected(D);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#2903040
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#51840
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#1920
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#120
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#12
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#2
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#1

dd:=10;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#46998591897600
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#94755225600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#394813440
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#3317760
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#51840
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#1440
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#72
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#8
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#2
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ], [ 622, 1006 ]
S10:=Stabilizer(S9,O10[3][1]);;Size(S10);#1
O11:=Orbits(S10,O10[3]);#[ 622 ], [ 1006 ] 

dd:=12; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#100055114296433049600
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#49630513043865600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#50030759116800
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#101072240640
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#394813440
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#2903040
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#40320
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#1152
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#72
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622 ...]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#12
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 1358 ], [ 1614, 3534, 3022 ]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#6
O12:=Orbits(S11,O11[2]);#[ 1230 ], [ 1358 ] 
S12:=Stabilizer(S11,O11[3][1]);;Size(S12);#2
O13:=Orbits(S12,O11[3]);#[ 1614 ], [ 3022, 3534 ] 
S13:=Stabilizer(S12,O13[2][1]);;Size(S13);#1

dd:=14; #zuvor ERWIND für dmax:=14 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
#S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#3383111551045856560939008000
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#3383111551045856560939008000
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#416229275473161486336000
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#103231467131240448000
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#51231497335603200
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#50030759116800
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#94755225600
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#348364800
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#2580480
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#40320
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622, ... ]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#1440
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 5838, ... ], [ 1614, 5198, 3534 ...]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#120
O12:=Orbits(S11,O11[2]);#[ 1230 ], [ 1358 ], [ 4302, 6990, 11598, 13646, 5838 ], [ 4430, 6862, 11470, 13518, 5966 ]
S12:=Stabilizer(S11,O12[3][1]);;Size(S12);#24
O13:=Orbits(S12,O12[3]);#[ 4302 ], [ 5838, 11598, 6990, 13646 ] 
S13:=Stabilizer(S12,O13[2][1]);;Size(S13);#6
O14:=Orbits(S13,O13[2]);#[ 5838 ], [ 6990, 11598, 13646 ]
S14:=Stabilizer(S13,O14[2][1]);;Size(S14);#2
O15:=Orbits(S14,O14[2]);#[ 6990 ], [ 11598, 13646 ]
S15:=Stabilizer(S14,O15[2][1]);;Size(S15);#1

dd:=16; #zuvor ERWIND für dmax:=16 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#3383111551045856560939008000



dd:=8
G:=AUT_A(dd);
R:=ERGS2[dd][655];
R:=ERGS2[dd][569];
R:=ERGS2[dd][713];
R:=ERGS2[dd][705];
D:=DIAG(R[1]);Collected(D);
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
D:=DIAG(R[2]);Collected(D);
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S2:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
S3:=Intersection(S1,S2);Size(S3);
Orbits(S3,[1..Size(D)]);
#für R:=ERGS2[dd][655]; #4
[ [ 1 ], [ 2, 5, 189, 253 ], [ 3, 17, 10, 212 ], [ 4, 21, 182, 48 ], 
  [ 6, 65 ], [ 7, 18, 246, 112 ], [ 8, 22, 74, 148 ], [ 9, 216, 191, 237 ], 
  [ 11, 200, 184, 64 ], [ 12, 196 ], [ 13, 215, 67, 81 ], 
  [ 14, 211, 255, 173 ], [ 15, 199, 76, 132 ], [ 16, 195, 248, 128 ], 
  [ 19, 219 ], [ 20, 23, 103, 39 ], [ 24, 155 ], [ 25, 214, 110, 230 ], 
  [ 26, 210 ], [ 27, 198, 101, 55 ], [ 28, 194, 217, 203 ], 
  [ 29, 213, 146, 90 ], [ 30, 209, 46, 166 ], [ 31, 197, 153, 139 ], 
  [ 32, 193, 37, 119 ], [ 33, 120, 228, 125 ], [ 34, 116, 96, 129 ], 
  [ 35, 104, 235, 176 ], [ 36, 100, 87, 84 ], [ 38, 115, 164, 61 ], 
  [ 40, 99, 171, 240 ], [ 41, 161, 94, 145 ], [ 42, 165, 226, 109 ], 
  [ 43, 177, 85, 68 ], [ 44, 181, 233, 192 ], [ 45, 162 ], 
  [ 47, 178, 169, 256 ], [ 49, 118 ], [ 50, 114, 141, 138 ], 
  [ 51, 102, 58, 167 ], [ 52, 98, 134, 91 ], [ 53, 117, 205, 202 ], 
  [ 54, 113 ], [ 56, 97, 122, 231 ], [ 57, 163, 143, 154 ], 
  [ 59, 179, 136, 75 ], [ 60, 183 ], [ 62, 168, 207, 218 ], 
  [ 63, 180, 124, 247 ], [ 66, 69, 186, 250 ], [ 70 ], [ 71, 82, 241, 107 ], 
  [ 72, 86, 77, 151 ], [ 73, 152, 188, 234 ], [ 78, 147, 252, 170 ], 
  [ 79, 135 ], [ 80, 131, 243, 123 ], [ 83, 224 ], [ 88, 160 ], 
  [ 89, 150, 105, 225 ], [ 92, 130, 222, 208 ], [ 93, 149 ], 
  [ 95, 133, 158, 144 ], [ 106, 229 ], [ 108, 245, 238, 187 ], 
  [ 111, 242, 174, 251 ], [ 121, 227, 140, 157 ], [ 126, 232, 204, 221 ], 
  [ 127, 244 ], [ 137, 206 ], [ 142 ], [ 156, 159, 172, 236 ], 
  [ 175, 239, 220, 223 ], [ 185, 254 ], [ 190, 249 ], [ 201 ] ]
#für R:=ERGS2[dd][569]; #96
[ [ 1 ], [ 2, 3, 56, 5, 206, 94, 60, 159, 9, 172, 108, 110, 88, 152, 207, 175 
     ], [ 4, 6, 7, 251, 10, 11, 13, 247, 246, 244, 250, 253 ], 
  [ 8, 14, 12, 15, 194, 195, 53, 57, 162, 99, 153, 165, 101, 89, 83, 146 ], 
  [ 16 ], [ 17, 65, 33, 129, 180, 116, 237, 221, 214, 215, 122, 118, 183, 
      187, 235, 234 ], 
  [ 18, 66, 34, 131, 133, 35, 69, 19, 220, 137, 73, 232, 21, 41, 127, 190 ], 
  [ 20, 70, 36, 135, 74, 42, 43, 128, 22, 23, 141, 139, 77, 240, 192, 224 ], 
  [ 24, 78, 44, 143, 115, 178, 217, 229, 117, 181, 226, 210, 211, 227, 185, 
      121 ], [ 25, 67, 37, 130, 126, 191, 216, 236, 124, 188, 239, 223, 222, 
      238, 184, 120 ], 
  [ 26, 68, 38, 132, 75, 39, 138, 27, 225, 134, 71, 113, 29, 177, 209, 45 ], 
  [ 28, 72, 40, 136, 46, 76, 47, 179, 30, 31, 142, 140, 79, 213, 114, 233 ], 
  [ 32, 80, 48, 144, 189, 125, 228, 212, 219, 218, 119, 123, 186, 182, 230, 
      231 ], [ 49, 81, 145, 96, 97, 161, 193, 112, 176, 208, 160, 64 ], 
  [ 50, 82, 147, 105, 98, 163, 248, 197, 51, 85, 169, 149, 254, 252, 255, 201 
     ], [ 52, 86, 151, 166, 106, 171, 205, 154, 91, 61, 103, 196 ], 
  [ 54, 90, 58, 155, 84, 100, 102, 164, 148, 167, 199, 198, 109, 59, 55, 150, 
      87, 203, 157, 93, 173, 170, 202, 107 ], 
  [ 62, 92, 156, 158, 104, 168, 245, 200, 204, 174, 63, 95, 242, 249, 111, 
      243 ], [ 241 ], [ 256 ] ]
#für R:=ERGS2[dd][713];#120
[ [ 1 ], [ 2, 220, 3, 250, 236, 17, 244, 9, 251, 188, 33, 65 ], 
  [ 4, 41, 11, 25, 18, 10, 234, 187, 204, 35, 186, 219, 73, 97, 81 ], 
  [ 5, 48, 32, 239, 176, 222, 94, 133, 160, 253, 111, 125 ], 
  [ 6, 245, 7, 231, 21, 221, 237, 214, 168, 64, 37, 96, 175, 126, 152, 127, 
      69, 112, 144, 158 ], 
  [ 8, 22, 229, 39, 167, 213, 85, 150, 136, 256, 128, 101 ], 
  [ 12, 210, 241, 227, 26, 43, 202, 185, 51, 68, 203, 164, 148, 50, 89, 105, 
      170, 83, 98, 155 ], 
  [ 13, 215, 230, 207, 174, 206, 183, 120, 159, 189, 182, 200 ], 
  [ 14, 15, 29, 38, 23, 199, 45, 166, 205, 173, 198, 77, 143, 151, 142, 70, 
      157, 53, 71, 181 ], 
  [ 16, 255, 240, 254, 30, 197, 224, 165, 40, 24, 47, 93, 192, 86, 149, 117, 
      135, 109, 134, 103 ], 
  [ 19, 228, 34, 180, 212, 66, 67, 249, 235, 156, 218, 242, 49, 172, 243 ], 
  [ 20, 57, 36, 75, 82, 211, 226, 74, 42, 140, 99, 154, 179, 217, 27, 233, 
      113, 171, 196, 178 ], 
  [ 28, 194, 44, 177, 195, 90, 107, 52, 84, 115, 100, 162, 121, 114, 147 ], 
  [ 31, 54, 46, 87, 55, 78, 248, 141, 102, 72, 79, 61 ], 
  [ 56, 238, 191, 223, 88, 80, 190, 62, 246, 247, 104, 118, 208, 232, 63, 
      184, 95, 119, 110, 216 ], 
  [ 58, 201, 59, 169, 91, 225, 163, 132, 153, 146, 106, 209, 76, 138, 139 ], 
  [ 60, 92, 130, 108, 145, 131, 122, 161, 193, 116, 137, 123 ], [ 124 ], 
  [ 129 ], [ 252 ] ]
#für R:=ERGS2[dd][705];#4
[ [ 1 ], [ 2, 182, 110, 116 ], [ 3, 10, 159, 174 ], [ 4, 189, 244, 223 ], 
  [ 5, 137, 81, 119 ], [ 6, 62 ], [ 7, 130, 207, 220 ], [ 8, 53, 164, 169 ], 
  [ 9, 184, 193, 238 ], [ 11, 191, 95, 65 ], [ 12, 52 ], [ 13, 64, 145, 156 ],
  [ 14, 139, 254, 233 ], [ 15, 55 ], [ 16, 132, 100, 70 ], 
  [ 17, 41, 187, 131 ], [ 18, 158, 216, 242 ], [ 19, 34, 37, 48 ], 
  [ 20, 149, 74, 93 ], [ 21, 161, 235, 245 ], [ 22, 136 ], 
  [ 23, 170, 117, 90 ], [ 24, 29, 26, 43 ], [ 25, 160, 123, 112 ], 
  [ 27, 151, 229, 195 ], [ 28, 36, 138, 178 ], [ 30, 163, 72, 107 ], 
  [ 31, 181 ], [ 32, 172, 218, 200 ], [ 33, 168, 67, 88 ], 
  [ 35, 175, 221, 251 ], [ 38, 155, 128, 83 ], [ 39, 141 ], 
  [ 40, 148, 226, 256 ], [ 42, 166, 240, 202 ], [ 44, 173, 114, 101 ], 
  [ 45, 153, 211, 205 ], [ 46, 192 ], [ 47, 146, 77, 98 ], 
  [ 49, 144, 249, 214 ], [ 50, 59, 150, 167 ], [ 51, 135, 103, 121 ], 
  [ 54, 179, 198, 209 ], [ 56, 188, 92, 126 ], [ 57 ], [ 58, 142, 86, 76 ], 
  [ 60, 133, 204, 231 ], [ 61, 177, 105, 79 ], [ 63, 186, 247, 228 ], 
  [ 66, 236, 212, 122 ], [ 68, 227, 78, 213 ], [ 69, 215, 239, 125 ], 
  [ 71, 224, 113, 210 ], [ 73, 234, 127, 232 ], [ 75, 225 ], [ 80, 222 ], 
  [ 82, 196, 106, 252 ], [ 84, 203, 248, 87 ], [ 85, 255 ], 
  [ 89, 194, 197, 102 ], [ 91, 201 ], [ 94, 253, 250, 97 ], 
  [ 96, 246, 104, 206 ], [ 99, 241 ], [ 108, 243, 208, 111 ], [ 109, 199 ], 
  [ 115, 217 ], [ 118, 237, 124, 219 ], [ 120, 230 ], [ 129, 180, 183, 190 ], 
  [ 134, 143, 140, 185 ], [ 147 ], [ 152, 176 ], [ 154, 162 ], [ 157, 165 ], 
  [ 171 ] ]


dd:=6;
R:=ERGS2[dd][2];
D:=(4-2*DIAG(R[1])-DIAG(R[2])) mod 4;
Remove(D,1);
RD:=RVOND(dd,D);
G:=PcgsOfR(RD); IdSmallGroup(G); #[32,35]
A:=AutomorphismGroup(G);
Size(A);


####13#### ist MARKZAHL4 aus ERGSGRAPH.html
MARKZAHL4:=function(G)
  local x,y,MERK,MGES,n,a,e, MARKS,DDNEU,MARKL,MARKLNUM,MARK,NUM1,NUM2,DDij,DD00,DD01,k,ind, SD,RET,i,MARKLFERT;
  MGES:=[];
  e:=Identity(G);
  n:=Size(G);
  DDNEU:=[];
  MARKS:="";
  MARKL:=[];
  MARKLNUM:=[];
  MARK:=[];
  SD:=n;
  i:=1;
  for x in G do
    MARK[i]:=[];
    NUM1:=[];
    NUM2:=[];
    for y in G do 
      DDij:=[x^2,y^2,(x*y)^2];
      DD00:=List(DDij);
      DD01:=List(DDij);
      for k in [1..3] do if DD01[k]<>e then DD01[k]:=1; else DD01[k]:=0; fi; od;
      ind:=Position(MARK[i],DDij);
      if ind=fail then
        Add(MARK[i],DDij);
        ind:=Size(MARK[i]);
        NUM1[ind]:=4*DD01[1]+2*DD01[2]+DD01[3];
        NUM2[ind]:=DD00;
        fi;
      NUM1[ind]:=NUM1[ind]+8;
      od;
    RET:=[SortedList(NUM1),SortedList(NUM2)];
    MARK[i]:=RET;
    ind:=Position(MARKL,RET);
    if ind=fail then
      Add(MARKL,RET);
      ind:=Size(MARKL);
      MARKLNUM[ind]:=[0,RET];
      fi;
    MARKLNUM[ind][1]:=MARKLNUM[ind][1]+1;
    DDNEU[i]:=RET;
    i:=i+1;
    od;
  MARKLNUM:=SortedList(MARKLNUM);
  MARKL:=List(MARKLNUM,i->i[2]);
  for i in [1..SD] do DDNEU[i]:=Position(MARKL,DDNEU[i]); od;
  MARKLFERT:=List(MARKLNUM,i->[i[1],i[2][1]]);
  return [MARK,MARKL,MARKLNUM,DDNEU,MARKLFERT];
  end;
G:=SmallGroup(8,3);
MARKZAHL4(G);
G:=SmallGroup(16,13);
MARKZAHL4(G);

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",Reversed(MARKZAHL4(G)[5]),",\n");
    od;
  od;

MARKZAHL5:=function(D)
  local x,y,MERK,a, MARKS,DDNEU,MARKL,MARKLNUM,MARK,NUM1,NUM2,DDij,DD00,DD01,k,ind, SD,RET,i,MARKLFERT;
  SD:=Size(D);
  DDNEU:=[];
  MARKS:="";
  MARKL:=[];
  MARKLNUM:=[];
  MARK:=[];
  for i in [1..SD] do
    MARK[i]:=[];
    NUM1:=[];
    NUM2:=[];
    for j in [1..SD] do 
      DDij:=[D[i],D[j],D[XORMAT[i][j]]];
      DD00:=List(DDij);
      DD01:=List(DDij);
      for k in [1..3] do if DD01[k]<>0 then DD01[k]:=1; else DD01[k]:=0; fi; od;
      ind:=Position(MARK[i],DDij);
      if ind=fail then
        Add(MARK[i],DDij);
        ind:=Size(MARK[i]);
        NUM1[ind]:=4*DD01[1]+2*DD01[2]+DD01[3];
        NUM2[ind]:=DD00;
        fi;
      NUM1[ind]:=NUM1[ind]+8;
      od;
    SortParallel(NUM1,NUM2);
    RET:=[NUM1,NUM2];
    MARK[i]:=RET;
    ind:=Position(MARKL,RET);
    if ind=fail then
      Add(MARKL,RET);
      ind:=Size(MARKL);
      MARKLNUM[ind]:=[0,RET];
      fi;
    MARKLNUM[ind][1]:=MARKLNUM[ind][1]+1;
    DDNEU[i]:=RET;
    od;
  MARKLNUM:=SortedList(MARKLNUM);
  MARKL:=List(MARKLNUM,i->i[2]);
  for i in [1..SD] do DDNEU[i]:=Position(MARKL,DDNEU[i]); od;
  MARKLFERT:=List(MARKLNUM,i->[i[1],i[2][1]]);
  return [MARK,MARKL,MARKLNUM,DDNEU,Collected(MARKLFERT)];
  end;
MARKZAHL5(DIAG([[1],[1,1]]))[5];
MARKZAHL5(DIAG([[1],[1,0]]))[5];
MARKZAHL5(DIAG([[1],[0,0]]))[5];

MARKZAHL5ERGS2:=function (dd,nr)
  local D,D1,D2;
  D1:=DIAG(ERGS2[dd][nr][1]);
  D2:=DIAG(ERGS2[dd][nr][2]);
  D:=2*D1+D2;
  return MARKZAHL5(D);
  end;

GESAMTDILIST:=[];
for dd in [8..8] do
  for nr in [1..Size(ERGS2[dd])] do
    ERG:=MARKZAHL5ERGS2(dd,nr)[5];
    Print(dd," ",nr," ",Reversed(ERG),",\n               ",dd," ",nr,"\n");
    if Position(GESAMTDILIST,ERG)<>fail then Error(); fi;
    Add(GESAMTDILIST,ERG);
    od;
  od;

#Halt bei [655,569 ], [713,705], [1067,1055],[1276,1134]
ERG655:=MARKZAHL5ERGS2(8,655);;
ERG569:=MARKZAHL5ERGS2(8,569);;
ERG655[5];ERG655[5]=ERG569[5];
#ERG655[2];ERG655[2]=ERG569[2];


