#gap -L GAP_WORKSPACE #mit ERGS2_2945_20180813, AB_JETZT_NEU.txt bis RVOND4 mit dmax:=10 und PcgsOfR.txt.
##weiterer Versuch: Markierung verfeinern mit Aut(Aut(G)) oder wenigstens mit ConjugacyClasses
#Read("PcgsOfR.txt");
#Read("MatrixOf.txt");
#Read("AB_JETZT_NEU.txt"); bis Ausgabe "....." reicht
#die schweren waren  [ 655, 569 ], [ 713, 705 ] in AAAHAX Zeile 500
####13#### ist MARKZAHL4 aus ERGSGRAPH.html
#0zuerst RVOND wenn nur 0,1 in D:
####################1502 R0VONR(R)
####################1641 SemidirectProduct
####################1760 GENERATE_G:=function(dd) #dd mit negativem Vorzeichen für (10+5+1), (36+27+1),...

RVOND1:=function(dd,D)
  local d,j,R,RI;
  R:=[[0]];
  for d in [1..dd] do
    RI:=[D[2^(d-1)],D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
#RVOND1(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[0],[1,1],[1,1,2],[1,1,2,3],[0,0,0,0,0]];

#1zuerst als Probe aus ERGS1 echte Gruppen machen mit PcgsOfR:
dd:=4;
R:=ERGS1[dd][6]; #[[1],[1,1]], für PcgsOfR(R) muss das [[0],[1,1],[1,1,1]] sein, also los:
D:=DIAG(R); #ergibt [0,1,1,1]
Remove(D,1);
RD:=RVOND1(dd,D);[[0],[1,1],[1,1,1]];
G:=PcgsOfR(RD); IdSmallGroup(G); #[32,50]

for dd in [1..7] do #IdSmallGroup nur bis 256=2*2^7
  Print("\n");
  for i in [1..Size(ERGS1[dd])] do
    R:=ERGS1[dd][i];
    D:=DIAG(R);
    Remove(D,1);
    RD:=RVOND1(dd,D);
    G:=PcgsOfR(RD); 
    ID:=IdSmallGroup(G);
    Print(ID);
    od;
  od;

#[ 4, 1 ]
#[ 8, 3 ][ 8, 2 ][ 8, 4 ]
#[ 16, 11 ][ 16, 10 ][ 16, 13 ][ 16, 12 ]
#[ 32, 46 ][ 32, 45 ][ 32, 49 ][ 32, 48 ][ 32, 47 ][ 32, 50 ]
#[ 64, 261 ][ 64, 260 ][ 64, 264 ][ 64, 263 ][ 64, 262 ][ 64, 265 ][ 64, 266 ]
#[ 128, 2320 ][ 128, 2319 ][ 128, 2323 ][ 128, 2322 ][ 128, 2321 ][ 128, 2324 ][ 128, 2327 ][ 128, 2325 ][ 128, 2326 ]
#[ 256, 56083 ][ 256, 56082 ][ 256, 56086 ][ 256, 56085 ][ 256, 56084 ][ 256, 56087 ][ 256, 56090 ][ 256, 56088 ][ 256, 56091 ][ 256, 56089 ]
#10494201 - 10494212

#2wenn das bis hierher funktioniert, dann Versuch zusätzliche Markierung finden:

VERFEINERUNG:=function(D)
  SD:=Size(D);
  C:=COMPDIAGSTABERZ(D);
  S:=Group(STABMACH2(C)); #hier vorsichtshalber nochmal mit Aut(G) vergleichen
  T:=ConjugacyClasses(S);
  Print("T",Size(T),"\c");
  #U:=Orbits(S,[1..SD]);
  V:=List([1..Size(T)],i->Orbits(Group(List(T[i])),[1..SD]));#auch nur [2]
#  V:=List([3],i->Orbits(Group(List(T[i])),[2]));#nur [3] [2]
  Print("V\c");
  WS:=Collected(List(V,v->List(v,w->SortedList(w))));
  Print("WS\c");
  #W:=Collected(List(V,v->Collected(List(v,w->Collected(List(w,i->C[i]))))));
  return [C,Collected(C),WS];
  end;

dd:=3; 
i:=1;
R:=ERGS1[dd][i];
D:=DIAG(R);
VERFEINERUNG(D);
#Zwischenergebnis:
#U=  [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 7, 6, 8 ] ]
#V=[ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 6, 7, 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6, 7, 8 ] ] ]
#das ist schon mal eine Verfeinerung 2/3 und 58/67

dd:=1;R:=[[1]];D:=DIAG(R); VERFEINERUNG(D);#nix brauchbares
  [ 2, 3 ], 
  [ [ 2, 1 ], [ 3, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ] ], 1 ] ] ]
dd:=2;R:=[[1],[0,0]];D:=DIAG(R); VERFEINERUNG(D);#[ 3, 7, 11, 15 ], [ 4, 8, 12, 16 ]
  [ 2, 1, 0, 0 ], 
  [ [ 0, 2 ], [ 1, 1 ], [ 2, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], 1 ], [ [ [ 1 ], [ 2 ], [ 3, 4 ] ], 1 ] 
     ] ]
dd:=2;R:=[[1],[1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 6 ], [ 3, 7 ], [ 4, 8 ]
  [ 2, 1, 1, 1 ], 
  [ [ 1, 3 ], [ 2, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ] ], 1 ], [ [ [ 1 ], [ 2, 3, 4 ] ], 2 ] ] ]
dd:=3;R:=[[1],[0,0],[1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 10 ], [ 3, 11 ], [ 4, 12 ], [ 5, 13 ], [ 6, 14 ], [ 7, 15 ], [ 8, 16 ]
  [ 2, 1, 0, 0, 1, 1, 3, 0 ], 
  [ [ 0, 3 ], [ 1, 3 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6 ], [ 3, 4, 8 ], [ 7 ] ], 2 ] ] ]
dd:=4;R:=[[1],[0,0],[1,1,1],[0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ]... und [ 2, 6, 5 ], [ 7, 12, 14 ] 
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ], 
  [ [ 0, 9 ], [ 1, 6 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ], 1 ], 
      [ 
          [ [ 1 ], [ 2, 5, 6 ], [ 3, 4, 8, 9, 10, 11, 13, 15, 16 ], 
              [ 7, 12, 14 ] ], 5 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 12, 14 ], [ 3, 4, 8, 9, 10, 11, 13, 15, 16 ] ],
          3 ] ] ]
dd:=4;R:=[[1],[0,0],[1,1,1],[1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ],
  [ 2, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ], 
  [ [ 0, 5 ], [ 1, 10 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 9, 10, 11, 13, 15, 16 ], [ 3, 4, 8, 12, 14 ] ],
          6 ] ] ]
dd:=5;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 34 ], [ 3, 35 ], 
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      3, 0, 1, 1, 0, 0, 0, 1 ], 
  [ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ] ], 1 ], 
      [ [ [ 1 ], [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 27, 28, 32 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31 ], 
              [ 25 ] ], 10 ] ] ]
dd:=6;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
      0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ], 
  [ [ 0, 35 ], [ 1, 28 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  36, 38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 33, 
                  34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 58, 
                  59, 61, 63, 64 ] ], 21 ] ] ]
dd:=6;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[1,1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1 ], 
  [ [ 0, 27 ], [ 1, 36 ], [ 2, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  33, 34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 
                  58, 59, 61, 63, 64 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 36, 
                  38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62 ] ], 24 ] ] ]
dd:=7;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#
  [ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 
      0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 
      1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 
      3, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 
      0, 1, 0, 0, 1, 1, 1, 0 ], 
  [ [ 0, 63 ], [ 1, 63 ], [ 2, 1 ], [ 3, 1 ] ], 
  [ 
      [ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
              [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
              [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], 
              [ 27 ], [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], 
              [ 35 ], [ 36 ], [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], 
              [ 43 ], [ 44 ], [ 45 ], [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], 
              [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], [ 56 ], [ 57 ], [ 58 ], 
              [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ], [ 65 ], [ 66 ], 
              [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], [ 73 ], [ 74 ], 
              [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], [ 82 ], 
              [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], 
              [ 91 ], [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], 
              [ 99 ], [ 100 ], [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], 
              [ 106 ], [ 107 ], [ 108 ], [ 109 ], [ 110 ], [ 111 ], [ 112 ], 
              [ 113 ], [ 114 ], [ 115 ], [ 116 ], [ 117 ], [ 118 ], [ 119 ], 
              [ 120 ], [ 121 ], [ 122 ], [ 123 ], [ 124 ], [ 125 ], [ 126 ], 
              [ 127 ], [ 128 ] ], 1 ], 
      [ 
          [ [ 1 ], 
              [ 2, 5, 6, 7, 12, 14, 17, 18, 19, 21, 23, 24, 25, 27, 28, 32, 
                  36, 38, 42, 45, 46, 47, 50, 53, 54, 55, 60, 62, 65, 66, 67, 
                  69, 71, 72, 73, 75, 76, 80, 81, 83, 84, 88, 89, 90, 91, 93, 
                  95, 96, 99, 100, 104, 105, 106, 107, 109, 111, 112, 116, 
                  118, 122, 125, 126, 127 ], 
              [ 3, 4, 8, 9, 10, 11, 13, 15, 16, 20, 22, 26, 29, 30, 31, 33, 
                  34, 35, 37, 39, 40, 41, 43, 44, 48, 49, 51, 52, 56, 57, 58, 
                  59, 61, 63, 64, 68, 70, 74, 77, 78, 79, 82, 85, 86, 87, 92, 
                  94, 98, 101, 102, 103, 108, 110, 113, 114, 115, 117, 119, 
                  120, 121, 123, 124, 128 ], [ 97 ] ], 29 ] ] ]
dd:=8;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);#

dd:=dd+1; D:=Concatenation(D,D); VERFEINERUNG(D);
                                                                                            a
                                                a                       a           a   a b b
                        a           a     a  b  b           a     a  b  b     a  b  b c c c c
            a     a  b  b     a  b  b  c  c  c  c     a  b  b  c  c  c  c  d  d  d  d d d d d
   e  a  b  b  c  c  c  c  d  d  d  d  d  d  d  d  f  f  f  f  f  f  f  f  f  f  f  f f f f f 
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 0 1 0 0 ]
#     x        x  x  y              y     y           x        x  x  y              y   y
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,0,0,0,1, 
#     x        x  x  y              y     y        x  x  y     X     x  x  y     x  x       y
#  0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1,0,1,0,0 
#           y     y           y        x  x  y        y        x  x  y              y   y

#   a   a   a   a   a   a   a   a    a   a   a   a   a   a   a   a
# 0,x,0,0,x,x,1,0,0,0,0,1,0,1,0,0, x,x,1,0,1,0,x,x,1,0,x,x,0,0,0,1,
# 0,0,0,1,0,1,0,0,0,1,0,0,x,x,1,0, 0,1,0,0,x,x,1,0,0,0,0,1,0,1,0,0,
# 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1, 1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1,
# 1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1, 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,
# 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0, 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,
# 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0, 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,
# 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0, 1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,
# 0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0, 0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0
135,120,1
#×:1, 0, 1, 1, 
#x=[ 2, 6, 5, 22, 21, 18 ], y=[ 7, 12, 14, 28, 30, 23 ], 
a c ac, a f af, a bcf abcf, a bdf abdf, c f cf, c bf bcf,
#statt x^2=0 x^2=2 bei y^2=(yx)^2 für alle y
#statt x^2=1 x^2=3 bei y^2!=(yx)^2 für alle y

#x×y=x·1·y
#1×1=1
#0×0=1

#x×y=x·a^-1·y
#a×a=a also neutrales Element
#e×e=a^-1=a

#gebraucht wird sowas wie wenn x^2=y^2=1 und (xy)^2!=0, darf aber 0^_ sein

MARKZAHL:=function(G)
  local x,y,MERK,n,a,e;
  MERK:=[0,0,0,0];
  e:=Identity(G);
  n:=Size(G);
  for x in G do
    a:=true;
    if x^2=e then
      for y in G do if a then if not y^2=(y*x)^2 then a:=false; fi; fi; od;
      if a then MERK[3]:=MERK[3]+1; else MERK[1]:=MERK[1]+1; fi;
      else
        for y in G do if a then if y^2=(y*x)^2 then a:=false; fi; fi; od;
        if a then MERK[4]:=MERK[4]+1; else MERK[2]:=MERK[2]+1; fi;
        fi;
    od;
  g:=Gcd(MERK);
  MERK:=MERK/g;
  return [g,Reversed(SortedList(MERK)),MERK];
  end;
G:=SmallGroup(256,56082);
MARKZAHL(G);

MARKZAHL:=function(G)
  local x,y,MERK,MGES,n,a,e;
  MGES:=[];
  e:=Identity(G);
  n:=Size(G);
  for x in G do
    MERK:=[];
    for y in G do Add(MERK,[x^2,y^2,(x*y)^2]); od;
    Add(MGES,Collected(MERK));
    od;
#[ [ [ [ 112, 128, 112 ], 112 ], [ [ 144, 128, 144 ], 140 ], [ [ 144, 256, 144 ], 4 ] ] ]
  MGES:=Reversed(SortedList(List(Collected(MGES),i->i[2])));
  g:=Gcd(MGES);
  return [g,MGES/g];
  end;
G:=SmallGroup(256,56082);
MARKZAHL(G);
  
MARKZAHL:=function(G)
  local i,x,y,MERK,n,a,e;
  MERK:=[0,0,0,0];
  e:=Identity(G);
  n:=Size(G);
  for x in G do
    a:=true;
    if x^2=e then
      for y in G do if a then if not y^2=(y*x)^2 then a:=false; fi; fi; od;
      if a then MERK[3]:=MERK[3]+1; else MERK[1]:=MERK[1]+1; fi;
      else
        for y in G do if a then if y^2=(y*x)^2 then a:=false; fi; fi; od;
        if a then MERK[4]:=MERK[4]+1; else MERK[2]:=MERK[2]+1; fi;
        fi;
    od;
  MARK:=Reversed(SortedList(MERK/Gcd(MERK)));
  for i in [1..4] do if MARK[i]=0 then Unbind(MARK[i]); fi; od;
  return MARK;
  end;

MARKZAHL:=function(G)
  local i,x,y,MERK,n,a,e,u,v;
  MERK:=[0,0,0,0];
  e:=Identity(G);
  n:=Size(G);
  SG:=SmallGeneratingSet(G);
  for x in G do
    a:=true;
    if x^2=e then
      for u in SG do for v in SG do if a then y:=u*v; if not y^2=(y*x)^2 then a:=false; fi; fi; od; od;
      if a then MERK[3]:=MERK[3]+1; else MERK[1]:=MERK[1]+1; fi;
      else
        for u in SG do for v in SG do if a then y:=u*v; if y^2=(y*x)^2 then a:=false; fi; fi; od; od;
        if a then MERK[4]:=MERK[4]+1; else MERK[2]:=MERK[2]+1; fi;
        fi;
    od;
  MARK:=Reversed(SortedList(MERK/Gcd(MERK)));
  for i in [1..4] do if MARK[i]=0 then Unbind(MARK[i]); fi; od;
  return MARK;
  end;

relative_Anzahl_der_Markierungen_n1_n0_m1_m0:=function(G)
  local RET,e,erster_Faktor,zweiter_Faktor,wird_markiert,x,y,u,v;
  if Size(G)<>2^LogInt(Size(G),2) then Error("Size(G)<>2^n"); fi;
  if PClassPGroup(G)<>2 then Error("PClass<>2"); fi;
  if Size(PRump(G,2))<>2 then Error("nur Folge a_n=1, 3, 4, 6, 7, 9, 10, 12, 13,..."); fi;
  RET:=[0,0,0,0];                           #Rückgabearray für [n1,n0,m1,m0]
  e:=Identity(G);                           #neutrales Element von Gruppe G
  erster_Faktor:=SmallGeneratingSet(G);     #irgendein beliebiges kleines Erzeugendensystem von G
  zweiter_Faktor:=List(erster_Faktor);      #Kopie von erster_Faktor
  Add(zweiter_Faktor,e,1);                  #zusätzlich neutrales Element einfügen
  for x in G do
    wird_markiert:=true;
    if x^2<>e then #x^2=1
      for u in erster_Faktor do for v in zweiter_Faktor do 
        if wird_markiert=true then y:=u*v; if y^2=(y*x)^2 then wird_markiert:=false; fi; fi; 
        od; od;
      if wird_markiert=true then RET[3]:=RET[3]+1; else RET[1]:=RET[1]+1; fi;    #aktualisiert m1 und n1
      else #x^2=0
        for u in erster_Faktor do for v in zweiter_Faktor do 
          if wird_markiert=true then y:=u*v; if y^2<>(y*x)^2 then wird_markiert:=false; fi; fi; 
          od; od;
        if wird_markiert=true then RET[4]:=RET[4]+1; else RET[2]:=RET[2]+1; fi;  #aktualisiert m0 und n0
        fi;
    od;
  RET:=RET/RET[4];   #[n1/m0,n0/m0,m1/m0,m0/m0]
  return RET;
  end;

G:=SmallGroup(256,56082);
MARKZAHL(G);

SmallGroupsInformation(256);
for n in [2..9] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index); #index aus SmallGroupsInformations(2^n);
    Print(IdSmallGroup(G),", ",relative_Anzahl_der_Markierungen_n1_n0_m1_m0(G),",\n");
    od;
  od;time;#15121#440

[ 4, 1 ], [ 0, 0, 1, 1 ],
[ 8, 2 ], [ 0, 0, 1, 1 ],
[ 8, 3 ], [ 2, 0, 1, 1 ],
[ 8, 4 ], [ 0, 2, 1, 1 ],
[ 16, 10 ], [ 0, 0, 1, 1 ],
[ 16, 11 ], [ 2, 1, 1, 0 ],
[ 16, 12 ], [ 0, 3, 1, 0 ],
[ 16, 13 ], [ 3, 3, 1, 1 ],
[ 32, 45 ], [ 0, 0, 1, 1 ],
[ 32, 46 ], [ 2, 1, 1, 0 ],
[ 32, 47 ], [ 0, 3, 1, 0 ],
[ 32, 48 ], [ 3, 3, 1, 1 ],
[ 32, 49 ], [ 9, 5, 1, 1 ],
[ 32, 50 ], [ 2, 5, 1, 0 ],
[ 64, 260 ], [ 0, 0, 1, 1 ],
[ 64, 261 ], [ 2, 1, 1, 0 ],
[ 64, 262 ], [ 0, 3, 1, 0 ],
[ 64, 263 ], [ 3, 3, 1, 1 ],
[ 64, 264 ], [ 9, 6, 1, 0 ],
[ 64, 265 ], [ 5, 10, 1, 0 ],
[ 64, 266 ], [ 15, 15, 1, 1 ],
[ 128, 2319 ], [ 0, 0, 1, 1 ],
[ 128, 2320 ], [ 2, 1, 1, 0 ],
[ 128, 2321 ], [ 0, 3, 1, 0 ],
[ 128, 2322 ], [ 3, 3, 1, 1 ],
[ 128, 2323 ], [ 9, 6, 1, 0 ],
[ 128, 2324 ], [ 5, 10, 1, 0 ],
[ 128, 2325 ], [ 15, 15, 1, 1 ],
[ 128, 2326 ], [ 17, 14, 1, 0 ],
[ 128, 2327 ], [ 13, 18, 1, 0 ],
[ 256, 56082 ], [ 0, 0, 1, 1 ],
[ 256, 56083 ], [ 2, 1, 1, 0 ],
[ 256, 56084 ], [ 0, 3, 1, 0 ],
[ 256, 56085 ], [ 3, 3, 1, 1 ],
[ 256, 56086 ], [ 9, 6, 1, 0 ],
[ 256, 56087 ], [ 5, 10, 1, 0 ],
[ 256, 56088 ], [ 15, 15, 1, 1 ],
[ 256, 56089 ], [ 35, 28, 1, 0 ],
[ 256, 56090 ], [ 27, 36, 1, 0 ],
[ 256, 56091 ], [ 63, 63, 1, 1 ], #89 mit cocalc #464 mit RPI4
[ 512, 10494201 ], [ 0, 0, 1, 1 ],
[ 512, 10494202 ], [ 2, 1, 1, 0 ],
[ 512, 10494203 ], [ 0, 3, 1, 0 ],
[ 512, 10494204 ], [ 3, 3, 1, 1 ],
[ 512, 10494205 ], [ 9, 6, 1, 0 ],
[ 512, 10494206 ], [ 5, 10, 1, 0 ],
[ 512, 10494207 ], [ 15, 15, 1, 1 ],
[ 512, 10494208 ], [ 35, 28, 1, 0 ],
[ 512, 10494209 ], [ 27, 36, 1, 0 ],
[ 512, 10494210 ], [ 63, 63, 1, 1 ],
[ 512, 10494211 ], [ 67, 60, 1, 0 ],
[ 512, 10494212 ], [ 59, 68, 1, 0 ],
236 #mit cocalc

MARKZAHL_CHECK:=function(G)
  if Size(G)<>2^LogInt(Size(G),2) then Error("Size(G)<>2^n"); fi;
  if PClassPGroup(G)<>2 then Error("PClass<>2"); fi;
  return MARKZAHL(G);
  end;

TABELLE:=[
[ 4, 1 ], [ 2, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 8, 2 ], [ 4, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 8, 3 ], [ 2, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 8, 4 ], [ 2, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 16, 10 ], [ 8, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 16, 11 ], [ 4, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 16, 12 ], [ 4, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 16, 13 ], [ 2, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 32, 45 ], [ 16, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 32, 46 ], [ 8, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 32, 47 ], [ 8, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 32, 48 ], [ 4, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 32, 49 ], [ 2, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 32, 50 ], [ 2, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 64, 260 ], [ 32, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 64, 261 ], [ 16, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 64, 262 ], [ 16, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 64, 263 ], [ 8, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 64, 264 ], [ 4, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 64, 265 ], [ 4, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 64, 266 ], [ 2, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 128, 2319 ], [ 64, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 128, 2320 ], [ 32, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 128, 2321 ], [ 32, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 128, 2322 ], [ 16, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 128, 2323 ], [ 8, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 128, 2324 ], [ 8, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 128, 2325 ], [ 4, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 128, 2326 ], [ 2, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 128, 2327 ], [ 2, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 256, 56082 ], [ 128, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 256, 56083 ], [ 64, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 256, 56084 ], [ 64, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 256, 56085 ], [ 32, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 256, 56086 ], [ 16, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 256, 56087 ], [ 16, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 256, 56088 ], [ 8, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 256, 56089 ], [ 4, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 256, 56090 ], [ 4, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 256, 56091 ], [ 2, [ 63, 63, 1, 1 ], [ 63, 63, 1, 1 ] ],
[ 512, 10494201 ], [ 256, [ 1, 1, 0, 0 ], [ 0, 0, 1, 1 ] ],
[ 512, 10494202 ], [ 128, [ 2, 1, 1, 0 ], [ 2, 1, 1, 0 ] ],
[ 512, 10494203 ], [ 128, [ 3, 1, 0, 0 ], [ 0, 3, 1, 0 ] ],
[ 512, 10494204 ], [ 64, [ 3, 3, 1, 1 ], [ 3, 3, 1, 1 ] ],
[ 512, 10494205 ], [ 32, [ 9, 6, 1, 0 ], [ 9, 6, 1, 0 ] ],
[ 512, 10494206 ], [ 32, [ 10, 5, 1, 0 ], [ 5, 10, 1, 0 ] ],
[ 512, 10494207 ], [ 16, [ 15, 15, 1, 1 ], [ 15, 15, 1, 1 ] ],
[ 512, 10494208 ], [ 8, [ 35, 28, 1, 0 ], [ 35, 28, 1, 0 ] ],
[ 512, 10494209 ], [ 8, [ 36, 27, 1, 0 ], [ 27, 36, 1, 0 ] ],
[ 512, 10494210 ], [ 4, [ 63, 63, 1, 1 ], [ 63, 63, 1, 1 ] ],
[ 512, 10494211 ], [ 2, [ 135, 120, 1, 0 ], [ 135, 120, 1, 0 ] ],
[ 512, 10494212 ], [ 2, [ 136, 119, 1, 0 ], [ 119, 136, 1, 0 ] ],
];

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",Size(OrbitsDomain(AutomorphismGroup(G),G)),",\n");
    od;
  od;

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",RelatorsOfFpGroup(Image(IsomorphismFpGroup(G))),",\n");
    od;
  od;
[ 256, 56091 ], [ F1^2, F2^-1*F1^-1*F2*F1*F8^-1, F3^-1*F1^-1*F3*F1, 
  F4^-1*F1^-1*F4*F1, F5^-1*F1^-1*F5*F1, F6^-1*F1^-1*F6*F1*F8^-1, 
  F7^-1*F1^-1*F7*F1, F8^-1*F1^-1*F8*F1, F2^2, F3^-1*F2^-1*F3*F2, 
  F4^-1*F2^-1*F4*F2, F5^-1*F2^-1*F5*F2*F8^-1, F6^-1*F2^-1*F6*F2, 
  F7^-1*F2^-1*F7*F2, F8^-1*F2^-1*F8*F2, F3^2, F4^-1*F3^-1*F4*F3*F8^-1, 
  F5^-1*F3^-1*F5*F3, F6^-1*F3^-1*F6*F3, F7^-1*F3^-1*F7*F3, F8^-1*F3^-1*F8*F3, 
  F4^2, F5^-1*F4^-1*F5*F4, F6^-1*F4^-1*F6*F4, F7^-1*F4^-1*F7*F4, 
  F8^-1*F4^-1*F8*F4, F5^2, F6^-1*F5^-1*F6*F5, F7^-1*F5^-1*F7*F5, 
  F8^-1*F5^-1*F8*F5, F6^2, F7^-1*F6^-1*F7*F6, F8^-1*F6^-1*F8*F6, F7^2*F8^-1, 
  F8^-1*F7^-1*F8*F7, F8^2 ],

1
0 0
0 0 0
0 0 0 0
0 0 0 0 1
0 0 0 1 0 0
0 0 1 0 0 0 1

1
0 1
0 1 0
0 1 0 0
0 1 0 0 1
0 1 0 1 0 0
0 1 1 0 0 0 1

R:=[[1],[0,1],[0,1,0],[0,1,0,0],[0,1,0,0,1],[0,1,0,1,0,0],[0,1,1,0,0,0,1]];
D:=DIAG(R);

for n in [2..8] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print(IdSmallGroup(G),", ",Size(ConjugacyClasses(G)),",\n");
    od;
  od;

for n in [2..5] do
  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
    G:=SmallGroup(2^n,index);
    Print("\n-------------------------\n",IdSmallGroup(G),",\n");
    Display(CharacterTable(G));
    od;
  od;

F:=FreeGroup("e","f","a","b","c","d");AssignGeneratorVariables(F);
R:=ParseRelators([e,f,a,b,c,d],"e^2=e, f^2=e, \
  a^2=f, \
  b^2=(a*b)^2=e,  \
  c^2=(a*c)^2=(b*c)^2=f, \
  d^2=(a*d)^2=(b*d)^2=(c*d)^2=f \
  ");
G:=F/R;
IdSmallGroup(G);
T:=CharacterTable(G);Display(T);

F:=FreeGroup("e","f","a","b","c","d","g","h");AssignGeneratorVariables(F);
R:=ParseRelators([e,f,a,b,c,d,g,h],"e^2=e, f^2=e, \
  a^2=f, \
  b^2=(a*b)^2=e,  \
  c^2=(a*c)^2=(b*c)^2=f, \
  d^2=(a*d)^2=(b*d)^2=(c*d)^2=f, \
  g^2=e^2, (a*g)^2=a^2, (b*g)^2=b^2, (c*g)^2=c^2, (d*g)^2=d^2, \
  h^2=e^2, (a*h)^2=a^2, (b*h)^2=b^2, (c*h)^2=c^2, (d*h)^2=d^2, (d*h)^2=d^2 \
  ");
G:=F/R;
P:=Image(IsomorphismPermGroup(G));
IdSmallGroup(P);
T:=CharacterTable(G);Display(T);

##################################aus AAAAHAY: 6, 168, 21060, 9999360, 
#                                               a                       a           a   a b b
#                       a           a     a  b  b           a     a  b  b     a  b  b c c c c
#           a     a  b  b     a  b  b  c  c  c  c     a  b  b  c  c  c  c  d  d  d  d d d d d
#  e  a  b  b  c  c  c  c  d  d  d  d  d  d  d  d  f  f  f  f  f  f  f  f  f  f  f  f f f f f 
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 0 1 0 0 ]
#  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 9 0 1 2
 [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,0,0,0,1 ]
   -  z        x  x  y              y     y        x  x  y     y     x  x  -     x  x       y
   -  w        w  w                                v  u              v  u  -     u  v
 2( 2,27,12,21, 5)( 3,20,13,29,26)( 4,10, 8, 9,30)( 6,28,18,32,17)( 7,19,23,24,14)(11,15,16,22,31)

Gb:=Group(
  (2,3),
  (2,4)
  );
Size(Gb); #6

Gc:=Group(
  (2,3,5)(4,7,6),
  (2,4)(6,8)
  );
Size(Gc); #168

Gd:=Group(
  (2,3,5,9)(4,7,13,10)(6,11)(8,15,14,12),
  (2,4)(6,8)(10,12)(14,16)
  );
Size(Gd); #20160

Gf:=Group(
  (2,3,5,9,17)(4,7,13,25,18)(6,11,21,10,19)(8,15,29,26,20)(12,23,14,27,22)(16,31,30,28,24),
  (2,4)(6,8)(10,12)(14,16)(18,20)(22,24)(26,28)(30,32)
  );
Size(Gf); #9999360

dd:=6;
AUT_A:=function(dd)
  L:=[]; for i in [1..2^dd] do L[i]:=((2*(i-1)) mod (2^dd-1))+1; od; Remove(L);
  P1:=PermList(L);
  P2:=();  for i in [1..2^(dd-2)] do P2:=P2*(4*i-2,4*i); od;
  return Group(P1,P2);
  end;

Gg:=AUT_A(6);
Gh:=AUT_A(7);
Gk:=AUT_A(8);

OSf:=OrbitStabilizer(Gf,[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0],Permuted);;
Orbit(OSf.stabilizer,2);
Orbits(OSf.stabilizer,[1..32]);

dd:=3;
R:=[[1],[0,0],[1,1,1]];
D:=DIAG(R); 
G:=AUT_A(dd);
O0:=Orbit(G,D,Permuted);;Size(O0);
S1:=Stabilizer(G,D,Permuted);;Size(S1);#6
[ [ "1", "3", "5" ], 
  [ "4", "3", "5" ] ]

[ "5", "7", "1", "8", "10", "20", "40", "80", "100", "200", "400" ]
[ "5", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400" ]
[ (2,6,5)(3,8,4), (2,6)(4,8) ]
O1:=Orbits(S1,[1..8]);#[ 1 ], [ 2, 6, 5 ], [ 3, 4, 8 ], [ 7 ]
S2:=Stabilizer(S1,O1[2][1]);;Size(S2);#2
[ (3,4)(5,6) ]
O2:=Orbits(S2,O1[2]);#[ 2 ], [ 5, 6 ]
S3:=Stabilizer(S2,O2[2][1]);;Size(S3);#1

dd:=5;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];
D:=DIAG(R); 
G:=AUT_A(dd);
O0:=Orbit(G,D,Permuted);;Size(O0);
S1:=Stabilizer(G,D,Permuted);;Size(S1);#720

LL:=["e","a","b","ab","c","ac","bc","abc","d","ad","bd","abd","cd","acd","bcd","abcd",
     "f","af","bf","abf","cf","acf","bcf","abcf","df","adf","bdf","abdf","cdf","acdf","bcdf","abcdf"];
LLL:=[];
for i in [1..720] do LLL[i]:=List(OnTuples([2,3,5,9,17],List(S1)[i]),k->LL[k]),"\n"); od;
for i in [1..720] do if Order(List(S1)[i])=2 then Print(i,List(OnTuples([2,3,5,9,17],List(S1)[i]),k->LL[k]),"\n"); fi; od;
197[ "bdf", "adf", "abd", "abc", "abcdf" ]
211[ "a", "ab", "ac", "ad", "af" ]
for i in [1..720] do if Size(Group(List(S1)[211],List(S1)[i]))=720 and Order(List(S1)[i])=5 then Print(i,List(S1)[i],"\n"); fi; od;
111( 2,24)( 4,22)( 5,19)( 7,17)( 9,31)(11,29)(14,28)(16,26)
121( 5,23)( 6,24)( 7,21)( 8,22)(13,31)(14,32)(15,29)(16,30)
151( 3,16)( 4,15)( 7,12)( 8,11)(19,32)(20,31)(23,28)(24,27)
361( 9,15)(10,16)(11,13)(12,14)(17,23)(18,24)(19,21)(20,22)
634( 2,23)( 3,22)( 6,19)( 7,18)(10,31)(11,30)(14,27)(15,26)
 2( 2,27,12,21, 5)( 3,20,13,29,26)( 4,10, 8, 9,30)( 6,28,18,32,17)( 7,19,23,24,14)(11,15,16,22,31)
 5( 2,12, 5,27,21)( 3,13,26,20,29)( 4, 8,30,10, 9)( 6,18,17,28,32)( 7,23,14,19,24)(11,16,31,15,22)
14( 2,19,18,23,21)( 3,22,20, 4, 8)( 5, 6,24, 7,17)( 9,29,30,16,31)(10,15,13,26,11)(12,28,32,27,14)
18( 2, 6,21,12,28)( 3,29,10, 8, 9)( 4,26,30,13,20)( 5,18,32,17,27)( 7,14,23,24,19)(11,31,22,15,16)
for i in [1..720] do if Size(Group(List(S1)[211],List(S1)[i]))=720 then Print(i,List(OnTuples([2,3,5,9,17],List(S1)[i]),k->LL[k]),"\n"); fi; od;
a bdf, b abf, c a, d acdf, f ac
163[ "af", "cd", "a", "b", "bdf" ]
187[ "c", "ab", "cf", "bd", "bf" ]
189[ "f", "ab", "bc", "cd", "cf" ]
230[ "abd", "ab", "af", "cd", "cf" ]
457[ "c", "d", "abcdf", "acdf", "ac" ]
460[ "cf", "abc", "bc", "ad", "af" ]
494[ "bf", "acf", "cf", "acdf", "ac" ]


[ [ "1", "2", "4", "E", "16" ], 
  [ "1", "2","10", "E", "16" ], 
  [ "1", "3", "5", "9", "11" ], 
  [ "1", "8", "5", "2", "1A" ], 
  [ "4", "3", "5", "A", "12" ] ]
[ "14", "1C", "11", "13", "B", "20", "40", "80", "100", "200", "400" ]
[ "16", "8", "17", "A", "12", "20", "40", "80", "100", "200", "400" ]
[ "4", "C", "1", "3", "1B", "20", "40", "80", "100", "200", "400" ]
[ "6", "15", "10", "C", "14", "20", "40", "80", "100", "200", "400" ]
[ "D", "3", "17", "1E", "6", "20", "40", "80", "100", "200", "400" ]
[ "1F", "1D", "B", "15", "D", "20", "40", "80", "100", "200", "400" ]
[ "5", "A", "1", "9", "11", "20", "40", "80", "100", "200", "400" ]
[ "D", "2", "12", "E", "16", "20", "40", "80", "100", "200", "400" ]
[ "10", "9", "1B", "1C", "4", "20", "40", "80", "100", "200", "400" ]
[ "1F", "1C", "D", "2", "1A", "20", "40", "80", "100", "200", "400" ]
[ (2,24,18)(3,30)(4,11,20,29,22,13)(5,14,21,28,19,12)(6,27)(7,17,23)(9,15,
    31)(10,26,16), (2,28,17,23)(3,20,31,16)(4,9,15,26)(6,32,21,19)(7,24,27,
    12)(8,13,11,30)(10,22)(14,18) ]
O1:=Orbits(S1,[1..32]);#[ 2, 27, 6, 23, 12, 24, 5, 28, 17, 21, 7, 14, 18, 19, 32 ]
S2:=Stabilizer(S1,O1[2][1]);;Size(S2);#48
[ (9,15)(10,16)(11,13)(12,14)(17,23)(18,24)(19,21)(20,22), 
  (3,9,16,29)(4,10,15,30)(5,27,17,24)(6,28,18,23)(7,19,32,12)(8,20,31,11)(13,
    22)(14,21) ]
O2:=Orbits(S2,O1[2]);#[ 2 ], [ 5, 23, 28, 6, 17, 27, 24, 18 ], [ 7, 21, 12, 19, 14, 32 ]
S3:=Stabilizer(S2,O2[2][1]);;Size(S3);#6
[ (9,15)(10,16)(11,13)(12,14)(17,23)(18,24)(19,21)(20,22), 
  (3,16)(4,15)(7,12)(8,11)(19,32)(20,31)(23,28)(24,27) ]
O3:=Orbits(S3,O2[2]);#[ 5 ], [ 6 ], [ 17, 23, 28 ], [ 18, 24, 27 ]
S4:=Stabilizer(S3,O3[3][1]);;Size(S4);#2
[ (3,16)(4,15)(7,12)(8,11)(19,32)(20,31)(23,28)(24,27) ]
O4:=Orbits(S4,O3[3]);#[ 17 ], [ 23, 28] 
S5:=Stabilizer(S4,O4[2][1]);;Size(S5);#1

dd:=7;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(G,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#1451520
for i in [1..720] do if Order(List(S1)[i])=2 then Print(i,List(S1)[i],"\n"); fi; od;
for i in [1..720] do if Size(Group(List(S1)[151],List(S1)[i]))=720 and Order(List(S1)[i])=5 then Print(i,List(S1)[i],"\n"); fi; od;
[ [ "1", "2", "4", "8", "10", "38", "58" ], 
  [ "1", "2", "4", "8", "40", "38", "58" ], 
  [ "1", "2", "4", "E", "16", "26", "46" ], 
  [ "1", "2", "4","20", "16",  "8", "68" ], 
  [ "1", "2","10", "E", "16", "2A", "4A" ], 
  [ "1", "3", "5", "9", "11", "21", "41" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A" ], 
  [ "4", "3", "5", "A", "12", "22", "42" ] ]

[ "4A", "54", "50", "76", "29", "74", "14", "80", "100", "200", "400" ]
[ "6F", "26", "62", "51", "41", "4D", "2D", "80", "100", "200", "400" ]
[ "14", "3F", "4A", "49", "67", "45", "25", "80", "100", "200", "400" ]
[ "3B", "43", "5C", "39", "47", "37", "57", "80", "100", "200", "400" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#23040
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#720
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#48
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#6
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#2
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#1

dd:=9;
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#47377612800
[ [ "1", "2", "4", "8", "10", "20", "40", "E0", "160" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160" ], 
  [ "1", "2", "4", "8", "10", "38", "58", "98", "118" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58", "A8", "128" ], 
  [ "1", "2", "4", "E", "16", "26", "46", "86", "106" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128" ], 
  [ "1", "2","10", "E", "16", "2A", "4A", "8A", "10A" ], 
  [ "1", "3", "5", "9", "11", "21", "41", "81", "101" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A" ], 
  [ "4", "3", "5", "A", "12", "22", "42", "82", "102" ] ]

[ "2C", "3F", "15E", "BE", "9B", "A3", "155", "174", "F4", "200", "400" ]
[ "5C", "19", "B", "7", "67", "BE", "100", "81", "101", "200", "400" ]
[ "B1", "76", "155", "18B", "D2", "1E0", "1F8", "1C7", "47", "200", "400" ]
[ "160", "AA", "14C", "74", "C4", "DD", "6F", "3A", "1BA", "200", "400" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 5, 6, 27
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#185794560
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#1451520
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#23040
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 353, 257, 281, 503 ...] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#720
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, ...] 
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#48
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ...]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#6
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#2
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#1

dd:=11; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#24815256521932800
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580"*], 

  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0" ], 

  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428" ], 

  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A" ], 
#    a    b    c    d     f     g     h     k      l      m      n
#    a    b    c  bcd   bcf   bcg   bch   bck    bcl    bcm    bcn
#    a    b    c    g   bcf     d   dgh   dgk    dgl    dgm    dgn
#    a    b    f  bcd   bcf   bdg   bdh   bdk    bdl    bdm    bdn

  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402" ] ]

[ "1A1", "55C", "AB", "67C", "1B7", "7C9", "6E7", "7EB", "71D", "289", "489" ]
[ "745", "51B", "46B", "75C", "D7", "611", "389", "53B", "1D6", "6D1", "D1" ]
[ "2A9", "E1", "714", "5BB", "1D4", "300", "5C7", "332", "51D", "EB", "6EB" ]
[ "32D", "739", "578", "485", "460", "4E0", "112", "2ED", "35", "77C", "17C" 
[ "45C", "1EC", "59F", "288", "1B3", "11B", "2CF", "6D2", "6C8", "309", "509" ]
[ "54C", "41B", "33D",  "C2", "6E8",  "4D", "4ED",  "81", "1BC", "2C3", "4C3" ]
[ "3E9", "6DF", "107", "56A", "66B", "432", "69F", "262", "786", "5ED", "3ED" ]
[ "1",   "2",   "4",   "8",    "10",  "20",  "40",  "80", "100", "380", "580" ]
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 2024, 32, 28, 27, 104, 1952, 1980, 100,
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#24257337753600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 27, 1948, 2019, 1947, 
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#47377612800
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 2025, 1937, 2031,
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#185794560
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 238, 142, 1902, 814,
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#1451520
O6:=Orbits(S5,O5[2]);#[ 23 ],[ 28, 2020, 100, 508,
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#23040
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ...]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#720
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ...], [ 150, 246 ...]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#48
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1230, 1902, 
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#6
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622 ...]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#2
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 1358 ]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#1

dd:=13; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#24815256521932800
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "E00", "1600" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200","1000", "E00", "1600"*], 

  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580", "980", "1180" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "800", "580", "200", "1A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580",*"A80", "1280" ], 

  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460", "860", "1060" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680", "A80", "1280" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0", "8A0", "10A0" ], 

  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418", "818", "1018" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0", "8A0", "10A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428", "828", "1028" ], 

  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406", "806", "1006" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428", "828", "1028" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A" ], 

  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401", "801", "1001" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402", "802", "1002" ] ]

dd:=15; #zuvor ERWIND für dmax:=15 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#27930968965434591767112450048000
[ [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "800", "1000", "3800", "5800" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "800", "4000", "3800", "5800"*], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400", "E00", "1600", "2600", "4600" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200", "400","2000", "1600",  "800", "6800" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "200","1000", "E00", "1600",*"2A00", "4A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "380", "580", "980", "1180", "2180", "4180" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "100", "800", "580", "200", "1A00", "2A00", "4A00" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "80", "400", "380", "580",*"A80", "1280", "2280", "4280" ], 
  [ "1", "2", "4", "8", "10", "20", "40", "E0", "160", "260", "460", "860", "1060", "2060", "4060" ], 
  [ "1", "2", "4", "8", "10", "20", "40","200", "160",  "80", "680", "A80", "1280", "2280", "4280" ], 
  [ "1", "2", "4", "8", "10", "20","100", "E0", "160",*"2A0", "4A0", "8A0", "10A0", "20A0", "40A0" ], 
  [ "1", "2", "4", "8", "10", "38", "58", "98", "118", "218", "418", "818", "1018", "2018", "4018" ], 
  [ "1", "2", "4", "8", "10", "80", "58", "20", "1A0", "2A0", "4A0", "8A0", "10A0", "20A0", "40A0" ], 
  [ "1", "2", "4", "8", "40", "38", "58",*"A8", "128", "228", "428", "828", "1028", "2028", "4028" ], 
  [ "1", "2", "4", "E", "16", "26", "46", "86", "106", "206", "406", "806", "1006", "2006", "4006" ], 
  [ "1", "2", "4","20", "16",  "8", "68", "A8", "128", "228", "428", "828", "1028", "2028", "4028" ], 
  [ "1", "2","10", "E", "16",*"2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A", "200A", "400A" ], 
  [ "1", "3", "5", "9", "11", "21", "41", "81", "101", "201", "401", "801", "1001", "2001", "4001" ], 
  [ "1", "8", "5", "2", "1A", "2A", "4A", "8A", "10A", "20A", "40A", "80A", "100A", "200A", "400A" ], 
  [ "4", "3", "5",*"A", "12", "22", "42", "82", "102", "202", "402", "802", "1002", "2002", "4002" ] ]

V:=GeneratorsSmallest(S1);
List([1..Size(V)],j->List(OnTuples(List([1..dd],k->2^(k-1)+1),V[j]),i->HexStringInt(i-1)));


dd:=2;
R:=[[1],[0,0]];
D:=DIAG(R); 
Gd:=AUT_A(dd);
O1:=Orbit(Gd,D,Permuted);;Size(O1);
S1:=Stabilizer(Gd,D,Permuted);;Size(S1);#72

dd:=4;
D:=[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0];
Gd:=AUT_A(dd);
O1:=Orbit(Gd,D,Permuted);;Size(O1);
S1:=Stabilizer(Gd,D,Permuted);;Size(S1);#72
O2:=Orbits(S1,[1..16]);#[ 1 ], [ 2, 14, 6, 7, 5, 12 ], [ 3, 16, 11, 13, 8, 9, 10, 4, 15 ] 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#12
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 6 ], [ 7, 12, 14 ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#6
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ]
S4:=Stabilizer(S3,O2[3][1]);;Size(S4);#2
O5:=Orbits(S4,O3[3]);#[ 7 ], [ 12, 14 ]
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#1

dd:=4; O0:=[1..2^dd]; #nochmal dd:=4;
R:=[[1],[0,0],[1,1,1],[0,0,0,0]];
D:=DIAG(R); 
D:=[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0];
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
GA:=AUT_A(dd);
#O1:=Orbit(Gd,D,Permuted);;Size(O1);
#O1:=Orbit(Gd,D,Permuted);;Size(O1);
#S1:=Stabilizer(GA,D,Permuted);;Size(S1);#72
#S1:=Stabilizer(GA,[D0,D1],OnTuplesSets);;Size(S1);#72
S1:=Stabilizer(GA,D1,OnSets);;Size(S1);#72
O1:=Orbits(S1,O0);#[ [ 1 ], [ 2, 5, 7, 6, 12, 14 ], [ 3, 4, 16, 10, 13, 15, 9, 11, 8 ] ]
S2:=Stabilizer(S1,2);;Size(S2);#12
O2:=Orbits(S2,O0);#[ [ 1 ], [ 2 ], [ 3, 4, 16, 10, 15, 9 ], [ 5, 6 ], [ 7, 12, 14 ], [ 8, 11, 13 ] ]
S3:=Stabilizer(S2,5);;Size(S3);#6
O3:=Orbits(S3,O0);#[ [ 1 ], [ 2 ], [ 3, 10, 16 ], [ 4, 9, 15 ], [ 5 ], [ 6 ], [ 7, 14, 12 ], [ 8, 13, 11 ] ]
S4:=Stabilizer(S3,7);;Size(S4);#2
O4:=Orbits(S4,O0);#[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9, 15 ], [ 10, 16 ], [ 11, 13 ], [ 12, 14 ] ]
S5:=Stabilizer(S4,12);;Size(S5);#1
O5:=Orbits(S5,O0);#[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ]

TATA:=function(D,S)
  nn:=Size(D); dd:=LogInt(nn,2); O:=[1..nn];
  D1:=[]; D0:=[]; for i in [2..nn] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od;
  GA:=AUT_A(dd);
  SI:=Stabilizer(GA,D1,OnSets);
  OI:=Orbits(SI,O);
  Print(Size(SI)," ",OI,"\n");
  for s in S do
    SI:=Stabilizer(SI,s);    
    OI:=Orbits(SI,O);
    Print(s," ",Size(SI)," ",OI,"\n");
    od;
  end;
TATA(D,[2,5,7,12]);
TATA(D,[2,3, 9]);
72 [ [ 1 ], [ 2, 5, 7, 6, 12, 14 ], [ 3, 4, 16, 10, 13, 15, 9, 11, 8 ] ]
2 12 [ [ 1 ], [ 2 ], [ 3, 4, 16, 10, 15, 9 ], [ 5, 6 ], [ 7, 12, 14 ], 
  [ 8, 11, 13 ] ]
3 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9, 15 ], 
  [ 10, 16 ], [ 11, 13 ], [ 12, 14 ] ]
9 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ] ]

dd:=6; O0:=[1..2^dd];
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0]];
D:=DIAG(R); 
GA:=AUT_A(dd);
#S1:=Stabilizer(Gg,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
//S1:=Stabilizer(GA,[D0,D1],OnTuplesSets);;Size(S1);#40320
S1:=Stabilizer(GA,D1,OnSets);;Size(S1);#40320
O1:=Orbits(S1,O0);#
S2:=Stabilizer(S1,2);;Size(S2);#1440
O2:=Orbits(S2,O0);
S3:=Stabilizer(S2,5);;Size(S3);#120
O3:=Orbits(S3,O0);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,17);;Size(S4);#24
O4:=Orbits(S4,O0);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,23);;Size(S5);#6
O6:=Orbits(S5,O0);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,28);;Size(S6);#2
O7:=Orbits(S6,O0);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,46);;Size(S7);#1
O8:=Orbits(S7,O0);#[ 46 ], [ 54 ]

TATA(D,[2,3, 5, 9,33]);
40320 
[ [ 1 ], [ 2, 5, 6, 27, 28, 53, 54, 50, 24, 45, 42, 23, 46, 32, 19, 18, 21, 
      55, 17, 47, 14, 12, 25, 38, 36, 7, 62, 60 ], 
  [ 3, 4, 29, 64, 51, 10, 13, 30, 63, 52, 9, 16, 58, 61, 34, 11, 37, 40, 39, 
      43, 48, 35, 15, 57, 33, 44, 8, 59, 26, 22, 56, 49, 20, 41, 31 ] ]
2 1440 
[ [ 1 ], [ 2 ], 
  [ 3, 4, 29, 64, 51, 10, 30, 63, 52, 9, 16, 58, 34, 40, 39, 43, 15, 57, 33, 
      44 ], [ 5, 6, 27, 28, 53, 54, 24, 45, 23, 46, 18, 17 ], 
  [ 7, 60, 55, 14, 12, 25, 38, 36, 47, 42, 62, 21, 19, 50, 32 ], 
  [ 8, 59, 56, 13, 11, 26, 37, 35, 48, 41, 61, 22, 20, 49, 31 ] ]
3 72 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 27, 53, 17, 23, 45 ], 
  [ 6, 28, 54, 18, 24, 46 ], [ 7, 25, 55, 19, 21, 47 ], 
  [ 8, 26, 56, 20, 22, 48 ], [ 9, 39, 43, 63, 57, 33, 15, 29, 51 ], 
  [ 10, 40, 44, 64, 58, 34, 16, 30, 52 ], 
  [ 11, 37, 41, 61, 59, 35, 13, 31, 49 ], 
  [ 12, 38, 42, 62, 60, 36, 14, 32, 50 ] ]
5 12 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], 
  [ 9, 39, 63, 57, 33, 15 ], [ 10, 40, 64, 58, 34, 16 ], 
  [ 11, 37, 61, 59, 35, 13 ], [ 12, 38, 62, 60, 36, 14 ], [ 17, 23 ], 
  [ 18, 24 ], [ 19, 21 ], [ 20, 22 ], [ 25, 55, 47 ], [ 26, 56, 48 ], 
  [ 27, 53, 45 ], [ 28, 54, 46 ], [ 29, 51, 43 ], [ 30, 52, 44 ], 
  [ 31, 49, 41 ], [ 32, 50, 42 ] ]
9 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33, 57 ], [ 34, 58 ], [ 35, 59 ], 
  [ 36, 60 ], [ 37, 61 ], [ 38, 62 ], [ 39, 63 ], [ 40, 64 ], [ 41, 49 ], 
  [ 42, 50 ], [ 43, 51 ], [ 44, 52 ], [ 45, 53 ], [ 46, 54 ], [ 47, 55 ], 
  [ 48, 56 ] ]
33 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], [ 37 ], 
  [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], [ 46 ], 
  [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], 
  [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ]
TATA(D,[2,5,17,23,28,46]);
40320 [ [ 1 ], [ 2, 5, 6, 27, 28, 53, 54, 50, 24, 45, 42, 23, 46, 32, 19, 18, 21, 
      55, 17, 47, 14, 12, 25, 38, 36, 7, 62, 60 ], 
  [ 3, 4, 29, 64, 51, 10, 13, 30, 63, 52, 9, 16, 58, 61, 34, 11, 37, 40, 39, 
      43, 48, 35, 15, 57, 33, 44, 8, 59, 26, 22, 56, 49, 20, 41, 31 ] ]
2 1440 [ [ 1 ], [ 2 ], 
  [ 3, 4, 29, 64, 51, 10, 30, 63, 52, 9, 16, 58, 34, 40, 39, 43, 15, 57, 33, 
      44 ], [ 5, 6, 27, 28, 53, 54, 24, 45, 23, 46, 18, 17 ], 
  [ 7, 60, 55, 14, 12, 25, 38, 36, 47, 42, 62, 21, 19, 50, 32 ], 
  [ 8, 59, 56, 13, 11, 26, 37, 35, 48, 41, 61, 22, 20, 49, 31 ] ]
5 120 [ [ 1 ], [ 2 ], [ 3, 64, 51, 10, 16, 29, 34, 40, 43, 58 ], 
  [ 4, 63, 52, 9, 15, 30, 33, 39, 44, 57 ], [ 5 ], [ 6 ], 
  [ 7, 60, 55, 14, 12, 25, 38, 36, 47, 62 ], 
  [ 8, 59, 56, 13, 11, 26, 37, 35, 48, 61 ], [ 17, 46, 23, 28, 54 ], 
  [ 18, 45, 24, 27, 53 ], [ 19, 32, 50, 42, 21 ], [ 20, 31, 49, 41, 22 ] ]
17 24 [ [ 1 ], [ 2 ], [ 3, 34, 16, 58 ], [ 4, 33, 15, 57 ], [ 5 ], [ 6 ], 
  [ 7, 38, 12, 62 ], [ 8, 37, 11, 61 ], [ 9, 39, 44, 52, 30, 63 ], 
  [ 10, 40, 43, 51, 29, 64 ], [ 13, 35, 48, 56, 26, 59 ], 
  [ 14, 36, 47, 55, 25, 60 ], [ 17 ], [ 18 ], [ 19, 50, 32, 42 ], 
  [ 20, 49, 31, 41 ], [ 21 ], [ 22 ], [ 23, 54, 28, 46 ], [ 24, 53, 27, 45 ] ]
23 6 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9, 39, 63 ], 
  [ 10, 40, 64 ], [ 11, 37, 61 ], [ 12, 38, 62 ], [ 13, 35, 59 ], 
  [ 14, 36, 60 ], [ 15, 33, 57 ], [ 16, 34, 58 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25, 55, 47 ], [ 26, 56, 48 ], 
  [ 27, 53, 45 ], [ 28, 54, 46 ], [ 29, 51, 43 ], [ 30, 52, 44 ], 
  [ 31, 49, 41 ], [ 32, 50, 42 ] ]
28 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33, 57 ], [ 34, 58 ], [ 35, 59 ], 
  [ 36, 60 ], [ 37, 61 ], [ 38, 62 ], [ 39, 63 ], [ 40, 64 ], [ 41, 49 ], 
  [ 42, 50 ], [ 43, 51 ], [ 44, 52 ], [ 45, 53 ], [ 46, 54 ], [ 47, 55 ], 
  [ 48, 56 ] ]
46 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], [ 37 ], 
  [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], [ 46 ], 
  [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], 
  [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ] ]

dd:=8; O0:=[1..2^dd];
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D); Collected(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
O2:=Orbits(S1,O0);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#2903040
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#51840
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#1920
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#120
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#12
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#2
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#1

TATA(D,[2,3, 5, 9,17,33,129]);
348364800 
[ [ 1 ], [ 2, 5, 6, 27, 28, 219, 53, 54, 50, 220, 99, 83, 84, 96, 149, 146, 
      141, 125, 126, 138, 142, 100, 122, 95, 150, 245, 246, 242, 112, 111, 
      88, 45, 165, 237, 238, 18, 210, 213, 42, 162, 234, 247, 21, 197, 216, 
      198, 194, 224, 211, 215, 46, 166, 17, 209, 24, 23, 32, 19, 104, 151, 
      75, 76, 184, 187, 178, 181, 106, 90, 93, 183, 72, 179, 109, 174, 80, 
      67, 81, 192, 143, 55, 25, 230, 38, 204, 177, 107, 73, 91, 172, 188, 
      105, 89, 71, 47, 206, 239, 167, 228, 217, 66, 69, 65, 116, 12, 158, 
      132, 97, 127, 118, 134, 199, 62, 60, 156, 14, 185, 36, 252, 7, 254 ], 
  [ 3, 4, 29, 256, 243, 10, 13, 30, 255, 244, 9, 221, 51, 52, 208, 195, 58, 
      61, 226, 16, 11, 34, 37, 232, 231, 250, 235, 43, 48, 227, 240, 222, 
      207, 196, 57, 225, 15, 33, 249, 236, 44, 101, 85, 86, 170, 154, 157, 
      139, 123, 124, 136, 130, 133, 140, 102, 135, 129, 120, 131, 173, 160, 
      159, 147, 163, 168, 155, 152, 64, 59, 40, 35, 229, 26, 169, 180, 82, 
      202, 201, 56, 39, 8, 77, 78, 189, 186, 74, 87, 205, 212, 49, 153, 119, 
      148, 164, 63, 190, 253, 114, 117, 113, 115, 251, 22, 248, 203, 200, 
      110, 144, 176, 175, 218, 137, 171, 20, 241, 98, 182, 214, 41, 68, 191, 
      145, 128, 103, 121, 108, 94, 233, 79, 223, 31, 70, 161, 193, 92 ] ]
2 2903040 
[ [ 1 ], [ 2 ], 
  [ 3, 4, 29, 256, 243, 10, 30, 255, 244, 9, 221, 51, 52, 208, 195, 58, 226, 
      16, 34, 232, 231, 250, 235, 43, 222, 207, 196, 57, 225, 15, 33, 249, 
      236, 44, 101, 85, 86, 170, 154, 139, 123, 124, 136, 130, 140, 102, 135, 
      129, 120, 160, 159, 147, 163, 64, 40, 169, 202, 201, 39, 77, 78, 189, 
      153, 119, 148, 164, 63, 190, 114, 113, 176, 175 ], 
  [ 5, 6, 27, 28, 219, 53, 54, 220, 99, 83, 84, 96, 149, 141, 125, 126, 142, 
      100, 95, 150, 245, 246, 112, 111, 45, 165, 237, 238, 18, 210, 197, 216, 
      198, 215, 46, 166, 17, 209, 24, 23, 75, 76, 184, 187, 178, 106, 90, 
      183, 72, 177, 188, 105, 89, 71, 66, 65 ], 
  [ 7, 252, 247, 14, 12, 25, 230, 38, 228, 239, 47, 36, 217, 55, 42, 204, 
      199, 62, 213, 60, 158, 174, 179, 81, 156, 206, 211, 50, 151, 73, 88, 
      185, 172, 181, 167, 97, 80, 143, 127, 132, 134, 146, 234, 192, 116, 
      109, 21, 67, 118, 19, 107, 138, 122, 242, 104, 69, 254, 162, 93, 224, 
      32, 91, 194 ], 
  [ 8, 251, 248, 13, 11, 26, 229, 37, 227, 240, 48, 35, 218, 56, 41, 203, 
      200, 61, 214, 59, 157, 173, 180, 82, 155, 205, 212, 49, 152, 74, 87, 
      186, 171, 182, 168, 98, 79, 144, 128, 131, 133, 145, 233, 191, 115, 
      110, 22, 68, 117, 20, 108, 137, 121, 241, 103, 70, 253, 161, 94, 223, 
      31, 92, 193 ] ]
3 40320 
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], 
  [ 5, 27, 53, 219, 99, 141, 125, 197, 83, 111, 245, 71, 177, 209, 17, 23, 
      183, 215, 95, 89, 149, 237, 65, 105, 75, 45, 187, 165 ], 
  [ 6, 28, 54, 220, 100, 142, 126, 198, 84, 112, 246, 72, 178, 210, 18, 24, 
      184, 216, 96, 90, 150, 238, 66, 106, 76, 46, 188, 166 ], 
  [ 7, 25, 55, 217, 97, 143, 127, 199, 81, 109, 247, 69, 179, 211, 19, 21, 
      181, 213, 93, 91, 151, 239, 67, 107, 73, 47, 185, 167 ], 
  [ 8, 26, 56, 218, 98, 144, 128, 200, 82, 110, 248, 70, 180, 212, 20, 22, 
      182, 214, 94, 92, 152, 240, 68, 108, 74, 48, 186, 168 ], 
  [ 9, 231, 43, 15, 39, 201, 159, 153, 147, 235, 77, 163, 225, 51, 57, 175, 
      169, 113, 129, 63, 249, 189, 33, 139, 135, 119, 207, 123, 195, 243, 
      255, 221, 85, 29, 101 ], 
  [ 10, 232, 44, 16, 40, 202, 160, 154, 148, 236, 78, 164, 226, 52, 58, 176, 
      170, 114, 130, 64, 250, 190, 34, 140, 136, 120, 208, 124, 196, 244, 
      256, 222, 86, 30, 102 ], 
  [ 11, 229, 41, 13, 37, 203, 157, 155, 145, 233, 79, 161, 227, 49, 59, 173, 
      171, 115, 131, 61, 251, 191, 35, 137, 133, 117, 205, 121, 193, 241, 
      253, 223, 87, 31, 103 ], 
  [ 12, 230, 42, 14, 38, 204, 158, 156, 146, 234, 80, 162, 228, 50, 60, 174, 
      172, 116, 132, 62, 252, 192, 36, 138, 134, 118, 206, 122, 194, 242, 
      254, 224, 88, 32, 104 ] ]
5 1440 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], 
  [ 9, 231, 169, 39, 201, 135, 153, 119, 159, 175, 225, 113, 129, 207, 63, 
      33, 15, 57, 249, 255 ], 
  [ 10, 232, 170, 40, 202, 136, 154, 120, 160, 176, 226, 114, 130, 208, 64, 
      34, 16, 58, 250, 256 ], 
  [ 11, 229, 171, 37, 203, 133, 155, 117, 157, 173, 227, 115, 131, 205, 61, 
      35, 13, 59, 251, 253 ], 
  [ 12, 230, 172, 38, 204, 134, 156, 118, 158, 174, 228, 116, 132, 206, 62, 
      36, 14, 60, 252, 254 ], 
  [ 17, 209, 177, 105, 183, 215, 65, 111, 89, 71, 23, 95 ], 
  [ 18, 210, 178, 106, 184, 216, 66, 112, 90, 72, 24, 96 ], 
  [ 19, 211, 179, 107, 181, 213, 67, 109, 91, 69, 21, 93 ], 
  [ 20, 212, 180, 108, 182, 214, 68, 110, 92, 70, 22, 94 ], 
  [ 25, 217, 55, 97, 81, 127, 143, 247, 185, 239, 199, 167, 151, 73, 47 ], 
  [ 26, 218, 56, 98, 82, 128, 144, 248, 186, 240, 200, 168, 152, 74, 48 ], 
  [ 27, 219, 53, 99, 83, 125, 141, 245, 187, 237, 197, 165, 149, 75, 45 ], 
  [ 28, 220, 54, 100, 84, 126, 142, 246, 188, 238, 198, 166, 150, 76, 46 ], 
  [ 29, 221, 51, 101, 85, 123, 139, 243, 189, 235, 195, 163, 147, 77, 43 ], 
  [ 30, 222, 52, 102, 86, 124, 140, 244, 190, 236, 196, 164, 148, 78, 44 ], 
  [ 31, 223, 49, 103, 87, 121, 137, 241, 191, 233, 193, 161, 145, 79, 41 ], 
  [ 32, 224, 50, 104, 88, 122, 138, 242, 192, 234, 194, 162, 146, 80, 42 ] ]
9 72 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], 
  [ 17, 209, 65, 105, 177, 89 ], [ 18, 210, 66, 106, 178, 90 ], 
  [ 19, 211, 67, 107, 179, 91 ], [ 20, 212, 68, 108, 180, 92 ], 
  [ 21, 213, 69, 109, 181, 93 ], [ 22, 214, 70, 110, 182, 94 ], 
  [ 23, 215, 71, 111, 183, 95 ], [ 24, 216, 72, 112, 184, 96 ], 
  [ 25, 217, 73, 97, 185, 81 ], [ 26, 218, 74, 98, 186, 82 ], 
  [ 27, 219, 75, 99, 187, 83 ], [ 28, 220, 76, 100, 188, 84 ], 
  [ 29, 221, 77, 101, 189, 85 ], [ 30, 222, 78, 102, 190, 86 ], 
  [ 31, 223, 79, 103, 191, 87 ], [ 32, 224, 80, 104, 192, 88 ], 
  [ 33, 153, 225, 201, 169, 113, 249, 129, 57 ], 
  [ 34, 154, 226, 202, 170, 114, 250, 130, 58 ], 
  [ 35, 155, 227, 203, 171, 115, 251, 131, 59 ], 
  [ 36, 156, 228, 204, 172, 116, 252, 132, 60 ], 
  [ 37, 157, 229, 205, 173, 117, 253, 133, 61 ], 
  [ 38, 158, 230, 206, 174, 118, 254, 134, 62 ], 
  [ 39, 159, 231, 207, 175, 119, 255, 135, 63 ], 
  [ 40, 160, 232, 208, 176, 120, 256, 136, 64 ], 
  [ 41, 145, 233, 193, 161, 121, 241, 137, 49 ], 
  [ 42, 146, 234, 194, 162, 122, 242, 138, 50 ], 
  [ 43, 147, 235, 195, 163, 123, 243, 139, 51 ], 
  [ 44, 148, 236, 196, 164, 124, 244, 140, 52 ], 
  [ 45, 149, 237, 197, 165, 125, 245, 141, 53 ], 
  [ 46, 150, 238, 198, 166, 126, 246, 142, 54 ], 
  [ 47, 151, 239, 199, 167, 127, 247, 143, 55 ], 
  [ 48, 152, 240, 200, 168, 128, 248, 144, 56 ] ]
17 12 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
  [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], 
  [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33, 153, 129, 249, 57, 225 ], 
  [ 34, 154, 130, 250, 58, 226 ], [ 35, 155, 131, 251, 59, 227 ], 
  [ 36, 156, 132, 252, 60, 228 ], [ 37, 157, 133, 253, 61, 229 ], 
  [ 38, 158, 134, 254, 62, 230 ], [ 39, 159, 135, 255, 63, 231 ], 
  [ 40, 160, 136, 256, 64, 232 ], [ 41, 145, 137, 241, 49, 233 ], 
  [ 42, 146, 138, 242, 50, 234 ], [ 43, 147, 139, 243, 51, 235 ], 
  [ 44, 148, 140, 244, 52, 236 ], [ 45, 149, 141, 245, 53, 237 ], 
  [ 46, 150, 142, 246, 54, 238 ], [ 47, 151, 143, 247, 55, 239 ], 
  [ 48, 152, 144, 248, 56, 240 ], [ 65, 89 ], [ 66, 90 ], [ 67, 91 ], 
  [ 68, 92 ], [ 69, 93 ], [ 70, 94 ], [ 71, 95 ], [ 72, 96 ], [ 73, 81 ], 
  [ 74, 82 ], [ 75, 83 ], [ 76, 84 ], [ 77, 85 ], [ 78, 86 ], [ 79, 87 ], 
  [ 80, 88 ], [ 97, 217, 185 ], [ 98, 218, 186 ], [ 99, 219, 187 ], 
  [ 100, 220, 188 ], [ 101, 221, 189 ], [ 102, 222, 190 ], [ 103, 223, 191 ], 
  [ 104, 224, 192 ], [ 105, 209, 177 ], [ 106, 210, 178 ], [ 107, 211, 179 ], 
  [ 108, 212, 180 ], [ 109, 213, 181 ], [ 110, 214, 182 ], [ 111, 215, 183 ], 
  [ 112, 216, 184 ], [ 113, 201, 169 ], [ 114, 202, 170 ], [ 115, 203, 171 ], 
  [ 116, 204, 172 ], [ 117, 205, 173 ], [ 118, 206, 174 ], [ 119, 207, 175 ], 
  [ 120, 208, 176 ], [ 121, 193, 161 ], [ 122, 194, 162 ], [ 123, 195, 163 ], 
  [ 124, 196, 164 ], [ 125, 197, 165 ], [ 126, 198, 166 ], [ 127, 199, 167 ], 
  [ 128, 200, 168 ] ]
33 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], [ 37 ], 
  [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], [ 46 ], 
  [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], 
  [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ], 
  [ 65 ], [ 66 ], [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], [ 73 ], 
  [ 74 ], [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], [ 82 ], 
  [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], [ 91 ], 
  [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], [ 99 ], [ 100 ], 
  [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], [ 106 ], [ 107 ], [ 108 ], 
  [ 109 ], [ 110 ], [ 111 ], [ 112 ], [ 113 ], [ 114 ], [ 115 ], [ 116 ], 
  [ 117 ], [ 118 ], [ 119 ], [ 120 ], [ 121 ], [ 122 ], [ 123 ], [ 124 ], 
  [ 125 ], [ 126 ], [ 127 ], [ 128 ], [ 129, 225 ], [ 130, 226 ], 
  [ 131, 227 ], [ 132, 228 ], [ 133, 229 ], [ 134, 230 ], [ 135, 231 ], 
  [ 136, 232 ], [ 137, 233 ], [ 138, 234 ], [ 139, 235 ], [ 140, 236 ], 
  [ 141, 237 ], [ 142, 238 ], [ 143, 239 ], [ 144, 240 ], [ 145, 241 ], 
  [ 146, 242 ], [ 147, 243 ], [ 148, 244 ], [ 149, 245 ], [ 150, 246 ], 
  [ 151, 247 ], [ 152, 248 ], [ 153, 249 ], [ 154, 250 ], [ 155, 251 ], 
  [ 156, 252 ], [ 157, 253 ], [ 158, 254 ], [ 159, 255 ], [ 160, 256 ], 
  [ 161, 193 ], [ 162, 194 ], [ 163, 195 ], [ 164, 196 ], [ 165, 197 ], 
  [ 166, 198 ], [ 167, 199 ], [ 168, 200 ], [ 169, 201 ], [ 170, 202 ], 
  [ 171, 203 ], [ 172, 204 ], [ 173, 205 ], [ 174, 206 ], [ 175, 207 ], 
  [ 176, 208 ], [ 177, 209 ], [ 178, 210 ], [ 179, 211 ], [ 180, 212 ], 
  [ 181, 213 ], [ 182, 214 ], [ 183, 215 ], [ 184, 216 ], [ 185, 217 ], 
  [ 186, 218 ], [ 187, 219 ], [ 188, 220 ], [ 189, 221 ], [ 190, 222 ], 
  [ 191, 223 ], [ 192, 224 ] ]
129 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
  [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], 
  [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], 
  [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], 
  [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], 
  [ 55 ], [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], 
  [ 64 ], [ 65 ], [ 66 ], [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], 
  [ 73 ], [ 74 ], [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], 
  [ 82 ], [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], 
  [ 91 ], [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], [ 99 ], 
  [ 100 ], [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], [ 106 ], [ 107 ], 
  [ 108 ], [ 109 ], [ 110 ], [ 111 ], [ 112 ], [ 113 ], [ 114 ], [ 115 ], 
  [ 116 ], [ 117 ], [ 118 ], [ 119 ], [ 120 ], [ 121 ], [ 122 ], [ 123 ], 
  [ 124 ], [ 125 ], [ 126 ], [ 127 ], [ 128 ], [ 129 ], [ 130 ], [ 131 ], 
  [ 132 ], [ 133 ], [ 134 ], [ 135 ], [ 136 ], [ 137 ], [ 138 ], [ 139 ], 
  [ 140 ], [ 141 ], [ 142 ], [ 143 ], [ 144 ], [ 145 ], [ 146 ], [ 147 ], 
  [ 148 ], [ 149 ], [ 150 ], [ 151 ], [ 152 ], [ 153 ], [ 154 ], [ 155 ], 
  [ 156 ], [ 157 ], [ 158 ], [ 159 ], [ 160 ], [ 161 ], [ 162 ], [ 163 ], 
  [ 164 ], [ 165 ], [ 166 ], [ 167 ], [ 168 ], [ 169 ], [ 170 ], [ 171 ], 
  [ 172 ], [ 173 ], [ 174 ], [ 175 ], [ 176 ], [ 177 ], [ 178 ], [ 179 ], 
  [ 180 ], [ 181 ], [ 182 ], [ 183 ], [ 184 ], [ 185 ], [ 186 ], [ 187 ], 
  [ 188 ], [ 189 ], [ 190 ], [ 191 ], [ 192 ], [ 193 ], [ 194 ], [ 195 ], 
  [ 196 ], [ 197 ], [ 198 ], [ 199 ], [ 200 ], [ 201 ], [ 202 ], [ 203 ], 
  [ 204 ], [ 205 ], [ 206 ], [ 207 ], [ 208 ], [ 209 ], [ 210 ], [ 211 ], 
  [ 212 ], [ 213 ], [ 214 ], [ 215 ], [ 216 ], [ 217 ], [ 218 ], [ 219 ], 
  [ 220 ], [ 221 ], [ 222 ], [ 223 ], [ 224 ], [ 225 ], [ 226 ], [ 227 ], 
  [ 228 ], [ 229 ], [ 230 ], [ 231 ], [ 232 ], [ 233 ], [ 234 ], [ 235 ], 
  [ 236 ], [ 237 ], [ 238 ], [ 239 ], [ 240 ], [ 241 ], [ 242 ], [ 243 ], 
  [ 244 ], [ 245 ], [ 246 ], [ 247 ], [ 248 ], [ 249 ], [ 250 ], [ 251 ], 
  [ 252 ], [ 253 ], [ 254 ], [ 255 ], [ 256 ] ]
TATA(D,[2,5,17,23,28,46,142]);
348364800 
[ [ 1 ], [ 2, 5, 6, 27, 28, 219, 53, 54, 50, 220, 99, 83, 84, 96, 149, 146, 
      141, 125, 126, 138, 142, 100, 122, 95, 150, 245, 246, 242, 112, 111, 
      88, 45, 165, 237, 238, 18, 210, 213, 42, 162, 234, 247, 21, 197, 216, 
      198, 194, 224, 211, 215, 46, 166, 17, 209, 24, 23, 32, 19, 104, 151, 
      75, 76, 184, 187, 178, 181, 106, 90, 93, 183, 72, 179, 109, 174, 80, 
      67, 81, 192, 143, 55, 25, 230, 38, 204, 177, 107, 73, 91, 172, 188, 
      105, 89, 71, 47, 206, 239, 167, 228, 217, 66, 69, 65, 116, 12, 158, 
      132, 97, 127, 118, 134, 199, 62, 60, 156, 14, 185, 36, 252, 7, 254 ], 
  [ 3, 4, 29, 256, 243, 10, 13, 30, 255, 244, 9, 221, 51, 52, 208, 195, 58, 
      61, 226, 16, 11, 34, 37, 232, 231, 250, 235, 43, 48, 227, 240, 222, 
      207, 196, 57, 225, 15, 33, 249, 236, 44, 101, 85, 86, 170, 154, 157, 
      139, 123, 124, 136, 130, 133, 140, 102, 135, 129, 120, 131, 173, 160, 
      159, 147, 163, 168, 155, 152, 64, 59, 40, 35, 229, 26, 169, 180, 82, 
      202, 201, 56, 39, 8, 77, 78, 189, 186, 74, 87, 205, 212, 49, 153, 119, 
      148, 164, 63, 190, 253, 114, 117, 113, 115, 251, 22, 248, 203, 200, 
      110, 144, 176, 175, 218, 137, 171, 20, 241, 98, 182, 214, 41, 68, 191, 
      145, 128, 103, 121, 108, 94, 233, 79, 223, 31, 70, 161, 193, 92 ] ]
2 2903040 
[ [ 1 ], [ 2 ], 
  [ 3, 4, 29, 256, 243, 10, 30, 255, 244, 9, 221, 51, 52, 208, 195, 58, 226, 
      16, 34, 232, 231, 250, 235, 43, 222, 207, 196, 57, 225, 15, 33, 249, 
      236, 44, 101, 85, 86, 170, 154, 139, 123, 124, 136, 130, 140, 102, 135, 
      129, 120, 160, 159, 147, 163, 64, 40, 169, 202, 201, 39, 77, 78, 189, 
      153, 119, 148, 164, 63, 190, 114, 113, 176, 175 ], 
  [ 5, 6, 27, 28, 219, 53, 54, 220, 99, 83, 84, 96, 149, 141, 125, 126, 142, 
      100, 95, 150, 245, 246, 112, 111, 45, 165, 237, 238, 18, 210, 197, 216, 
      198, 215, 46, 166, 17, 209, 24, 23, 75, 76, 184, 187, 178, 106, 90, 
      183, 72, 177, 188, 105, 89, 71, 66, 65 ], 
  [ 7, 252, 247, 14, 12, 25, 230, 38, 228, 239, 47, 36, 217, 55, 42, 204, 
      199, 62, 213, 60, 158, 174, 179, 81, 156, 206, 211, 50, 151, 73, 88, 
      185, 172, 181, 167, 97, 80, 143, 127, 132, 134, 146, 234, 192, 116, 
      109, 21, 67, 118, 19, 107, 138, 122, 242, 104, 69, 254, 162, 93, 224, 
      32, 91, 194 ], 
  [ 8, 251, 248, 13, 11, 26, 229, 37, 227, 240, 48, 35, 218, 56, 41, 203, 
      200, 61, 214, 59, 157, 173, 180, 82, 155, 205, 212, 49, 152, 74, 87, 
      186, 171, 182, 168, 98, 79, 144, 128, 131, 133, 145, 233, 191, 115, 
      110, 22, 68, 117, 20, 108, 137, 121, 241, 103, 70, 253, 161, 94, 223, 
      31, 92, 193 ] ]
3 40320 
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], 
  [ 5, 27, 53, 219, 99, 141, 125, 197, 83, 111, 245, 71, 177, 209, 17, 23, 
      183, 215, 95, 89, 149, 237, 65, 105, 75, 45, 187, 165 ], 
  [ 6, 28, 54, 220, 100, 142, 126, 198, 84, 112, 246, 72, 178, 210, 18, 24, 
      184, 216, 96, 90, 150, 238, 66, 106, 76, 46, 188, 166 ], 
  [ 7, 25, 55, 217, 97, 143, 127, 199, 81, 109, 247, 69, 179, 211, 19, 21, 
      181, 213, 93, 91, 151, 239, 67, 107, 73, 47, 185, 167 ], 
  [ 8, 26, 56, 218, 98, 144, 128, 200, 82, 110, 248, 70, 180, 212, 20, 22, 
      182, 214, 94, 92, 152, 240, 68, 108, 74, 48, 186, 168 ], 
  [ 9, 231, 43, 15, 39, 201, 159, 153, 147, 235, 77, 163, 225, 51, 57, 175, 
      169, 113, 129, 63, 249, 189, 33, 139, 135, 119, 207, 123, 195, 243, 
      255, 221, 85, 29, 101 ], 
  [ 10, 232, 44, 16, 40, 202, 160, 154, 148, 236, 78, 164, 226, 52, 58, 176, 
      170, 114, 130, 64, 250, 190, 34, 140, 136, 120, 208, 124, 196, 244, 
      256, 222, 86, 30, 102 ], 
  [ 11, 229, 41, 13, 37, 203, 157, 155, 145, 233, 79, 161, 227, 49, 59, 173, 
      171, 115, 131, 61, 251, 191, 35, 137, 133, 117, 205, 121, 193, 241, 
      253, 223, 87, 31, 103 ], 
  [ 12, 230, 42, 14, 38, 204, 158, 156, 146, 234, 80, 162, 228, 50, 60, 174, 
      172, 116, 132, 62, 252, 192, 36, 138, 134, 118, 206, 122, 194, 242, 
      254, 224, 88, 32, 104 ] ]
5 1440 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], 
  [ 9, 231, 169, 39, 201, 135, 153, 119, 159, 175, 225, 113, 129, 207, 63, 
      33, 15, 57, 249, 255 ], 
  [ 10, 232, 170, 40, 202, 136, 154, 120, 160, 176, 226, 114, 130, 208, 64, 
      34, 16, 58, 250, 256 ], 
  [ 11, 229, 171, 37, 203, 133, 155, 117, 157, 173, 227, 115, 131, 205, 61, 
      35, 13, 59, 251, 253 ], 
  [ 12, 230, 172, 38, 204, 134, 156, 118, 158, 174, 228, 116, 132, 206, 62, 
      36, 14, 60, 252, 254 ], 
  [ 17, 209, 177, 105, 183, 215, 65, 111, 89, 71, 23, 95 ], 
  [ 18, 210, 178, 106, 184, 216, 66, 112, 90, 72, 24, 96 ], 
  [ 19, 211, 179, 107, 181, 213, 67, 109, 91, 69, 21, 93 ], 
  [ 20, 212, 180, 108, 182, 214, 68, 110, 92, 70, 22, 94 ], 
  [ 25, 217, 55, 97, 81, 127, 143, 247, 185, 239, 199, 167, 151, 73, 47 ], 
  [ 26, 218, 56, 98, 82, 128, 144, 248, 186, 240, 200, 168, 152, 74, 48 ], 
  [ 27, 219, 53, 99, 83, 125, 141, 245, 187, 237, 197, 165, 149, 75, 45 ], 
  [ 28, 220, 54, 100, 84, 126, 142, 246, 188, 238, 198, 166, 150, 76, 46 ], 
  [ 29, 221, 51, 101, 85, 123, 139, 243, 189, 235, 195, 163, 147, 77, 43 ], 
  [ 30, 222, 52, 102, 86, 124, 140, 244, 190, 236, 196, 164, 148, 78, 44 ], 
  [ 31, 223, 49, 103, 87, 121, 137, 241, 191, 233, 193, 161, 145, 79, 41 ], 
  [ 32, 224, 50, 104, 88, 122, 138, 242, 192, 234, 194, 162, 146, 80, 42 ] ]
9 72 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], 
  [ 17, 209, 65, 105, 177, 89 ], [ 18, 210, 66, 106, 178, 90 ], 
  [ 19, 211, 67, 107, 179, 91 ], [ 20, 212, 68, 108, 180, 92 ], 
  [ 21, 213, 69, 109, 181, 93 ], [ 22, 214, 70, 110, 182, 94 ], 
  [ 23, 215, 71, 111, 183, 95 ], [ 24, 216, 72, 112, 184, 96 ], 
  [ 25, 217, 73, 97, 185, 81 ], [ 26, 218, 74, 98, 186, 82 ], 
  [ 27, 219, 75, 99, 187, 83 ], [ 28, 220, 76, 100, 188, 84 ], 
  [ 29, 221, 77, 101, 189, 85 ], [ 30, 222, 78, 102, 190, 86 ], 
  [ 31, 223, 79, 103, 191, 87 ], [ 32, 224, 80, 104, 192, 88 ], 
  [ 33, 153, 225, 201, 169, 113, 249, 129, 57 ], 
  [ 34, 154, 226, 202, 170, 114, 250, 130, 58 ], 
  [ 35, 155, 227, 203, 171, 115, 251, 131, 59 ], 
  [ 36, 156, 228, 204, 172, 116, 252, 132, 60 ], 
  [ 37, 157, 229, 205, 173, 117, 253, 133, 61 ], 
  [ 38, 158, 230, 206, 174, 118, 254, 134, 62 ], 
  [ 39, 159, 231, 207, 175, 119, 255, 135, 63 ], 
  [ 40, 160, 232, 208, 176, 120, 256, 136, 64 ], 
  [ 41, 145, 233, 193, 161, 121, 241, 137, 49 ], 
  [ 42, 146, 234, 194, 162, 122, 242, 138, 50 ], 
  [ 43, 147, 235, 195, 163, 123, 243, 139, 51 ], 
  [ 44, 148, 236, 196, 164, 124, 244, 140, 52 ], 
  [ 45, 149, 237, 197, 165, 125, 245, 141, 53 ], 
  [ 46, 150, 238, 198, 166, 126, 246, 142, 54 ], 
  [ 47, 151, 239, 199, 167, 127, 247, 143, 55 ], 
  [ 48, 152, 240, 200, 168, 128, 248, 144, 56 ] ]
17 12 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
  [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], 
  [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33, 153, 129, 249, 57, 225 ], 
  [ 34, 154, 130, 250, 58, 226 ], [ 35, 155, 131, 251, 59, 227 ], 
  [ 36, 156, 132, 252, 60, 228 ], [ 37, 157, 133, 253, 61, 229 ], 
  [ 38, 158, 134, 254, 62, 230 ], [ 39, 159, 135, 255, 63, 231 ], 
  [ 40, 160, 136, 256, 64, 232 ], [ 41, 145, 137, 241, 49, 233 ], 
  [ 42, 146, 138, 242, 50, 234 ], [ 43, 147, 139, 243, 51, 235 ], 
  [ 44, 148, 140, 244, 52, 236 ], [ 45, 149, 141, 245, 53, 237 ], 
  [ 46, 150, 142, 246, 54, 238 ], [ 47, 151, 143, 247, 55, 239 ], 
  [ 48, 152, 144, 248, 56, 240 ], [ 65, 89 ], [ 66, 90 ], [ 67, 91 ], 
  [ 68, 92 ], [ 69, 93 ], [ 70, 94 ], [ 71, 95 ], [ 72, 96 ], [ 73, 81 ], 
  [ 74, 82 ], [ 75, 83 ], [ 76, 84 ], [ 77, 85 ], [ 78, 86 ], [ 79, 87 ], 
  [ 80, 88 ], [ 97, 217, 185 ], [ 98, 218, 186 ], [ 99, 219, 187 ], 
  [ 100, 220, 188 ], [ 101, 221, 189 ], [ 102, 222, 190 ], [ 103, 223, 191 ], 
  [ 104, 224, 192 ], [ 105, 209, 177 ], [ 106, 210, 178 ], [ 107, 211, 179 ], 
  [ 108, 212, 180 ], [ 109, 213, 181 ], [ 110, 214, 182 ], [ 111, 215, 183 ], 
  [ 112, 216, 184 ], [ 113, 201, 169 ], [ 114, 202, 170 ], [ 115, 203, 171 ], 
  [ 116, 204, 172 ], [ 117, 205, 173 ], [ 118, 206, 174 ], [ 119, 207, 175 ], 
  [ 120, 208, 176 ], [ 121, 193, 161 ], [ 122, 194, 162 ], [ 123, 195, 163 ], 
  [ 124, 196, 164 ], [ 125, 197, 165 ], [ 126, 198, 166 ], [ 127, 199, 167 ], 
  [ 128, 200, 168 ] ]
33 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], [ 10 ], 
  [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], [ 19 ], 
  [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], [ 28 ], 
  [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], [ 37 ], 
  [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], [ 46 ], 
  [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], [ 55 ], 
  [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], [ 64 ], 
  [ 65 ], [ 66 ], [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], [ 73 ], 
  [ 74 ], [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], [ 82 ], 
  [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], [ 91 ], 
  [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], [ 99 ], [ 100 ], 
  [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], [ 106 ], [ 107 ], [ 108 ], 
  [ 109 ], [ 110 ], [ 111 ], [ 112 ], [ 113 ], [ 114 ], [ 115 ], [ 116 ], 
  [ 117 ], [ 118 ], [ 119 ], [ 120 ], [ 121 ], [ 122 ], [ 123 ], [ 124 ], 
  [ 125 ], [ 126 ], [ 127 ], [ 128 ], [ 129, 225 ], [ 130, 226 ], 
  [ 131, 227 ], [ 132, 228 ], [ 133, 229 ], [ 134, 230 ], [ 135, 231 ], 
  [ 136, 232 ], [ 137, 233 ], [ 138, 234 ], [ 139, 235 ], [ 140, 236 ], 
  [ 141, 237 ], [ 142, 238 ], [ 143, 239 ], [ 144, 240 ], [ 145, 241 ], 
  [ 146, 242 ], [ 147, 243 ], [ 148, 244 ], [ 149, 245 ], [ 150, 246 ], 
  [ 151, 247 ], [ 152, 248 ], [ 153, 249 ], [ 154, 250 ], [ 155, 251 ], 
  [ 156, 252 ], [ 157, 253 ], [ 158, 254 ], [ 159, 255 ], [ 160, 256 ], 
  [ 161, 193 ], [ 162, 194 ], [ 163, 195 ], [ 164, 196 ], [ 165, 197 ], 
  [ 166, 198 ], [ 167, 199 ], [ 168, 200 ], [ 169, 201 ], [ 170, 202 ], 
  [ 171, 203 ], [ 172, 204 ], [ 173, 205 ], [ 174, 206 ], [ 175, 207 ], 
  [ 176, 208 ], [ 177, 209 ], [ 178, 210 ], [ 179, 211 ], [ 180, 212 ], 
  [ 181, 213 ], [ 182, 214 ], [ 183, 215 ], [ 184, 216 ], [ 185, 217 ], 
  [ 186, 218 ], [ 187, 219 ], [ 188, 220 ], [ 189, 221 ], [ 190, 222 ], 
  [ 191, 223 ], [ 192, 224 ] ]
129 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
  [ 19 ], [ 20 ], [ 21 ], [ 22 ], [ 23 ], [ 24 ], [ 25 ], [ 26 ], [ 27 ], 
  [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], [ 33 ], [ 34 ], [ 35 ], [ 36 ], 
  [ 37 ], [ 38 ], [ 39 ], [ 40 ], [ 41 ], [ 42 ], [ 43 ], [ 44 ], [ 45 ], 
  [ 46 ], [ 47 ], [ 48 ], [ 49 ], [ 50 ], [ 51 ], [ 52 ], [ 53 ], [ 54 ], 
  [ 55 ], [ 56 ], [ 57 ], [ 58 ], [ 59 ], [ 60 ], [ 61 ], [ 62 ], [ 63 ], 
  [ 64 ], [ 65 ], [ 66 ], [ 67 ], [ 68 ], [ 69 ], [ 70 ], [ 71 ], [ 72 ], 
  [ 73 ], [ 74 ], [ 75 ], [ 76 ], [ 77 ], [ 78 ], [ 79 ], [ 80 ], [ 81 ], 
  [ 82 ], [ 83 ], [ 84 ], [ 85 ], [ 86 ], [ 87 ], [ 88 ], [ 89 ], [ 90 ], 
  [ 91 ], [ 92 ], [ 93 ], [ 94 ], [ 95 ], [ 96 ], [ 97 ], [ 98 ], [ 99 ], 
  [ 100 ], [ 101 ], [ 102 ], [ 103 ], [ 104 ], [ 105 ], [ 106 ], [ 107 ], 
  [ 108 ], [ 109 ], [ 110 ], [ 111 ], [ 112 ], [ 113 ], [ 114 ], [ 115 ], 
  [ 116 ], [ 117 ], [ 118 ], [ 119 ], [ 120 ], [ 121 ], [ 122 ], [ 123 ], 
  [ 124 ], [ 125 ], [ 126 ], [ 127 ], [ 128 ], [ 129 ], [ 130 ], [ 131 ], 
  [ 132 ], [ 133 ], [ 134 ], [ 135 ], [ 136 ], [ 137 ], [ 138 ], [ 139 ], 
  [ 140 ], [ 141 ], [ 142 ], [ 143 ], [ 144 ], [ 145 ], [ 146 ], [ 147 ], 
  [ 148 ], [ 149 ], [ 150 ], [ 151 ], [ 152 ], [ 153 ], [ 154 ], [ 155 ], 
  [ 156 ], [ 157 ], [ 158 ], [ 159 ], [ 160 ], [ 161 ], [ 162 ], [ 163 ], 
  [ 164 ], [ 165 ], [ 166 ], [ 167 ], [ 168 ], [ 169 ], [ 170 ], [ 171 ], 
  [ 172 ], [ 173 ], [ 174 ], [ 175 ], [ 176 ], [ 177 ], [ 178 ], [ 179 ], 
  [ 180 ], [ 181 ], [ 182 ], [ 183 ], [ 184 ], [ 185 ], [ 186 ], [ 187 ], 
  [ 188 ], [ 189 ], [ 190 ], [ 191 ], [ 192 ], [ 193 ], [ 194 ], [ 195 ], 
  [ 196 ], [ 197 ], [ 198 ], [ 199 ], [ 200 ], [ 201 ], [ 202 ], [ 203 ], 
  [ 204 ], [ 205 ], [ 206 ], [ 207 ], [ 208 ], [ 209 ], [ 210 ], [ 211 ], 
  [ 212 ], [ 213 ], [ 214 ], [ 215 ], [ 216 ], [ 217 ], [ 218 ], [ 219 ], 
  [ 220 ], [ 221 ], [ 222 ], [ 223 ], [ 224 ], [ 225 ], [ 226 ], [ 227 ], 
  [ 228 ], [ 229 ], [ 230 ], [ 231 ], [ 232 ], [ 233 ], [ 234 ], [ 235 ], 
  [ 236 ], [ 237 ], [ 238 ], [ 239 ], [ 240 ], [ 241 ], [ 242 ], [ 243 ], 
  [ 244 ], [ 245 ], [ 246 ], [ 247 ], [ 248 ], [ 249 ], [ 250 ], [ 251 ], 
  [ 252 ], [ 253 ], [ 254 ], [ 255 ], [ 256 ] ]
gap> 

dd:=10; O0:=[1..2^dd];ATA(D,[2,3,5,9,17,33,65,129,513]);
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#46998591897600
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#94755225600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#394813440
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#3317760
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#51840
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#1440
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#72
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#8
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#2
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ], [ 622, 1006 ]
S10:=Stabilizer(S9,O10[3][1]);;Size(S10);#1
O11:=Orbits(S10,O10[3]);#[ 622 ], [ 1006 ] 

TATA(D,[2,3, 5, 9,17,33, 65,129,513]);
46998591897600 
[ [ 1 ], [ 2, 5, 6, 27, 28, 987, 53, 54, 50, 988, 603, 99, 83, 84, 96, 146, 
      909, 125, 126, 138, 910, 100, 142, 906, 122, 141, 604, 95, 150, 187, 
      667, 955, 427, 933, 934, 858, 877, 867, 219, 245, 246, 1013, 242, 851, 
      852, 864, 112, 880, 879, 88, 626, 914, 690, 162, 368, 369, 501, 594, 
      525, 821, 220, 197, 984, 234, 893, 198, 965, 194, 894, 966, 618, 682, 
      890, 346, 576, 563, 621, 526, 822, 983, 238, 868, 1014, 622, 686, 350, 
      349, 324, 572, 567, 522, 818, 224, 992, 979, 237, 962, 685, 323, 571, 
      568, 188, 668, 956, 428, 857, 873, 863, 111, 630, 918, 694, 166, 364, 
      363, 497, 593, 291, 843, 292, 317, 442, 749, 795, 581, 582, 736, 723, 
      333, 75, 165, 90, 109, 840, 837, 549, 917, 149, 106, 93, 550, 105, 89, 
      730, 706, 874, 752, 751, 629, 731, 397, 861, 659, 654, 600, 739, 387, 
      371, 372, 533, 507, 469, 470, 435, 448, 530, 413, 414, 504, 534, 388, 
      508, 503, 24, 42, 410, 512, 499, 715, 267, 268, 762, 724, 436, 716, 
      766, 712, 746, 745, 400, 728, 216, 792, 791, 336, 658, 657, 608, 399, 
      335, 856, 104, 151, 1010, 578, 1002, 1015, 789, 978, 810, 930, 247, 21, 
      210, 458, 642, 535, 672, 498, 314, 280, 265, 432, 709, 354, 433, 321, 
      623, 758, 342, 565, 213, 204, 178, 946, 418, 66, 65, 834, 848, 461, 
      813, 814, 693, 485, 796, 447, 486, 546, 945, 192, 765, 482, 392, 395, 
      211, 1005, 466, 328, 331, 960, 872, 841, 859, 947, 875, 181, 172, 462, 
      209, 785, 599, 23, 561, 740, 46, 1006, 215, 383, 951, 177, 823, 786, 
      800, 463, 440, 443, 32, 73, 91, 595, 107, 19, 949, 940, 562, 661, 384, 
      952, 844, 318, 441, 735, 329, 76, 839, 833, 729, 705, 393, 663, 664, 
      711, 977, 17, 646, 276, 275, 353, 357, 417, 378, 301, 424, 377, 297, 
      330, 285, 394, 259, 272, 645, 288, 287, 258, 299, 360, 261, 381, 492, 
      355, 72, 69, 733, 780, 184, 747, 421, 18, 597, 884, 282, 281, 264, 296, 
      304, 303, 283, 359, 419, 423, 45, 981, 445, 12, 787, 782, 590, 702, 
      404, 340, 71, 835, 263, 773, 774, 80, 81, 815, 206, 687, 257, 298, 720, 
      273, 239, 631, 919, 695, 167, 361, 376, 527, 516, 601, 911, 55, 25, 
      998, 38, 179, 471, 143, 415, 518, 678, 972, 849, 770, 744, 793, 230, 
      806, 713, 310, 406, 385, 895, 886, 569, 478, 1007, 985, 558, 452, 174, 
      556, 14, 379, 494, 425, 721, 185, 319, 707, 756, 67, 652, 588, 308, 
      156, 767, 183, 505, 612, 953, 118, 47, 974, 924, 127, 804, 676, 116, 
      132, 942, 36, 614, 638, 830, 454, 476, 217, 996, 351, 97, 665, 583, 
      228, 935, 647, 636, 900, 865, 134, 967, 62, 60, 926, 902, 828, 700, 
      487, 551, 540, 775, 1022, 542, 158, 289, 737, 199, 252, 1020, 7, 254 ], 
  [ 3, 4, 29, 1024, 1011, 13, 30, 1023, 1012, 9, 989, 51, 52, 976, 963, 61, 
      640, 994, 16, 11, 627, 37, 995, 1008, 43, 990, 975, 964, 57, 639, 993, 
      15, 628, 33, 999, 1000, 1017, 1004, 44, 605, 101, 85, 86, 938, 157, 
      907, 123, 124, 904, 133, 908, 102, 903, 129, 592, 120, 922, 131, 579, 
      173, 901, 923, 920, 163, 160, 704, 40, 10, 778, 1016, 610, 34, 64, 59, 
      35, 997, 26, 147, 691, 1003, 235, 232, 986, 925, 941, 948, 82, 611, 
      973, 980, 624, 48, 49, 915, 77, 78, 186, 606, 937, 153, 591, 119, 921, 
      135, 580, 169, 897, 927, 928, 916, 164, 159, 703, 39, 777, 609, 63, 
      148, 692, 236, 231, 615, 969, 970, 616, 56, 633, 1018, 620, 190, 189, 
      669, 957, 429, 931, 932, 176, 866, 869, 221, 243, 244, 253, 853, 139, 
      140, 117, 854, 113, 554, 170, 888, 887, 115, 637, 701, 653, 660, 536, 
      539, 523, 819, 222, 195, 229, 891, 196, 205, 892, 201, 520, 136, 832, 
      831, 802, 203, 613, 677, 885, 699, 477, 524, 820, 225, 870, 249, 519, 
      801, 207, 673, 881, 473, 656, 944, 114, 882, 896, 208, 227, 538, 154, 
      784, 783, 251, 899, 675, 883, 552, 555, 643, 850, 589, 309, 757, 748, 
      760, 517, 829, 155, 803, 939, 781, 788, 152, 816, 936, 240, 241, 315, 
      277, 278, 722, 655, 490, 632, 456, 489, 472, 943, 650, 402, 688, 130, 
      674, 58, 826, 968, 171, 98, 950, 971, 982, 41, 365, 366, 602, 459, 506, 
      619, 811, 430, 666, 808, 696, 79, 541, 805, 779, 790, 1019, 256, 557, 
      878, 912, 564, 180, 68, 836, 959, 144, 145, 128, 403, 200, 596, 108, 
      20, 191, 416, 74, 87, 905, 121, 137, 531, 218, 845, 846, 958, 954, 290, 
      842, 584, 587, 741, 670, 175, 553, 697, 649, 532, 543, 537, 255, 679, 
      698, 548, 559, 644, 585, 305, 753, 754, 759, 513, 825, 807, 544, 248, 
      812, 316, 726, 455, 468, 401, 684, 460, 510, 407, 898, 586, 680, 408, 
      634, 8, 412, 294, 293, 742, 738, 797, 322, 573, 547, 312, 768, 386, 
      370, 367, 491, 488, 389, 325, 373, 374, 496, 483, 509, 467, 411, 514, 
      390, 635, 725, 437, 717, 269, 270, 683, 347, 348, 450, 326, 449, 438, 
      718, 202, 306, 755, 344, 343, 574, 1021, 22, 453, 502, 480, 398, 266, 
      356, 420, 313, 794, 475, 776, 798, 484, 763, 493, 515, 764, 479, 824, 
      560, 226, 405, 341, 451, 464, 827, 651, 500, 648, 495, 337, 474, 352, 
      338, 598, 250, 339, 570, 771, 434, 714, 279, 110, 300, 334, 876, 761, 
      214, 662, 528, 396, 212, 575, 671, 168, 362, 375, 465, 426, 439, 529, 
      617, 409, 511, 681, 274, 1009, 307, 750, 233, 566, 182, 70, 838, 913, 
      1001, 311, 809, 847, 457, 862, 521, 710, 607, 708, 929, 732, 577, 161, 
      94, 625, 689, 92, 31, 223, 991, 295, 446, 855, 103, 817, 889, 193, 961, 
      345, 320, 772, 431, 358, 332, 727, 286, 799, 422, 262, 260, 382, 860, 
      641, 719, 444, 871, 271, 327, 391, 302, 734, 743, 284, 545, 481, 380, 
      769 ] ]
2 94755225600 
[ [ 1 ], [ 2 ], 
  [ 3, 4, 29, 1024, 1011, 30, 1023, 1012, 989, 51, 52, 976, 963, 640, 994, 
      16, 627, 990, 975, 964, 639, 993, 15, 628, 605, 101, 85, 86, 938, 907, 
      123, 124, 904, 908, 102, 903, 592, 120, 922, 579, 160, 704, 40, 10, 9, 
      778, 610, 34, 64, 147, 691, 43, 1003, 1004, 235, 232, 606, 937, 591, 
      119, 921, 580, 159, 703, 39, 777, 609, 33, 63, 148, 692, 44, 236, 231, 
      189, 669, 957, 429, 931, 932, 163, 176, 869, 221, 243, 244, 853, 139, 
      140, 854, 554, 170, 888, 887, 523, 819, 222, 195, 891, 196, 892, 520, 
      136, 832, 831, 802, 524, 820, 870, 519, 135, 801, 656, 944, 114, 113, 
      882, 208, 538, 154, 784, 783, 643, 915, 916, 928, 655, 490, 456, 489, 
      1000, 943, 999, 1018, 1017, 650, 402, 130, 674, 58, 57, 826, 365, 366, 
      459, 77, 78, 619, 620, 811, 430, 808, 190, 670, 958, 164, 175, 553, 
      169, 881, 207, 537, 153, 644, 927, 455, 649, 401, 129, 673, 825, 460, 
      812, 807, 293, 845, 294, 315, 797, 573, 547, 548, 277, 278, 312, 760, 
      759, 741, 389, 325, 373, 374, 496, 483, 509, 467, 468, 586, 531, 411, 
      412, 514, 532, 390, 513, 725, 437, 717, 269, 270, 408, 683, 347, 348, 
      450, 684, 326, 449, 726, 438, 718, 407, 202, 306, 754, 753, 616, 344, 
      680, 679, 698, 343, 697, 574, 510, 798, 585, 484, 634, 763, 480, 633, 
      764, 479, 201, 560, 544, 543, 226, 559, 615, 742, 495, 225, 898, 897, 
      338, 250, 474, 249, 771, 970, 969, 473, 316, 311, 846, 305, 337, 772, 
      256, 255 ], 
  [ 5, 6, 27, 28, 987, 53, 54, 988, 603, 99, 83, 84, 96, 909, 125, 126, 910, 
      100, 604, 95, 187, 667, 955, 427, 933, 934, 858, 867, 219, 245, 246, 
      1013, 851, 141, 142, 852, 864, 112, 880, 879, 525, 821, 220, 197, 984, 
      893, 198, 965, 894, 966, 526, 822, 983, 868, 1014, 188, 668, 956, 428, 
      857, 863, 111, 291, 843, 292, 317, 442, 795, 363, 581, 582, 736, 723, 
      571, 75, 165, 166, 90, 840, 549, 917, 149, 150, 106, 550, 918, 105, 
      730, 706, 874, 752, 751, 629, 739, 387, 323, 371, 372, 533, 507, 469, 
      470, 435, 448, 621, 413, 414, 504, 534, 622, 388, 508, 503, 24, 715, 
      267, 268, 685, 349, 350, 568, 686, 324, 572, 567, 724, 436, 716, 712, 
      746, 745, 400, 216, 792, 791, 336, 658, 657, 399, 335, 237, 461, 813, 
      814, 210, 693, 485, 796, 447, 486, 600, 946, 945, 765, 766, 238, 462, 
      209, 694, 599, 23, 740, 630, 844, 318, 441, 364, 735, 76, 89, 839, 729, 
      705, 873, 711, 215, 378, 424, 377, 330, 394, 645, 646, 288, 287, 258, 
      275, 360, 72, 276, 393, 184, 18, 498, 497, 786, 785, 1005, 17, 1006, 
      282, 281, 264, 384, 834, 304, 303, 664, 663, 359, 45, 263, 773, 774, 
      952, 178, 177, 383, 951, 298, 297, 354, 353, 594, 593, 418, 417, 562, 
      561, 71, 66, 833, 65, 183, 423, 46, 329, 257, 978, 977 ], 
  [ 7, 1020, 1015, 636, 12, 631, 25, 998, 156, 700, 36, 588, 14, 19, 782, 
      151, 695, 47, 583, 1007, 1010, 239, 228, 985, 55, 42, 972, 967, 614, 
      38, 981, 60, 924, 172, 652, 661, 494, 828, 452, 499, 647, 996, 940, 
      949, 935, 118, 107, 886, 979, 974, 992, 654, 406, 516, 527, 919, 167, 
      361, 376, 823, 463, 530, 73, 88, 906, 623, 50, 626, 32, 815, 425, 440, 
      804, 597, 558, 601, 97, 81, 80, 942, 911, 127, 900, 914, 1002, 947, 
      960, 116, 926, 134, 678, 62, 830, 109, 21, 67, 540, 787, 308, 756, 749, 
      780, 395, 767, 789, 357, 421, 707, 720, 476, 385, 181, 563, 211, 206, 
      224, 775, 618, 273, 612, 556, 875, 565, 69, 837, 551, 138, 902, 91, 
      758, 342, 595, 590, 608, 104, 702, 404, 397, 265, 818, 535, 242, 319, 
      272, 665, 328, 259, 471, 505, 841, 856, 466, 800, 953, 185, 522, 122, 
      143, 687, 415, 806, 146, 690, 578, 392, 676, 865, 217, 247, 234, 849, 
      848, 192, 174, 884, 877, 895, 199, 132, 810, 930, 179, 835, 576, 162, 
      93, 204, 542, 158, 478, 213, 861, 252, 659, 301, 331, 492, 443, 682, 
      721, 501, 458, 733, 859, 321, 433, 512, 487, 410, 747, 709, 890, 346, 
      518, 310, 340, 333, 713, 419, 638, 672, 432, 872, 454, 369, 445, 793, 
      230, 289, 379, 569, 728, 194, 962, 351, 368, 642, 737, 280, 314, 296, 
      546, 299, 731, 254, 355, 285, 762, 261, 381, 1022, 744, 482, 770, 283 ],
  [ 8, 1019, 1016, 635, 11, 632, 26, 997, 155, 699, 35, 587, 13, 20, 781, 
      152, 696, 48, 584, 1008, 1009, 240, 227, 986, 56, 41, 971, 968, 613, 
      37, 982, 59, 923, 171, 651, 662, 493, 827, 451, 500, 648, 995, 939, 
      950, 936, 117, 108, 885, 980, 973, 991, 653, 405, 515, 528, 920, 168, 
      362, 375, 824, 464, 529, 74, 87, 905, 624, 49, 625, 31, 816, 426, 439, 
      803, 598, 557, 602, 98, 82, 79, 941, 912, 128, 899, 913, 1001, 948, 
      959, 115, 925, 133, 677, 61, 829, 110, 22, 68, 539, 788, 307, 755, 750, 
      779, 396, 768, 790, 358, 422, 708, 719, 475, 386, 182, 564, 212, 205, 
      223, 776, 617, 274, 611, 555, 876, 566, 70, 838, 552, 137, 901, 92, 
      757, 341, 596, 589, 607, 103, 701, 403, 398, 266, 817, 536, 241, 320, 
      271, 666, 327, 260, 472, 506, 842, 855, 465, 799, 954, 186, 521, 121, 
      144, 688, 416, 805, 145, 689, 577, 391, 675, 866, 218, 248, 233, 850, 
      847, 191, 173, 883, 878, 896, 200, 131, 809, 929, 180, 836, 575, 161, 
      94, 203, 541, 157, 477, 214, 862, 251, 660, 302, 332, 491, 444, 681, 
      722, 502, 457, 734, 860, 322, 434, 511, 488, 409, 748, 710, 889, 345, 
      517, 309, 339, 334, 714, 420, 637, 671, 431, 871, 453, 370, 446, 794, 
      229, 290, 380, 570, 727, 193, 961, 352, 367, 641, 738, 279, 313, 295, 
      545, 300, 732, 253, 356, 286, 761, 262, 382, 1021, 743, 481, 769, 284 ] 
 ]
3 348364800 
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], 
  [ 5, 27, 987, 53, 99, 83, 879, 603, 909, 125, 219, 867, 245, 851, 141, 197, 
      399, 111, 335, 863, 657, 821, 751, 187, 667, 955, 427, 933, 945, 525, 
      893, 571, 507, 795, 469, 387, 323, 371, 773, 739, 533, 621, 413, 215, 
      435, 715, 267, 965, 723, 685, 349, 177, 549, 485, 23, 983, 447, 95, 
      791, 567, 383, 503, 711, 745, 1013, 735, 593, 353, 417, 785, 693, 303, 
      663, 359, 291, 843, 105, 363, 581, 75, 165, 873, 917, 149, 65, 833, 
      561, 237, 461, 813, 765, 645, 1005, 297, 275, 599, 729, 951, 263, 839, 
      629, 287, 977, 497, 393, 209, 257, 441, 423, 317, 89, 45, 17, 329, 857, 
      705, 183, 71, 281, 377 ], 
  [ 6, 28, 988, 54, 100, 84, 880, 604, 910, 126, 220, 868, 246, 852, 142, 
      198, 400, 112, 336, 864, 658, 822, 752, 188, 668, 956, 428, 934, 946, 
      526, 894, 572, 508, 796, 470, 388, 324, 372, 774, 740, 534, 622, 414, 
      216, 436, 716, 268, 966, 724, 686, 350, 178, 550, 486, 24, 984, 448, 
      96, 792, 568, 384, 504, 712, 746, 1014, 736, 594, 354, 418, 786, 694, 
      304, 664, 360, 292, 844, 106, 364, 582, 76, 166, 874, 918, 150, 66, 
      834, 562, 238, 462, 814, 766, 646, 1006, 298, 276, 600, 730, 952, 264, 
      840, 630, 288, 978, 498, 394, 210, 258, 442, 424, 318, 90, 46, 18, 330, 
      858, 706, 184, 72, 282, 378 ], 
  [ 7, 25, 985, 55, 97, 81, 877, 601, 911, 127, 217, 865, 247, 849, 143, 199, 
      397, 109, 333, 861, 659, 823, 749, 185, 665, 953, 425, 935, 947, 527, 
      895, 569, 505, 793, 471, 385, 321, 369, 775, 737, 535, 623, 415, 213, 
      433, 713, 265, 967, 721, 687, 351, 179, 551, 487, 21, 981, 445, 93, 
      789, 565, 381, 501, 709, 747, 1015, 733, 595, 355, 419, 787, 695, 301, 
      661, 357, 289, 841, 107, 361, 583, 73, 167, 875, 919, 151, 67, 835, 
      563, 239, 463, 815, 767, 647, 1007, 299, 273, 597, 731, 949, 261, 837, 
      631, 285, 979, 499, 395, 211, 259, 443, 421, 319, 91, 47, 19, 331, 859, 
      707, 181, 69, 283, 379 ], 
  [ 8, 26, 986, 56, 98, 82, 878, 602, 912, 128, 218, 866, 248, 850, 144, 200, 
      398, 110, 334, 862, 660, 824, 750, 186, 666, 954, 426, 936, 948, 528, 
      896, 570, 506, 794, 472, 386, 322, 370, 776, 738, 536, 624, 416, 214, 
      434, 714, 266, 968, 722, 688, 352, 180, 552, 488, 22, 982, 446, 94, 
      790, 566, 382, 502, 710, 748, 1016, 734, 596, 356, 420, 788, 696, 302, 
      662, 358, 290, 842, 108, 362, 584, 74, 168, 876, 920, 152, 68, 836, 
      564, 240, 464, 816, 768, 648, 1008, 300, 274, 598, 732, 950, 262, 838, 
      632, 286, 980, 500, 396, 212, 260, 444, 422, 320, 92, 48, 20, 332, 860, 
      708, 182, 70, 284, 380 ], 
  [ 9, 999, 43, 39, 969, 927, 615, 915, 1003, 77, 163, 943, 147, 113, 897, 
      807, 585, 159, 777, 1017, 543, 135, 679, 63, 407, 811, 931, 235, 531, 
      619, 845, 957, 189, 579, 315, 277, 175, 881, 825, 559, 627, 691, 365, 
      201, 129, 513, 455, 519, 231, 553, 169, 649, 937, 633, 119, 639, 703, 
      655, 249, 489, 401, 609, 255, 479, 903, 887, 697, 153, 343, 921, 243, 
      975, 33, 467, 459, 523, 683, 547, 429, 797, 139, 51, 411, 989, 725, 
      717, 573, 605, 293, 643, 963, 763, 669, 337, 591, 311, 759, 57, 673, 
      753, 473, 537, 207, 495, 1011, 819, 225, 449, 305, 801, 15, 85, 1023, 
      831, 783, 993, 373, 853, 891, 325, 907, 347, 195, 483, 869, 509, 389, 
      221, 437, 123, 101, 29, 269, 741, 771 ], 
  [ 10, 1000, 44, 40, 970, 928, 616, 916, 1004, 78, 164, 944, 148, 114, 898, 
      808, 586, 160, 778, 1018, 544, 136, 680, 64, 408, 812, 932, 236, 532, 
      620, 846, 958, 190, 580, 316, 278, 176, 882, 826, 560, 628, 692, 366, 
      202, 130, 514, 456, 520, 232, 554, 170, 650, 938, 634, 120, 640, 704, 
      656, 250, 490, 402, 610, 256, 480, 904, 888, 698, 154, 344, 922, 244, 
      976, 34, 468, 460, 524, 684, 548, 430, 798, 140, 52, 412, 990, 726, 
      718, 574, 606, 294, 644, 964, 764, 670, 338, 592, 312, 760, 58, 674, 
      754, 474, 538, 208, 496, 1012, 820, 226, 450, 306, 802, 16, 86, 1024, 
      832, 784, 994, 374, 854, 892, 326, 908, 348, 196, 484, 870, 510, 390, 
      222, 438, 124, 102, 30, 270, 742, 772 ], 
  [ 11, 997, 41, 37, 971, 925, 613, 913, 1001, 79, 161, 941, 145, 115, 899, 
      805, 587, 157, 779, 1019, 541, 133, 677, 61, 405, 809, 929, 233, 529, 
      617, 847, 959, 191, 577, 313, 279, 173, 883, 827, 557, 625, 689, 367, 
      203, 131, 515, 453, 517, 229, 555, 171, 651, 939, 635, 117, 637, 701, 
      653, 251, 491, 403, 611, 253, 477, 901, 885, 699, 155, 341, 923, 241, 
      973, 35, 465, 457, 521, 681, 545, 431, 799, 137, 49, 409, 991, 727, 
      719, 575, 607, 295, 641, 961, 761, 671, 339, 589, 309, 757, 59, 675, 
      755, 475, 539, 205, 493, 1009, 817, 227, 451, 307, 803, 13, 87, 1021, 
      829, 781, 995, 375, 855, 889, 327, 905, 345, 193, 481, 871, 511, 391, 
      223, 439, 121, 103, 31, 271, 743, 769 ], 
  [ 12, 998, 42, 38, 972, 926, 614, 914, 1002, 80, 162, 942, 146, 116, 900, 
      806, 588, 158, 780, 1020, 542, 134, 678, 62, 406, 810, 930, 234, 530, 
      618, 848, 960, 192, 578, 314, 280, 174, 884, 828, 558, 626, 690, 368, 
      204, 132, 516, 454, 518, 230, 556, 172, 652, 940, 636, 118, 638, 702, 
      654, 252, 492, 404, 612, 254, 478, 902, 886, 700, 156, 342, 924, 242, 
      974, 36, 466, 458, 522, 682, 546, 432, 800, 138, 50, 410, 992, 728, 
      720, 576, 608, 296, 642, 962, 762, 672, 340, 590, 310, 758, 60, 676, 
      756, 476, 540, 206, 494, 1010, 818, 228, 452, 308, 804, 14, 88, 1022, 
      830, 782, 996, 376, 856, 890, 328, 906, 346, 194, 482, 872, 512, 392, 
      224, 440, 122, 104, 32, 272, 744, 770 ] ]
5 2903040 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], 
  [ 9, 999, 39, 969, 615, 927, 943, 113, 897, 585, 135, 679, 63, 407, 159, 
      807, 777, 543, 175, 881, 559, 201, 129, 825, 513, 169, 649, 937, 633, 
      119, 903, 887, 697, 479, 343, 921, 975, 33, 639, 703, 655, 455, 519, 
      231, 553, 489, 401, 609, 255, 591, 311, 759, 337, 673, 753, 207, 495, 
      473, 537, 225, 449, 305, 153, 15, 1017, 801, 831, 783, 993, 1023, 57, 
      249 ], [ 10, 1000, 40, 970, 616, 928, 944, 114, 898, 586, 136, 680, 64, 
      408, 160, 808, 778, 544, 176, 882, 560, 202, 130, 826, 514, 170, 650, 
      938, 634, 120, 904, 888, 698, 480, 344, 922, 976, 34, 640, 704, 656, 
      456, 520, 232, 554, 490, 402, 610, 256, 592, 312, 760, 338, 674, 754, 
      208, 496, 474, 538, 226, 450, 306, 154, 16, 1018, 802, 832, 784, 994, 
      1024, 58, 250 ], 
  [ 11, 997, 37, 971, 613, 925, 941, 115, 899, 587, 133, 677, 61, 405, 157, 
      805, 779, 541, 173, 883, 557, 203, 131, 827, 515, 171, 651, 939, 635, 
      117, 901, 885, 699, 477, 341, 923, 973, 35, 637, 701, 653, 453, 517, 
      229, 555, 491, 403, 611, 253, 589, 309, 757, 339, 675, 755, 205, 493, 
      475, 539, 227, 451, 307, 155, 13, 1019, 803, 829, 781, 995, 1021, 59, 
      251 ], [ 12, 998, 38, 972, 614, 926, 942, 116, 900, 588, 134, 678, 62, 
      406, 158, 806, 780, 542, 174, 884, 558, 204, 132, 828, 516, 172, 652, 
      940, 636, 118, 902, 886, 700, 478, 342, 924, 974, 36, 638, 702, 654, 
      454, 518, 230, 556, 492, 404, 612, 254, 590, 310, 758, 340, 676, 756, 
      206, 494, 476, 540, 228, 452, 308, 156, 14, 1020, 804, 830, 782, 996, 
      1022, 60, 252 ], 
  [ 17, 977, 105, 951, 593, 873, 209, 89, 785, 183, 71, 839, 567, 177, 657, 
      945, 417, 65, 393, 329, 857, 663, 745, 561, 497, 599, 303, 705, 423, 
      735, 711, 215, 503, 879, 297, 833, 353, 95, 863, 441, 377, 751, 729, 
      359, 791, 983, 257, 287, 263, 399, 111, 335, 447, 281, 23, 383 ], 
  [ 18, 978, 106, 952, 594, 874, 210, 90, 786, 184, 72, 840, 568, 178, 658, 
      946, 418, 66, 394, 330, 858, 664, 746, 562, 498, 600, 304, 706, 424, 
      736, 712, 216, 504, 880, 298, 834, 354, 96, 864, 442, 378, 752, 730, 
      360, 792, 984, 258, 288, 264, 400, 112, 336, 448, 282, 24, 384 ], 
  [ 19, 979, 107, 949, 595, 875, 211, 91, 787, 181, 69, 837, 565, 179, 659, 
      947, 419, 67, 395, 331, 859, 661, 747, 563, 499, 597, 301, 707, 421, 
      733, 709, 213, 501, 877, 299, 835, 355, 93, 861, 443, 379, 749, 731, 
      357, 789, 981, 259, 285, 261, 397, 109, 333, 445, 283, 21, 381 ], 
  [ 20, 980, 108, 950, 596, 876, 212, 92, 788, 182, 70, 838, 566, 180, 660, 
      948, 420, 68, 396, 332, 860, 662, 748, 564, 500, 598, 302, 708, 422, 
      734, 710, 214, 502, 878, 300, 836, 356, 94, 862, 444, 380, 750, 732, 
      358, 790, 982, 260, 286, 262, 398, 110, 334, 446, 284, 22, 382 ], 
  [ 25, 985, 55, 97, 81, 601, 911, 127, 865, 217, 247, 849, 143, 185, 665, 
      953, 425, 935, 823, 527, 895, 199, 385, 321, 369, 737, 569, 505, 793, 
      471, 535, 623, 415, 433, 713, 265, 721, 687, 351, 289, 841, 361, 583, 
      73, 167, 919, 151, 551, 695, 239, 463, 815, 767, 487, 1015, 647, 1007, 
      967, 273, 319, 631, 775, 47 ], 
...
  [ 31, 991, 49, 103, 87, 607, 905, 121, 871, 223, 241, 855, 137, 191, 671, 
      959, 431, 929, 817, 521, 889, 193, 391, 327, 375, 743, 575, 511, 799, 
      465, 529, 617, 409, 439, 719, 271, 727, 681, 345, 295, 847, 367, 577, 
      79, 161, 913, 145, 545, 689, 233, 457, 809, 761, 481, 1009, 641, 1001, 
      961, 279, 313, 625, 769, 41 ], 
  [ 32, 992, 50, 104, 88, 608, 906, 122, 872, 224, 242, 856, 138, 192, 672, 
      960, 432, 930, 818, 522, 890, 194, 392, 328, 376, 744, 576, 512, 800, 
      466, 530, 618, 410, 440, 720, 272, 728, 682, 346, 296, 848, 368, 578, 
      80, 162, 914, 146, 546, 690, 234, 458, 810, 762, 482, 1010, 642, 1002, 
      962, 280, 314, 626, 770, 42 ] ]
9 40320 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], 
  [ 17, 977, 105, 593, 873, 209, 89, 177, 657, 945, 417, 393, 329, 857, 745, 
      561, 497, 785, 297, 833, 353, 65, 441, 377, 705, 729, 257, 281 ], 
  [ 18, 978, 106, 594, 874, 210, 90, 178, 658, 946, 418, 394, 330, 858, 746, 
      562, 498, 786, 298, 834, 354, 66, 442, 378, 706, 730, 258, 282 ], 
...
  [ 31, 991, 103, 607, 871, 223, 87, 191, 671, 959, 431, 391, 327, 855, 743, 
      575, 511, 799, 295, 847, 367, 79, 439, 375, 719, 727, 271, 279 ], 
  [ 32, 992, 104, 608, 872, 224, 88, 192, 672, 960, 432, 392, 328, 856, 744, 
      576, 512, 800, 296, 848, 368, 80, 440, 376, 720, 728, 272, 280 ], 
  [ 33, 921, 993, 153, 801, 937, 537, 609, 633, 697, 169, 449, 513, 225, 673, 
      553, 249, 473, 129, 57, 401, 585, 1017, 649, 825, 305, 897, 337, 201, 
      489, 881, 969, 777, 753, 113 ], 
  [ 34, 922, 994, 154, 802, 938, 538, 610, 634, 698, 170, 450, 514, 226, 674, 
      554, 250, 474, 130, 58, 402, 586, 1018, 650, 826, 306, 898, 338, 202, 
      490, 882, 970, 778, 754, 114 ], 
...
  [ 47, 919, 1007, 151, 815, 935, 535, 623, 631, 695, 167, 463, 527, 239, 
      687, 551, 247, 471, 143, 55, 415, 583, 1015, 647, 823, 319, 911, 351, 
      199, 487, 895, 967, 775, 767, 127 ], 
  [ 48, 920, 1008, 152, 816, 936, 536, 624, 632, 696, 168, 464, 528, 240, 
      688, 552, 248, 472, 144, 56, 416, 584, 1016, 648, 824, 320, 912, 352, 
      200, 488, 896, 968, 776, 768, 128 ] ]
17 1440 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
...
  [ 28 ], [ 29 ], [ 30 ], [ 31 ], [ 32 ], 
  [ 33, 921, 153, 801, 537, 633, 697, 449, 513, 673, 249, 473, 1017, 825, 
      225, 897, 609, 129, 57, 993 ], 
  [ 34, 922, 154, 802, 538, 634, 698, 450, 514, 674, 250, 474, 1018, 826, 
      226, 898, 610, 130, 58, 994 ], 
...
  [ 47, 919, 151, 815, 535, 631, 695, 463, 527, 687, 247, 471, 1015, 823, 
      239, 911, 623, 143, 55, 1007 ], 
  [ 48, 920, 152, 816, 536, 632, 696, 464, 528, 688, 248, 472, 1016, 824, 
      240, 912, 624, 144, 56, 1008 ], 
  [ 65, 833, 417, 729, 705, 353, 281, 857, 257, 441, 89, 377 ], 
  [ 66, 834, 418, 730, 706, 354, 282, 858, 258, 442, 90, 378 ], 
...
  [ 79, 847, 431, 727, 719, 367, 279, 855, 271, 439, 87, 375 ], 
  [ 80, 848, 432, 728, 720, 368, 280, 856, 272, 440, 88, 376 ], 
...
  [ 127, 895, 199, 415, 351, 767, 551, 487, 967, 319, 647, 935, 775, 583, 167 
     ], [ 128, 896, 200, 416, 352, 768, 552, 488, 968, 320, 648, 936, 776, 
      584, 168 ] ]
33 72 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
...
  [ 64 ], [ 65, 833, 417, 705, 353, 257 ], [ 66, 834, 418, 706, 354, 258 ], 
  [ 67, 835, 419, 707, 355, 259 ], [ 68, 836, 420, 708, 356, 260 ], 
  [ 69, 837, 421, 709, 357, 261 ], [ 70, 838, 422, 710, 358, 262 ], 
...
  [ 125, 893, 413, 765, 349, 317 ], [ 126, 894, 414, 766, 350, 318 ], 
  [ 127, 895, 415, 767, 351, 319 ], [ 128, 896, 416, 768, 352, 320 ], 
  [ 129, 609, 897, 673, 993, 513, 801, 225, 449 ], 
  [ 130, 610, 898, 674, 994, 514, 802, 226, 450 ], 
  [ 131, 611, 899, 675, 995, 515, 803, 227, 451 ], 
...
  [ 158, 638, 926, 702, 1022, 542, 830, 254, 478 ], 
  [ 159, 639, 927, 703, 1023, 543, 831, 255, 479 ], 
  [ 160, 640, 928, 704, 1024, 544, 832, 256, 480 ], 
  [ 161, 577, 929, 641, 961, 545, 769, 193, 481 ], 
  [ 162, 578, 930, 642, 962, 546, 770, 194, 482 ], 
  [ 163, 579, 931, 643, 963, 547, 771, 195, 483 ], 
...
  [ 190, 606, 958, 670, 990, 574, 798, 222, 510 ], 
  [ 191, 607, 959, 671, 991, 575, 799, 223, 511 ], 
  [ 192, 608, 960, 672, 992, 576, 800, 224, 512 ] ]
65 12 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], 
  [ 10 ], [ 11 ], [ 12 ], [ 13 ], [ 14 ], [ 15 ], [ 16 ], [ 17 ], [ 18 ], 
...
  [ 124 ], [ 125 ], [ 126 ], [ 127 ], [ 128 ], 
  [ 129, 609, 225, 993, 513, 897 ], [ 130, 610, 226, 994, 514, 898 ], 
  [ 131, 611, 227, 995, 515, 899 ], [ 132, 612, 228, 996, 516, 900 ], 
...
  [ 159, 639, 255, 1023, 543, 927 ], [ 160, 640, 256, 1024, 544, 928 ], 
  [ 161, 577, 193, 961, 545, 929 ], [ 162, 578, 194, 962, 546, 930 ], 
  [ 163, 579, 195, 963, 547, 931 ], [ 164, 580, 196, 964, 548, 932 ], 
...
  [ 191, 607, 223, 991, 575, 959 ], [ 192, 608, 224, 992, 576, 960 ], 
  [ 257, 353 ], [ 258, 354 ], [ 259, 355 ], [ 260, 356 ], [ 261, 357 ], 
  [ 262, 358 ], [ 263, 359 ], [ 264, 360 ], [ 265, 361 ], [ 266, 362 ], 
...
  [ 312, 344 ], [ 313, 345 ], [ 314, 346 ], [ 315, 347 ], [ 316, 348 ], 
  [ 317, 349 ], [ 318, 350 ], [ 319, 351 ], [ 320, 352 ], [ 385, 865, 737 ], 
  [ 386, 866, 738 ], [ 387, 867, 739 ], [ 388, 868, 740 ], [ 389, 869, 741 ], 
  [ 390, 870, 742 ], [ 391, 871, 743 ], [ 392, 872, 744 ], [ 393, 873, 745 ], 
...
  [ 506, 794, 666 ], [ 507, 795, 667 ], [ 508, 796, 668 ], [ 509, 797, 669 ], 
  [ 510, 798, 670 ], [ 511, 799, 671 ], [ 512, 800, 672 ] ]
129 2 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], ...
  [ 508 ], [ 509 ], [ 510 ], [ 511 ], [ 512 ], [ 513, 897 ], [ 514, 898 ], 
  [ 515, 899 ], [ 516, 900 ], [ 517, 901 ], [ 518, 902 ], [ 519, 903 ], 
  [ 520, 904 ], [ 521, 905 ], [ 522, 906 ], [ 523, 907 ], [ 524, 908 ], 
...
  [ 635, 1019 ], [ 636, 1020 ], [ 637, 1021 ], [ 638, 1022 ], [ 639, 1023 ], 
  [ 640, 1024 ], [ 641, 769 ], [ 642, 770 ], [ 643, 771 ], [ 644, 772 ], 
  [ 645, 773 ], [ 646, 774 ], [ 647, 775 ], [ 648, 776 ], [ 649, 777 ], 
...
  [ 765, 893 ], [ 766, 894 ], [ 767, 895 ], [ 768, 896 ] ]
513 1 [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ], [ 9 ], ...
gap> 
TATA(D,[2,5,17,23,28,46,142,238,622]);

dd:=12; #zuvor ERWIND für dmax:=12 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#100055114296433049600
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#49630513043865600
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#50030759116800
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#101072240640
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#394813440
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#2903040
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#40320
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#1152
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#72
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622 ...]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#12
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 1358 ], [ 1614, 3534, 3022 ]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#6
O12:=Orbits(S11,O11[2]);#[ 1230 ], [ 1358 ] 
S12:=Stabilizer(S11,O11[3][1]);;Size(S12);#2
O13:=Orbits(S12,O11[3]);#[ 1614 ], [ 3022, 3534 ] 
S13:=Stabilizer(S12,O13[2][1]);;Size(S13);#1

dd:=14; #zuvor ERWIND für dmax:=14 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
#S1:=Stabilizer(G,[D0,D1],OnTuplesSets);;Size(S1);#3383111551045856560939008000
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#3383111551045856560939008000
O2:=Orbits(S1,[1..Size(D)]);#[ 1 ], [ 2, 60, 5, 14, 36, 32, 28, 7 
S2:=Stabilizer(S1,O2[2][1]);;Size(S2);#416229275473161486336000
O3:=Orbits(S2,O2[2]);#[ 2 ], [ 5, 46, 6, ... ], [ 7, 32, ... ] ]
S3:=Stabilizer(S2,O3[2][1]);;Size(S3);#103231467131240448000
O4:=Orbits(S3,O3[2]);#[ 5 ], [ 6 ], [ 17, 46, 54, 28, 23 ], [ 18, 45, 53, 27, 24 ]
S4:=Stabilizer(S3,O4[3][1]);;Size(S4);#51231497335603200
O5:=Orbits(S4,O4[3]);#[ 17 ], [ 23, 28, 46, 54 ] 
S5:=Stabilizer(S4,O5[2][1]);;Size(S5);#50030759116800
O6:=Orbits(S5,O5[2]);#[ 23 ], [ 28, 54, 46 ]
S6:=Stabilizer(S5,O6[2][1]);;Size(S6);#94755225600
O7:=Orbits(S6,O6[2]);#[ 28 ], [ 46, 54 ]
S7:=Stabilizer(S6,O7[2][1]);;Size(S7);#348364800
O8:=Orbits(S7,O7[2]);#[ 46 ], [ 54 ], [ 142, 238 ], [ 150, 246 ]
S8:=Stabilizer(S7,O8[3][1]);;Size(S8);#2580480
O9:=Orbits(S8,O8[3]);#[ 142], [ 238, 1006, 622, 462 ]
S9:=Stabilizer(S8,O9[2][1]);;Size(S9);#40320
O10:=Orbits(S9,O9[2]);#[ 238 ], [ 462 ...], [ 622, ... ]
S10:=Stabilizer(S9,O10[2][1]);;Size(S10);#1440
O11:=Orbits(S10,O10[2]);#[ 462 ], [ 1230, 5838, ... ], [ 1614, 5198, 3534 ...]
S11:=Stabilizer(S10,O11[2][1]);;Size(S11);#120
O12:=Orbits(S11,O11[2]);#[ 1230 ], [ 1358 ], [ 4302, 6990, 11598, 13646, 5838 ], [ 4430, 6862, 11470, 13518, 5966 ]
S12:=Stabilizer(S11,O12[3][1]);;Size(S12);#24
O13:=Orbits(S12,O12[3]);#[ 4302 ], [ 5838, 11598, 6990, 13646 ] 
S13:=Stabilizer(S12,O13[2][1]);;Size(S13);#6
O14:=Orbits(S13,O13[2]);#[ 5838 ], [ 6990, 11598, 13646 ]
S14:=Stabilizer(S13,O14[2][1]);;Size(S14);#2
O15:=Orbits(S14,O14[2]);#[ 6990 ], [ 11598, 13646 ]
S15:=Stabilizer(S14,O15[2][1]);;Size(S15);#1

dd:=16; #zuvor ERWIND für dmax:=16 generieren in AB_JETZT_NEU.txt
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
D:=DIAG(R); Size(D);
G:=AUT_A(dd);
#O0:=Orbit(Gg,D,Permuted);;Size(O0);
#S1:=Stabilizer(G,D,Permuted);;Size(S1);#40320
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#3383111551045856560939008000



dd:=8
G:=AUT_A(dd);
R:=ERGS2[dd][655];
R:=ERGS2[dd][569];
R:=ERGS2[dd][713];
R:=ERGS2[dd][705];
D:=DIAG(R[1]);Collected(D);
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S1:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
D:=DIAG(R[2]);Collected(D);
D1:=[]; D0:=[]; for i in [2..Size(D)] do if D[i]=0 then Add(D0,i); else Add(D1,i); fi; od; D0; D1; 
D0:=SortedList(D0);
D1:=SortedList(D1);
S2:=Stabilizer(G,D0,OnSets);;Size(S1);#348364800
S3:=Intersection(S1,S2);Size(S3);
Orbits(S3,[1..Size(D)]);
#für R:=ERGS2[dd][655]; #4
[ [ 1 ], [ 2, 5, 189, 253 ], [ 3, 17, 10, 212 ], [ 4, 21, 182, 48 ], 
  [ 6, 65 ], [ 7, 18, 246, 112 ], [ 8, 22, 74, 148 ], [ 9, 216, 191, 237 ], 
  [ 11, 200, 184, 64 ], [ 12, 196 ], [ 13, 215, 67, 81 ], 
  [ 14, 211, 255, 173 ], [ 15, 199, 76, 132 ], [ 16, 195, 248, 128 ], 
  [ 19, 219 ], [ 20, 23, 103, 39 ], [ 24, 155 ], [ 25, 214, 110, 230 ], 
  [ 26, 210 ], [ 27, 198, 101, 55 ], [ 28, 194, 217, 203 ], 
  [ 29, 213, 146, 90 ], [ 30, 209, 46, 166 ], [ 31, 197, 153, 139 ], 
  [ 32, 193, 37, 119 ], [ 33, 120, 228, 125 ], [ 34, 116, 96, 129 ], 
  [ 35, 104, 235, 176 ], [ 36, 100, 87, 84 ], [ 38, 115, 164, 61 ], 
  [ 40, 99, 171, 240 ], [ 41, 161, 94, 145 ], [ 42, 165, 226, 109 ], 
  [ 43, 177, 85, 68 ], [ 44, 181, 233, 192 ], [ 45, 162 ], 
  [ 47, 178, 169, 256 ], [ 49, 118 ], [ 50, 114, 141, 138 ], 
  [ 51, 102, 58, 167 ], [ 52, 98, 134, 91 ], [ 53, 117, 205, 202 ], 
  [ 54, 113 ], [ 56, 97, 122, 231 ], [ 57, 163, 143, 154 ], 
  [ 59, 179, 136, 75 ], [ 60, 183 ], [ 62, 168, 207, 218 ], 
  [ 63, 180, 124, 247 ], [ 66, 69, 186, 250 ], [ 70 ], [ 71, 82, 241, 107 ], 
  [ 72, 86, 77, 151 ], [ 73, 152, 188, 234 ], [ 78, 147, 252, 170 ], 
  [ 79, 135 ], [ 80, 131, 243, 123 ], [ 83, 224 ], [ 88, 160 ], 
  [ 89, 150, 105, 225 ], [ 92, 130, 222, 208 ], [ 93, 149 ], 
  [ 95, 133, 158, 144 ], [ 106, 229 ], [ 108, 245, 238, 187 ], 
  [ 111, 242, 174, 251 ], [ 121, 227, 140, 157 ], [ 126, 232, 204, 221 ], 
  [ 127, 244 ], [ 137, 206 ], [ 142 ], [ 156, 159, 172, 236 ], 
  [ 175, 239, 220, 223 ], [ 185, 254 ], [ 190, 249 ], [ 201 ] ]
#für R:=ERGS2[dd][569]; #96
[ [ 1 ], [ 2, 3, 56, 5, 206, 94, 60, 159, 9, 172, 108, 110, 88, 152, 207, 175 
     ], [ 4, 6, 7, 251, 10, 11, 13, 247, 246, 244, 250, 253 ], 
  [ 8, 14, 12, 15, 194, 195, 53, 57, 162, 99, 153, 165, 101, 89, 83, 146 ], 
  [ 16 ], [ 17, 65, 33, 129, 180, 116, 237, 221, 214, 215, 122, 118, 183, 
      187, 235, 234 ], 
  [ 18, 66, 34, 131, 133, 35, 69, 19, 220, 137, 73, 232, 21, 41, 127, 190 ], 
  [ 20, 70, 36, 135, 74, 42, 43, 128, 22, 23, 141, 139, 77, 240, 192, 224 ], 
  [ 24, 78, 44, 143, 115, 178, 217, 229, 117, 181, 226, 210, 211, 227, 185, 
      121 ], [ 25, 67, 37, 130, 126, 191, 216, 236, 124, 188, 239, 223, 222, 
      238, 184, 120 ], 
  [ 26, 68, 38, 132, 75, 39, 138, 27, 225, 134, 71, 113, 29, 177, 209, 45 ], 
  [ 28, 72, 40, 136, 46, 76, 47, 179, 30, 31, 142, 140, 79, 213, 114, 233 ], 
  [ 32, 80, 48, 144, 189, 125, 228, 212, 219, 218, 119, 123, 186, 182, 230, 
      231 ], [ 49, 81, 145, 96, 97, 161, 193, 112, 176, 208, 160, 64 ], 
  [ 50, 82, 147, 105, 98, 163, 248, 197, 51, 85, 169, 149, 254, 252, 255, 201 
     ], [ 52, 86, 151, 166, 106, 171, 205, 154, 91, 61, 103, 196 ], 
  [ 54, 90, 58, 155, 84, 100, 102, 164, 148, 167, 199, 198, 109, 59, 55, 150, 
      87, 203, 157, 93, 173, 170, 202, 107 ], 
  [ 62, 92, 156, 158, 104, 168, 245, 200, 204, 174, 63, 95, 242, 249, 111, 
      243 ], [ 241 ], [ 256 ] ]
#für R:=ERGS2[dd][713];#120
[ [ 1 ], [ 2, 220, 3, 250, 236, 17, 244, 9, 251, 188, 33, 65 ], 
  [ 4, 41, 11, 25, 18, 10, 234, 187, 204, 35, 186, 219, 73, 97, 81 ], 
  [ 5, 48, 32, 239, 176, 222, 94, 133, 160, 253, 111, 125 ], 
  [ 6, 245, 7, 231, 21, 221, 237, 214, 168, 64, 37, 96, 175, 126, 152, 127, 
      69, 112, 144, 158 ], 
  [ 8, 22, 229, 39, 167, 213, 85, 150, 136, 256, 128, 101 ], 
  [ 12, 210, 241, 227, 26, 43, 202, 185, 51, 68, 203, 164, 148, 50, 89, 105, 
      170, 83, 98, 155 ], 
  [ 13, 215, 230, 207, 174, 206, 183, 120, 159, 189, 182, 200 ], 
  [ 14, 15, 29, 38, 23, 199, 45, 166, 205, 173, 198, 77, 143, 151, 142, 70, 
      157, 53, 71, 181 ], 
  [ 16, 255, 240, 254, 30, 197, 224, 165, 40, 24, 47, 93, 192, 86, 149, 117, 
      135, 109, 134, 103 ], 
  [ 19, 228, 34, 180, 212, 66, 67, 249, 235, 156, 218, 242, 49, 172, 243 ], 
  [ 20, 57, 36, 75, 82, 211, 226, 74, 42, 140, 99, 154, 179, 217, 27, 233, 
      113, 171, 196, 178 ], 
  [ 28, 194, 44, 177, 195, 90, 107, 52, 84, 115, 100, 162, 121, 114, 147 ], 
  [ 31, 54, 46, 87, 55, 78, 248, 141, 102, 72, 79, 61 ], 
  [ 56, 238, 191, 223, 88, 80, 190, 62, 246, 247, 104, 118, 208, 232, 63, 
      184, 95, 119, 110, 216 ], 
  [ 58, 201, 59, 169, 91, 225, 163, 132, 153, 146, 106, 209, 76, 138, 139 ], 
  [ 60, 92, 130, 108, 145, 131, 122, 161, 193, 116, 137, 123 ], [ 124 ], 
  [ 129 ], [ 252 ] ]
#für R:=ERGS2[dd][705];#4
[ [ 1 ], [ 2, 182, 110, 116 ], [ 3, 10, 159, 174 ], [ 4, 189, 244, 223 ], 
  [ 5, 137, 81, 119 ], [ 6, 62 ], [ 7, 130, 207, 220 ], [ 8, 53, 164, 169 ], 
  [ 9, 184, 193, 238 ], [ 11, 191, 95, 65 ], [ 12, 52 ], [ 13, 64, 145, 156 ],
  [ 14, 139, 254, 233 ], [ 15, 55 ], [ 16, 132, 100, 70 ], 
  [ 17, 41, 187, 131 ], [ 18, 158, 216, 242 ], [ 19, 34, 37, 48 ], 
  [ 20, 149, 74, 93 ], [ 21, 161, 235, 245 ], [ 22, 136 ], 
  [ 23, 170, 117, 90 ], [ 24, 29, 26, 43 ], [ 25, 160, 123, 112 ], 
  [ 27, 151, 229, 195 ], [ 28, 36, 138, 178 ], [ 30, 163, 72, 107 ], 
  [ 31, 181 ], [ 32, 172, 218, 200 ], [ 33, 168, 67, 88 ], 
  [ 35, 175, 221, 251 ], [ 38, 155, 128, 83 ], [ 39, 141 ], 
  [ 40, 148, 226, 256 ], [ 42, 166, 240, 202 ], [ 44, 173, 114, 101 ], 
  [ 45, 153, 211, 205 ], [ 46, 192 ], [ 47, 146, 77, 98 ], 
  [ 49, 144, 249, 214 ], [ 50, 59, 150, 167 ], [ 51, 135, 103, 121 ], 
  [ 54, 179, 198, 209 ], [ 56, 188, 92, 126 ], [ 57 ], [ 58, 142, 86, 76 ], 
  [ 60, 133, 204, 231 ], [ 61, 177, 105, 79 ], [ 63, 186, 247, 228 ], 
  [ 66, 236, 212, 122 ], [ 68, 227, 78, 213 ], [ 69, 215, 239, 125 ], 
  [ 71, 224, 113, 210 ], [ 73, 234, 127, 232 ], [ 75, 225 ], [ 80, 222 ], 
  [ 82, 196, 106, 252 ], [ 84, 203, 248, 87 ], [ 85, 255 ], 
  [ 89, 194, 197, 102 ], [ 91, 201 ], [ 94, 253, 250, 97 ], 
  [ 96, 246, 104, 206 ], [ 99, 241 ], [ 108, 243, 208, 111 ], [ 109, 199 ], 
  [ 115, 217 ], [ 118, 237, 124, 219 ], [ 120, 230 ], [ 129, 180, 183, 190 ], 
  [ 134, 143, 140, 185 ], [ 147 ], [ 152, 176 ], [ 154, 162 ], [ 157, 165 ], 
  [ 171 ] ]


dd:=6;
R:=ERGS2[dd][2];
D:=(4-2*DIAG(R[1])-DIAG(R[2])) mod 4;
Remove(D,1);
RD:=RVOND(dd,D);
G:=PcgsOfR(RD); IdSmallGroup(G); #[32,35]
A:=AutomorphismGroup(G);
Size(A);


####13#### ist MARKZAHL4 aus ERGSGRAPH.html
MARKZAHL4:=function(G)
  local x,y,MERK,MGES,n,a,e, MARKS,DDNEU,MARKL,MARKLNUM,MARK,NUM1,NUM2,DDij,DD00,DD01,k,ind, SD,RET,i,MARKLFERT,r;
  MGES:=[];
  e:=Identity(G);
  n:=Size(G);
  DDNEU:=[];
  MARKS:="";
  MARKL:=[];
  MARKLNUM:=[];
  MARK:=[];
  SD:=n;
  i:=1;
  for x in G do
    MARK[i]:=[];
    NUM1:=[];
    NUM2:=[];
    for y in G do 
      DDij:=[x^2,y^2,(x*y)^2];
      DD00:=List(DDij);
      DD01:=List(DDij);
      if DD01[3]=e then DD01[3]:=0; else
        if DD01[3]=DD01[1] then DD01[3]:=1; else
          if DD01[3]=DD01[2] then DD01[3]:=2; else
            if DD01[3]=DD01[1]*DD01[2] then DD01[3]:=3; else
              DD01[3]:=4;
              fi;
            fi;
          fi;
        fi;
      if DD01[2]=e then DD01[2]:=0; else
        if DD01[2]=DD01[1] then DD01[2]:=1; else
          DD01[2]:=2;
          fi;
        fi;
      if DD01[1]=e then DD01[1]:=0; else
        DD01[1]:=1;
        fi;
      ind:=Position(MARK[i],DDij);
      if ind=fail then
        Add(MARK[i],DDij);
        ind:=Size(MARK[i]);
        NUM1[ind]:=50*DD01[1]+10*DD01[2]+DD01[3];
        NUM2[ind]:=[50*DD01[1]+10*DD01[2]+DD01[3],DD00];
        fi;
      NUM1[ind]:=NUM1[ind]+100;
      NUM2[ind][1]:=NUM2[ind][1]+100;
      od;
    NUM2:=SortedList(NUM2);
    RET:=[[],[]];
    for r in [1..Size(NUM2)] do Add(RET[1],NUM2[r][1]); od;
    for r in [1..Size(NUM2)] do Add(RET[2],NUM2[r][2]); od;
    MARK[i]:=RET;
    ind:=Position(MARKL,RET);
    if ind=fail then
      Add(MARKL,RET);
      ind:=Size(MARKL);
      MARKLNUM[ind]:=[0,RET];
      fi;
    MARKLNUM[ind][1]:=MARKLNUM[ind][1]+1;
    DDNEU[i]:=RET;
    i:=i+1;
    od;
  MARKLNUM:=SortedList(MARKLNUM);
  MARKL:=List(MARKLNUM,i->i[2]);
  for i in [1..SD] do DDNEU[i]:=Position(MARKL,DDNEU[i]); od;
  MARKLFERT:=List(MARKLNUM,i->[i[1],i[2][1]]);
  return [MARK,MARKL,MARKLNUM,DDNEU,Collected(MARKLFERT)];
  end;
G:=SmallGroup(8,3);
MARKZAHL4(G);
G:=SmallGroup(16,13);
MARKZAHL4(G);

for n in [2..8] do
  GESAMTDILIST4:=[];
#                            8       16       32         64          128            256                  512
#  for index in [[1],[1],[2..4],[10..13],[45..50],[260..266],[2319..2327],[56082..56091],[10494201..10494212]][n] do
#  for index in [[1],[1],[1..4], [2..13],[21..50],[192..266],[2150..2327],[55626..56091],[1..10494212]][n] do
  for index in [[1],[1],[1..4],  [1..13], [1..50],  [1..266],   [1..2327],[1..56091],[1..10494212]][n] do
    G:=SmallGroup(2^n,index);
    if PClassPGroup(G)=2 and RankPGroup(G)>n-3 then
      ERG1:=MARKZAHL4(G);
      ERG2:=MARKZAHL5(ERG1[4]);
      ERG:=[RankPGroup(G),ERG1[5],ERG2[5]];
      Print(IdSmallGroup(G),", ",ERG,",\n");
      ind:=Position(GESAMTDILIST4,ERG);
      if ind<>fail then Error(index," ",ind); fi;
      Add(GESAMTDILIST4,ERG);
      fi;
    od;
  od;
G:=SmallGroup(64,26);
M26:=MARKZAHL4(G);
G:=SmallGroup(64,2);
M2:=MARKZAHL4(G);
M26[5]=M2[5];

#geht bis auf [16,5]=[16,2], [32,4]=[32,3], [32,13]=[32,12], [32,16]=[32,3], [32,21]=[32,2], [32,36]=[32,2], ...
gap> MARKZAHL4(SmallGroup(16,5));
[ [ [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,1,0 ], [3,2,1 ], [3,3,2 ] ] ] ], 
  [ [ [ 32, 35, 35, 35 ], [ [0,0,0 ], [0,2,2 ], [0,1,1 ], [0,3,3 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [1,0,1 ], [1,3,0 ], [1,2,3 ], [1,1,2 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,1,3 ], [2,3,1 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,1,0 ], [3,2,1 ], [3,3,2 ] ] ] ], 
  [   [ 4, [ [ 32, 35, 35, 35 ], [ [0,0,0 ], [0,2,2 ], [0,1,1 ], [0,3,3 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [1,0,1 ], [1,3,0 ], [1,2,3 ], [1,1,2 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,1,3 ], [2,3,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,1,0 ], [3,2,1 ], [3,3,2 ] ] ] ] ],
  [ [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,1,0 ], [3,2,1 ], [3,3,2 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39 ] ], 3 ] ] ]
gap> MARKZAHL4(SmallGroup(16,2));
[ [ [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,3,0 ], [3,2,1 ], [3,1,2 ] ] ] ], 
  [ [ [ 32, 35, 35, 35 ], [ [0,0,0 ], [0,2,2 ], [0,1,1 ], [0,3,3 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [1,0,1 ], [1,1,0 ], [1,2,3 ], [1,3,2 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,1,3 ], [2,3,1 ] ] ], 
      [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,3,0 ], [3,2,1 ], [3,1,2 ] ] ] ], 
  [   [ 4, [ [ 32, 35, 35, 35 ], [ [0,0,0 ], [0,2,2 ], [0,1,1 ], [0,3,3 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [1,0,1 ], [1,1,0 ], [1,2,3 ], [1,3,2 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,1,3 ], [2,3,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,3,0 ], [3,2,1 ], [3,1,2 ] ] ] ] ],
  [ [ [ 37, 38, 39, 39 ], [ [3,0,3 ], [3,3,0 ], [3,2,1 ], [3,1,2 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39 ] ], 3 ] ] ]
gap> MARKZAHL4(SmallGroup(32,4));
[ [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,5 ], [3,6,1 ], [3,1,2 ], [3,5,6 ], [3,3,4 ] ] ] ], 
  [ [ [ 32, 35, 35, 35, 35, 35, 35, 35 ], [ [0,0,0 ], [0,4,4 ], [0,2,2 ], [0,6,6 ], [0,1,1 ], [0,5,5 ], [0,7,7 ], [0,3,3 ] ] ], 
  
[ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,2,7 ], [1,6,3 ], [1,1,4 ], [1,7,6 ], [1,3,2 ] ] ], #3
[ [2,0,2 ], [2,2,0 ], [2,4,6 ], [2,6,4 ], [2,1,7 ], [2,5,3 ], [2,7,1 ], [2,3,5 ] ] ], 2 
[ [4,0,4 ], [4,4,0 ], [4,2,6 ], [4,6,2 ], [4,1,5 ], [4,5,1 ], [4,7,3 ], [4,3,7 ] ] ], 6
[ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,5 ], [3,6,1 ], [3,1,2 ], [3,5,6 ], [3,3,4 ] ] ], #3
[ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,2,3 ], [5,6,7 ], [5,5,4 ], [5,7,2 ], [5,3,6 ] ] ], #3
[ [6,0,6 ], [6,6,0 ], [6,4,2 ], [6,2,4 ], [6,1,3 ], [6,5,7 ], [6,7,5 ], [6,3,1 ] ] ], 2
[ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,1 ], [7,6,5 ], [7,1,6 ], [7,5,2 ], [7,7,4 ] ] ] ]#3 
#aus MARKZAHL4(SmallGroup(32,3)):
[ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,2,3 ], [1,6,7 ], [1,1,4 ], [1,3,6 ], [1,7,2 ] ] ], #3
[ [2,0,2 ], [2,2,0 ], [2,4,6 ], [2,6,4 ], [2,1,3 ], [2,5,7 ], [2,3,1 ], [2,7,5 ] ] ], 6
[ [4,0,4 ], [4,4,0 ], [4,2,6 ], [4,6,2 ], [4,1,5 ], [4,5,1 ], [4,3,7 ], [4,7,3 ] ] ], 6
[ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,1 ], [3,6,5 ], [3,1,6 ], [3,5,2 ], [3,3,4 ] ] ], #3
[ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,2,7 ], [5,6,3 ], [5,5,4 ], [5,3,2 ], [5,7,6 ] ] ], #3
[ [6,0,6 ], [6,6,0 ], [6,4,2 ], [6,2,4 ], [6,1,7 ], [6,5,3 ], [6,3,5 ], [6,7,1 ] ] ], 6
[ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,5 ], [7,6,1 ], [7,1,2 ], [7,5,6 ], [7,7,4 ] ] ] ]#3
#bis hierher.
  [ 
      [ 4, [ [ 32, 35, 35, 35, 35, 35, 35, 35 ], [ [0,0,0 ], [0,4,4 ], [0,2,2 ], [0,6,6 ], [0,1,1 ], [0,5,5 ], 
                  [0,7,7 ], [0,3,3 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,2,7 ], [1,6,3 ], [1,1,4 ], [1,7,6 ], [1,3,2 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,4,6 ], [2,6,4 ], [2,1,7 ], [2,5,3 ], [2,7,1 ], [2,3,5 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [4,0,4 ], [4,4,0 ], [4,2,6 ], [4,6,2 ], [4,1,5 ], [4,5,1 ], [4,7,3 ], [4,3,7 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,5 ], [3,6,1 ], [3,1,2 ], [3,5,6 ], [3,3,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,2,3 ], [5,6,7 ], [5,5,4 ], [5,7,2 ], [5,3,6 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,2 ], [6,2,4 ], [6,1,3 ], [6,5,7 ], [6,7,5 ], [6,3,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,1 ], [7,6,5 ], [7,1,6 ], [7,5,2 ], [7,7,4 ] ] ] ] ], 
  [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,5 ], [3,6,1 ], [3,1,2 ], [3,5,6 ], [3,3,4 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35, 35, 35, 35, 35 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39, 39, 39, 39, 39 ] ], 7 ] ] ]
gap> MARKZAHL4(SmallGroup(32,3));
[ [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [7,0,7 ], [7,3,0 ], [7,4,3 ], 
              [7,2,5 ], [7,6,1 ], [7,1,2 ], [7,5,6 ], [7,7,4 ] ] ] ], 
  [ [ [ 32, 35, 35, 35, 35, 35, 35, 35 ], [ [0,0,0 ], [0,4,4 ], [0,2,2 ], [0,6,6 ], [0,1,1 ], [0,5,5 ], 
              [0,3,3 ], [0,7,7 ] ] ], 
[ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,2,3 ], [1,6,7 ], [1,1,4 ], [1,3,6 ], [1,7,2 ] ] ], 
[ [2,0,2 ], [2,2,0 ], [2,4,6 ], [2,6,4 ], [2,1,3 ], [2,5,7 ], [2,3,1 ], [2,7,5 ] ] ], 
[ [4,0,4 ], [4,4,0 ], [4,2,6 ], [4,6,2 ], [4,1,5 ], [4,5,1 ], [4,3,7 ], [4,7,3 ] ] ], 
[ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,1 ], [3,6,5 ], [3,1,6 ], [3,5,2 ], [3,3,4 ] ] ], 
[ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,2,7 ], [5,6,3 ], [5,5,4 ], [5,3,2 ], [5,7,6 ] ] ], 
[ [6,0,6 ], [6,6,0 ], [6,4,2 ], [6,2,4 ], [6,1,7 ], [6,5,3 ], [6,3,5 ], [6,7,1 ] ] ], 
[ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,5 ], [7,6,1 ], [7,1,2 ], [7,5,6 ], [7,7,4 ] ] ] ], 
  [ [ 4, [ [ 32, 35, 35, 35, 35, 35, 35, 35 ], [ [0,0,0 ], [0,4,4 ],  [0,2,2 ], [0,6,6 ], [0,1,1 ], [0,5,5 ], [0,3,3 ], [0,7,7 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,2,3 ], [1,6,7 ], [1,1,4 ], [1,3,6 ], [1,7,2 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,4,6 ], [2,6,4 ], [2,1,3 ], [2,5,7 ], [2,3,1 ], [2,7,5 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [4,0,4 ], [4,4,0 ], [4,2,6 ], [4,6,2 ], [4,1,5 ], [4,5,1 ], [4,3,7 ], [4,7,3 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [3,0,3 ], [3,7,0 ], [3,4,7 ], [3,2,1 ], [3,6,5 ], [3,1,6 ], [3,5,2 ], [3,3,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,2,7 ], [5,6,3 ], [5,5,4 ], [5,3,2 ], [5,7,6 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,2 ], [6,2,4 ], [6,1,7 ], [6,5,3 ], [6,3,5 ], [6,7,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,5 ], [7,6,1 ], [7,1,2 ], [7,5,6 ], [7,7,4 ] ] ] ] ], 
  [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [7,0,7 ], [7,3,0 ], [7,4,3 ], [7,2,5 ], [7,6,1 ], [7,1,2 ], [7,5,6 ], [7,7,4 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35, 35, 35, 35, 35 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39, 39, 39, 39, 39 ] ], 7 ] ] ]
gap> 
gap> MARKZAHL4(SmallGroup(32,13));
[ [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,6 ], 
              [6,1,2 ], [6,5,2 ], [6,2,1 ], [6,2,5 ], [6,6,4 ] ] ] ], 
  [ 
      [ [ 32, 35, 35, 35, 67, 67 ], [ [0,0,0 ], [0,4,4 ], 
              [0,1,1 ], [0,5,5 ], [0,2,2 ], [0,6,6 ] ] ], 
[ [2,0,2 ], [2,2,0 ], [2,4,2 ], [2,1,6 ], [2,5,6 ], [2,2,4 ], [2,6,1 ], [2,6,5 ] ] ], 
[ [2,0,2 ], [2,2,0 ], [2,4,2 ], [2,1,6 ], [2,5,6 ], [2,2,4 ], [2,6,5 ], [2,6,1 ] ] ], 
[ [6,0,6 ], [6,6,0 ], [6,4,6 ], [6,1,2 ], [6,5,2 ], [6,2,1 ], [6,2,5 ], [6,6,4 ] ] ], 
[ [6,0,6 ], [6,6,0 ], [6,4,6 ], [6,1,2 ], [6,5,2 ], [6,2,5 ], [6,2,1 ], [6,6,4 ] ] ], 
[ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,1,4 ], [1,2,6 ], [1,6,2 ] ] ], 
[ [4,0,4 ], [4,4,0 ], [4,1,5 ], [4,5,1 ], [4,2,2 ], [4,6,6 ] ] ], 
[ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,5,4 ], [5,2,6 ], [5,6,2 ] ] ] ], 
#aus (32,12):
[ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], [2,5,6 ], [2,2,4 ], [2,2,5 ], [2,6,1 ] ] ], 
[ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], [2,5,6 ], [2,2,5 ], [2,6,1 ], [2,2,4 ] ] ], 
[ [6,0,6 ], [6,2,0 ], [6,4,2 ], [6,1,6 ], [6,5,2 ], [6,2,1 ], [6,6,5 ], [6,6,4 ] ] ], 
[ [6,0,6 ], [6,2,0 ], [6,4,2 ], [6,1,6 ], [6,5,2 ], [6,6,4 ], [6,2,1 ], [6,6,5 ] ] ], 
[ [1,0,1 ], [1,1,0 ], [1,4,5 ], [1,5,4 ], [1,2,2 ], [1,6,6 ] ] ], 
[ [4,0,4 ], [4,4,0 ], [4,1,5 ], [4,5,1 ], [4,2,6 ], [4,6,2 ] ] ], 
[ [5,0,5 ], [5,5,0 ], [5,4,1 ], [5,1,4 ], [5,2,6 ], [5,6,2 ] ] ] ], 
#bis hierher.
  [ 
      [ 4, 
          [ [ 32, 35, 35, 35, 67, 67 ], [ [0,0,0 ], [0,4,4 ], 
                  [0,1,1 ], [0,5,5 ], [0,2,2 ], [0,6,6 ] 
                 ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,4,2 ], [2,1,6 ], 
                  [2,5,6 ], [2,2,4 ], [2,6,1 ], [2,6,5 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,2,0 ], [2,4,2 ], [2,1,6 ], 
                  [2,5,6 ], [2,2,4 ], [2,6,5 ], [2,6,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,6 ], 
                  [6,1,2 ], [6,5,2 ], [6,2,1 ], [6,2,5 ], [6,6,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,6 ], 
                  [6,1,2 ], [6,5,2 ], [6,2,5 ], [6,2,1 ], [6,6,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 71, 71 ], [ [1,0,1 ], [1,5,0 ], [1,4,5 ], [1,1,4 ], 
                  [1,2,6 ], [1,6,2 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 71, 71 ], [ [4,0,4 ], [4,4,0 ], [4,1,5 ], [4,5,1 ], 
                  [4,2,2 ], [4,6,6 ] ] ] ], 
      [ 4, 
          [ [ 37, 38, 39, 39, 71, 71 ], [ [5,0,5 ], [5,1,0 ], [5,4,1 ], [5,5,4 ], 
                  [5,2,6 ], [5,6,2 ] ] ] ] ], 
  [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,6,0 ], [6,4,6 ], 
              [6,1,2 ], [6,5,2 ], [6,2,1 ], [6,2,5 ], [6,6,4 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35, 67, 67 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39, 39, 39, 39, 39 ] ], 4 ], [ [ 4, [ 37, 38, 39, 39, 71, 71 ] ], 3 ] ] ]
gap> MARKZAHL4(SmallGroup(32,12));
[ [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,2,0 ], [6,4,2 ], 
              [6,1,6 ], [6,5,2 ], [6,2,1 ], [6,6,5 ], [6,6,4 ] ] ] ], 
  [ 
      [ [ 32, 35, 35, 35, 67, 67 ], [ [0,0,0 ], [0,4,4 ], 
              [0,1,1 ], [0,5,5 ], [0,2,2 ], [0,6,6 ] ] ], 
[ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], [2,5,6 ], [2,2,4 ], [2,2,5 ], [2,6,1 ] ] ], 
[ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], [2,5,6 ], [2,2,5 ], [2,6,1 ], [2,2,4 ] ] ], 
[ [6,0,6 ], [6,2,0 ], [6,4,2 ], [6,1,6 ], [6,5,2 ], [6,2,1 ], [6,6,5 ], [6,6,4 ] ] ], 
[ [6,0,6 ], [6,2,0 ], [6,4,2 ], [6,1,6 ], [6,5,2 ], [6,6,4 ], [6,2,1 ], [6,6,5 ] ] ], 
[ [1,0,1 ], [1,1,0 ], [1,4,5 ], [1,5,4 ], [1,2,2 ], [1,6,6 ] ] ], 
[ [4,0,4 ], [4,4,0 ], [4,1,5 ], [4,5,1 ], [4,2,6 ], [4,6,2 ] ] ], 
[ [5,0,5 ], [5,5,0 ], [5,4,1 ], [5,1,4 ], [5,2,6 ], [5,6,2 ] ] ] ], 
  [ 
      [ 4, 
          [ [ 32, 35, 35, 35, 67, 67 ], [ [0,0,0 ], [0,4,4 ], 
                  [0,1,1 ], [0,5,5 ], [0,2,2 ], [0,6,6 ] 
                 ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], 
                  [2,5,6 ], [2,2,4 ], [2,2,5 ], [2,6,1 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [2,0,2 ], [2,6,0 ], [2,4,6 ], [2,1,2 ], 
                  [2,5,6 ], [2,2,5 ], [2,6,1 ], [2,2,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,2,0 ], [6,4,2 ], 
                  [6,1,6 ], [6,5,2 ], [6,2,1 ], [6,6,5 ], [6,6,4 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,2,0 ], [6,4,2 ], 
                  [6,1,6 ], [6,5,2 ], [6,6,4 ], [6,2,1 ], [6,6,5 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 71, 71 ], [ [1,0,1 ], [1,1,0 ], [1,4,5 ], [1,5,4 ], 
                  [1,2,2 ], [1,6,6 ] ] ] ], 
      [ 4, [ [ 37, 38, 39, 39, 71, 71 ], [ [4,0,4 ], [4,4,0 ], [4,1,5 ], [4,5,1 ], 
                  [4,2,6 ], [4,6,2 ] ] ] ], 
      [ 4, 
          [ [ 37, 38, 39, 39, 71, 71 ], [ [5,0,5 ], [5,5,0 ], [5,4,1 ], [5,1,4 ], 
                  [5,2,6 ], [5,6,2 ] ] ] ] ], 
  [ [ [ 37, 38, 39, 39, 39, 39, 39, 39 ], [ [6,0,6 ], [6,2,0 ], [6,4,2 ], 
              [6,1,6 ], [6,5,2 ], [6,2,1 ], [6,6,5 ], [6,6,4 ] ] ] ], 
  [ [ [ 4, [ 32, 35, 35, 35, 67, 67 ] ], 1 ], [ [ 4, [ 37, 38, 39, 39, 39, 39, 39, 39 ] ], 4 ], [ [ 4, [ 37, 38, 39, 39, 71, 71 ] ], 3 ] ] ]


MARKZAHL5:=function(D)
  local x,y,MERK,a, MARKS,DDNEU,MARKL,MARKLNUM,MARK,NUM1,NUM2,DDij,DD00,DD01,k,ind, SD,RET,i,MARKLFERT,AMAT;
  SD:=Size(D);
  DDNEU:=[];
  MARKS:="";
  MARKL:=[];
  MARKLNUM:=[];
  MARKLFERT:=[];
  MARK:=[];
  for i in [1..SD] do
    MARK[i]:=[];
    #NUM1:=[];
    #NUM2:=[];
    AMAT:=ListWithIdenticalEntries(24,0);
    for j in [1..SD] do 
      DD01:=[D[i],D[j],D[XORMAT[i][j]]];
      if DD01[3]>0 then
        if DD01[3]=DD01[1] then DD01[3]:=1; else
          if DD01[3]=DD01[2] then DD01[3]:=2; else
            DD01[3]:=3;
            fi;
          fi;
        fi;
      if DD01[2]>0 then
        if DD01[2]=DD01[1] then DD01[2]:=1; else
          DD01[2]:=2;
          fi;
        fi;
      if DD01[1]>0 then
        DD01[1]:=1;
        fi;
      ind:=6*DD01[3]+2*DD01[2]+DD01[1]+1;
      AMAT[ind]:=AMAT[ind]+1;
      od;
    RET:=AMAT;
    MARK[i]:=RET;
    #ind:=Position(MARKL,RET);
    #if ind=fail then
    #  Add(MARKL,RET);
    #  ind:=Size(MARKL);
    #  MARKLNUM[ind]:=[0,RET];
    #  fi;
    #MARKLNUM[ind][1]:=MARKLNUM[ind][1]+1;
    #DDNEU[i]:=RET;
    od;
  #MARKLNUM:=SortedList(MARKLNUM);
  #MARKL:=List(MARKLNUM,i->i[2]);
  #MARKLFERT:=List(MARKLNUM,i->i);
  MARKLFERT:=Reversed(Collected(MARK));
  MARKL:=List(MARKLFERT,i->i[1]);
  for i in [1..SD] do DDNEU[i]:=Position(MARKL,MARK[i])-1; od;
  return [MARK,MARKL,MARKLNUM,DDNEU,MARKLFERT];
  end;
MARKZAHL5(DIAG([[1],[1,1]]))[5];
MARKZAHL5(DIAG([[1],[1,0]]))[5];
MARKZAHL5(DIAG([[1],[0,0]]))[5];

MARKZAHL5ERGS2:=function (dd,nr)
  local D,D1,D2;
  D1:=DIAG(ERGS2[dd][nr][1]);
  D2:=DIAG(ERGS2[dd][nr][2]);
  D:=2*D1+D2;
  return MARKZAHL5(D);
  end;

GESAMTDILIST:=[];
for dd in [2..8] do #aktuell Stopp bei dd:=7; nr:=772;764
  GESAMTDILIST:=[];
  for nr in [1..Size(ERGS2[dd])] do
    ERG:=MARKZAHL5ERGS2(dd,nr)[5];
    Print(dd," ",nr," ",Reversed(ERG),",\n               ",dd," ",nr,"\n");
    if Position(GESAMTDILIST,ERG)<>fail then Error(); fi;
    Add(GESAMTDILIST,ERG);
    od;
  od;

#Halt bei [655,569 ], [713,705], [1067,1055],[1276,1134]
ERG655:=MARKZAHL5ERGS2(8,655);;
ERG569:=MARKZAHL5ERGS2(8,569);;
ERG655[5];ERG655[5]=ERG569[5];
#ERG655[2];ERG655[2]=ERG569[2];

ERG713:=MARKZAHL5ERGS2(8,713);;
ERG705:=MARKZAHL5ERGS2(8,705);;
ERG705[5];ERG705[5]=ERG705[5];

ERG1067:=MARKZAHL5ERGS2(8,1067);;
ERG1055:=MARKZAHL5ERGS2(8,1055);;
ERG1055[5];ERG1055[5]=ERG1055[5];

ERG1276:=MARKZAHL5ERGS2(8,1276);;
ERG1134:=MARKZAHL5ERGS2(8,1134);;
ERG1134[5];ERG1276[5]=ERG1134[5];#false


MARKZAHL5ERGS2M2:=function (dd,nr)
  local D,D1,D2;
  D1:=DIAG(ERGS2[dd][nr][1]);
  D2:=DIAG(ERGS2[dd][nr][2]);
  D:=2*D1+D2;
  RET1:=MARKZAHL5(D);
  RET2:=MARKZAHL5(RET1[4]);
  return [RET1[5],RET2[5]];
  end;

GESAMTDILIST:=[];
for dd in [2..8] do
  GESAMTDILIST:=[];
  for nr in [1..Size(ERGS2[dd])] do
    ERG:=MARKZAHL5ERGS2M2(dd,nr);
    Print(dd," ",nr," ",Reversed(ERG),",\n               ",dd," ",nr,"\n");
    if Position(GESAMTDILIST,ERG)<>fail then Error("ERG doppelt für nr=",nr," ",Position(GESAMTDILIST,ERG)); fi;
    Add(GESAMTDILIST,ERG);
    od;
  od;

#Halt bei [655,569 ], [713,705], [1067,1055],[1276,1134]
ERG655:=MARKZAHL5ERGS2M2(8,655);;
ERG569:=MARKZAHL5ERGS2M2(8,569);;
ERG655[5];ERG655[5]=ERG569[5];
#ERG655[2];ERG655[2]=ERG569[2];

ERG713:=MARKZAHL5ERGS2M2(8,713);;
ERG705:=MARKZAHL5ERGS2M2(8,705);;
ERG705[5];ERG713[5]=ERG705[5];

ERG1067:=MARKZAHL5ERGS2M2(8,1067);;
ERG1055:=MARKZAHL5ERGS2M2(8,1055);;
ERG1055[5];ERG1067[5]=ERG1055[5];

ERG1276:=MARKZAHL5ERGS2M2(8,1276);;
ERG1134:=MARKZAHL5ERGS2M2(8,1134);;
ERG1134[5];ERG1276[5]=ERG1134[5];#false

####################1502 R0VONR(R)
dd:=8;
nr:=655;
nr:=569;
R1:=ERGS2[dd][nr][1];
R2:=ERGS2[dd][nr][2];
R:=2*R1+R2;

R0VONR:=function(R)
  local i,RNEU;
  RNEU:=StructuralCopy(R);
  for i in [1..Size(R)] do
    Add(RNEU[i],RNEU[i][1],1);
    od;
  Add(RNEU,[0],1);
  return RNEU;
  end;
R0VONR(R);
R0VONR(R0VONR(R));
[ [ 3 ], [ 3, 3 ], [ 3, 3, 3 ], [ 3, 3, 3, 3 ], [ 3, 3, 3, 3, 2 ], [ 3, 3, 2, 2, 3, 2 ], [ 3, 2, 3, 2, 2, 3, 2 ], [ 3, 2, 2, 2, 3, 3, 3, 2 ] ]
[ [ 3 ], [ 3, 3 ], [ 3, 3, 3 ], [ 3, 3, 3, 3 ], [ 3, 3, 3, 3, 2 ], [ 3, 3, 3, 2, 3, 2 ], [ 3, 3, 2, 3, 3, 2, 2 ], [ 3, 2, 3, 3, 3, 2, 2, 2 ] ]

R:=[ [0],[0,0],[3,3,3],[ 3,3,3, 3 ], [3,3, 3, 3, 3 ], [3,3, 3, 3, 3, 3 ], [ 3,3,3, 3, 3, 3, 2 ],[ 3,3,3, 3, 2, 2, 3, 2 ], [ 3,3,3, 2, 3, 2, 2, 3, 2 ], [ 3,3,3, 2, 2, 2, 3, 3, 3, 2 ] ];
R:=[ [0],[0,0],[3,3,3],[ 3,3,3, 3 ], [3,3, 3, 3, 3 ], [3,3, 3, 3, 3, 3 ], [ 3,3,3, 3, 3, 3, 2 ],[ 3,3,3, 3, 3, 2, 3, 2 ], [ 3,3,3, 3, 2, 3, 3, 2, 2 ], [ 3,3,3, 2, 3, 3, 3, 2, 2, 2 ] ];


P:=PcgsOfR(R0VONR(R0VONR(R)));
C655:=CharacterTable(P);
Display(C655);
S655:=CharacterTableWithSortedClasses(C655);
Display(S655);
T655:=CharacterTableWithSortedCharacters(S655);
Display(T655);
C569:=CharacterTable(P);
Display(C569);
S569:=CharacterTableWithSortedClasses(C569);
Display(S569);
T569:=CharacterTableWithSortedCharacters(S569);
Display(T569);
C655=C569;
TransformingPermutationsCharacterTables(C655,C569);
RandomIsomorphismTest([
rec(code:=124069155432773930595080878893596861463549201395097535790683112461388528951409204081378062876926654742378743280127790874367,order:=1024),
rec(code:=124069155432773930595080878893596893292236331650362414125358594321054902983652752054315409873561246400647087536618445012735,order:=1024)
],1);

D:=Diagonale(P,true);Add(D,0,1);
M655:=MARKZAHL5(D);
M569:=MARKZAHL5(D);
M655[5]=M569[5];

######### TEST5
GESAMTMERK:=[];
GESAMTMERKORIG:=[];
#function Test5(dd,nr,f) {
TEST5:=function(dd,nr,f)
  local n,R0,R1,DD0,DD1,DD12,M12,ind,EOT;
#  //var dd=document.getElementById("Test3value").value*1;
#  var n=2**(dd+1);
  n:=2^(dd+1);
#  Logtext="Test5 Fortsetzung "+f+" zu [dd,nr]=["+dd+","+nr+"] mit MARKZAHL(DD,1) \n";
##  Print("\n\nTest5 Fortsetzung ",f," zu [dd,nr]=[",dd,",",nr,"] mit MARKZAHL5(DD,1)");
  Print("[",dd,",",nr,"] ");
#  if (nr==1&&f==0) {
#    GESAMTMERK=[];
#    GESAMTMERKORIG=[];
#    }
  if (nr=1 and f=0) then
    GESAMTMERK:=[];
    GESAMTMERKORIG:=[];
    fi;
#  var R0=ERGS2[dd-1][nr-1][0];
#  var R1=ERGS2[dd-1][nr-1][1];
#  R0[dd]=[];
#  R1[dd]=[];
   R0:=StructuralCopy(ERGS2[dd][nr][1]);
   R1:=StructuralCopy(ERGS2[dd][nr][2]);
#  for (var i=0;i<dd+1;i++) {
#    R0[dd].push(1);
#    if ((n-f-1)&(2**i)) R1[dd].unshift(1); else R1[dd].unshift(0);
#    }
   EOT:=EnumeratorOfTuples([0,1],dd+1);
   R0[dd+1]:=EOT[n];
   R1[dd+1]:=EOT[n-f];
#  //alert(R1[dd]);
##  Print(R0);
   Print(R1);
  Print("[",dd,",",nr,"] ",Size(GESAMTMERK)+1," ",f,"    \c");
#  var DD0=DIAG(R0);
#  var DD1=DIAG(R1);
#  var DD12=[]; for (var i=0;i<DD1.length;i++) DD12[i]=2*DD0[i]+DD1[i];
#  var M12=MARKZAHLPUR(DD12,1);//alert(M12);
   DD0:=DIAG(R0);
   DD1:=DIAG(R1);
   DD12:=[]; for i in [1..n] do DD12[i]:=2*DD0[i]+DD1[i]; od;
  #M12:=MARKZAHL5(DD12);
  RET1:=MARKZAHL5(DD12);
  RET2:=MARKZAHL5(RET1[4]);
  M12:=StructuralCopy([RET1[5],RET2[5]]);
#  //alert(M12);
##   Print(M12[5]);
#  var ind=GESAMTMERK.indexOf(M12[0);
   ind:=Position(GESAMTMERK,M12);
#  if (GESAMTMERK.indexOf(M12[0])==-1) {
   if ind=fail then
#    Logtext=Logtext+"";
#    //return;
#    GESAMTMERK.push(M12[0]);
     Add(GESAMTMERK,M12);
     Print("\n");
#    var RT="";
#    for (var i=0;i<R1.length;i++) RT=RT+R1[i].join("");
#    GESAMTMERKORIG.unshift(GESAMTMERK.length+" "+RT+" "+dd+" "+nr+" "+f);
     Add(GESAMTMERKORIG,StructuralCopy(R1),1);
#    }
     else Print("\r"); fi;
#  Logtext=Logtext+GESAMTMERKORIG.join("\n");
#  Logfile(Logtext);
#  if (f<2**(dd+1)-1) tc=setTimeout(Test5,100,dd,nr,f+1); else {
#    if (nr<ERGS2[dd-1].length-1&&R0.slice(0,dd).join("")==ERGS2[dd-1][nr][0].join("")) tc=setTimeout(Test5,100,dd,nr+1,0);
#    
#    }
#  }
  end;
TEST5(4,1,0);
TEST5(4,1,1);
TEST5(4,1,2);
TEST5(4,1,3);
TEST5(4,1,4);
TEST5(4,1,5);
GESAMTMERKORIG;
for f in [0..31] do TES  T5(4,1,f); od; GESAMTMERKORIG;
for f in [0..63] do TEST5(5,1,f); od; GESAMTMERKORIG;
for f in [0..127] do TEST5(6,1,f); od; GESAMTMERKORIG;
dd:=7; for nr in [1..Size(ERGS2[dd])] do 
  if ERGS2[dd][nr][1]=ERGS2[dd][1][1] then 
    for f in [0..2^(dd+1)-1] do TEST5(dd,nr,f); od;
    fi;
  Print(nr); 
  od; GESAMTMERKORIG; Size(GESAMTMERKORIG);


######## SemidirectProduct
G:=SmallGroup(64,266);#[ 128, 2325 ]=direktes Produkt, brauchbar wäre aber [ 128, 2326 ] oder ...27
A:=AutomorphismGroup(G);
F:=Filtered(A,a->Order(a)=2);
for f in [1..Size(F)] do
  S:=SemidirectProduct(Subgroup(A,[F[1]]),G);
  I:=IdSmallGroup(S);
  Print(I,", \c");
  od;


F:=FreeGroup(4):
z:=F.1; a:=F.2; b:=F.3; c:=F.4;
G:=F/[z^2,a^2/z,b^2,(a*b)^2,c^2/z,(a*c)^2/z,(b*c)^2/z];
H:=(IsomorphismPcGroup(G));

F:=FreeGroup(6):
z:=F.1; a:=F.2; b:=F.3; c:=F.4; d:=F.5; f:=F.6;
G:=F/[z^2,a^2/z
  ,b^2,(a*b)^2
  ,c^2/z,(a*c)^2/z,(b*c)^2/z
  ,d^2,(a*d)^2,(b*d)^2,(c*d)^2
  ,f^2/z,(a*f)^2/z,(b*f)^2/z,(c*f)^2/z,(d*f)^2/z
  ,b^2,Comm(a,b)
  ,c^2/z,Comm(a,c)/z,Comm(b,c)/z
  ,d^2,(a*d)^2,(b*d)^2,(c*d)^2
  ,f^2/z,(a*f)^2/z,(b*f)^2/z,(c*f)^2/z,(d*f)^2/z
  ];

F:=FreeGroup(3);
b:=F.1; a:=F.2; z:=F.3;
G:=F/[b^2,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(b,a)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);
G:=F/[b^2/z,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(b,a)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);

F:=FreeGroup(4);
c:=F.1; b:=F.2; a:=F.3; z:=F.4;
G:=F/[c^2/z,b^2,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(c,z),Comm(b,a)/z,Comm(c,a)/z,Comm(c,b)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);

F:=FreeGroup(5);
d:=F.1; c:=F.2; b:=F.3; a:=F.4; z:=F.5;
G:=F/[d^2,c^2/z,b^2,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(c,b)/z,Comm(d,b)/z,Comm(d,c)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);
G:=F/[d^2/z,c^2/z,b^2,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(c,b)/z,Comm(d,b)/z,Comm(d,c)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);

F:=FreeGroup(6);
f:=F.1; d:=F.2; c:=F.3; b:=F.4; a:=F.5; z:=F.6;
G:=F/[f^2/z,d^2,c^2/z,b^2,a^2/z,z^2,Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(f,z),Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(f,a)/z,Comm(c,b)/z,Comm(d,b)/z,Comm(f,b)/z,Comm(d,c)/z,Comm(f,c)/z,Comm(f,d)/z];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);

F:=FreeGroup(7);
g:=F.1; f:=F.2; d:=F.3; c:=F.4; b:=F.5; a:=F.6; z:=F.7;
G:=F/[g^2,f^2/z,d^2,c^2/z,b^2,a^2/z,z^2,
  Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(f,z),Comm(g,z),
  Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(f,a)/z,Comm(g,a)/z,
  Comm(c,b)/z,Comm(d,b)/z,Comm(f,b)/z,Comm(g,b)/z,
  Comm(d,c)/z,Comm(f,c)/z,Comm(g,c)/z,
  Comm(f,d)/z,Comm(g,d)/z,
  Comm(g,f)/z
  ];
G:=PcGroupFpGroup(G);MARKZAHL(G);
IdSmallGroup(G);
G:=F/[g^2/z,f^2/z,d^2,c^2/z,b^2,a^2/z,z^2,
  Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(f,z),Comm(g,z),
  Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(f,a)/z,Comm(g,a)/z,
  Comm(c,b)/z,Comm(d,b)/z,Comm(f,b)/z,Comm(g,b)/z,
  Comm(d,c)/z,Comm(f,c)/z,Comm(g,c)/z,
  Comm(f,d)/z,Comm(g,d)/z,
  Comm(g,f)/z
  ];
G:=PcGroupFpGroup(G);
IdSmallGroup(G);MARKZAHL(G);

F:=FreeGroup(8);
h:=F.1; g:=F.2; f:=F.3; d:=F.4; c:=F.5; b:=F.6; a:=F.7; z:=F.8;
G:=F/[h^2/z,g^2,f^2/z,d^2,c^2/z,b^2,a^2/z,z^2,
  Comm(a,z),Comm(b,z),Comm(c,z),Comm(d,z),Comm(f,z),Comm(g,z),Comm(h,z),
  Comm(b,a)/z,Comm(c,a)/z,Comm(d,a)/z,Comm(f,a)/z,Comm(g,a)/z,Comm(h,a)/z,
  Comm(c,b)/z,Comm(d,b)/z,Comm(f,b)/z,Comm(g,b)/z,Comm(h,b)/z,
  Comm(d,c)/z,Comm(f,c)/z,Comm(g,c)/z,Comm(h,c)/z,
  Comm(f,d)/z,Comm(g,d)/z,Comm(h,d)/z,
  Comm(g,f)/z,Comm(h,f)/z,
  Comm(h,g)/z
  ];
G:=PcGroupFpGroup(G);MARKZAHL(G);
IdSmallGroup(G);

GENERATE_G:=function(dd) #dd mit negativem Vorzeichen für (10+5+1), (36+27+1),... 
  local d,F,i,j,gens,rels;
  d:=AbsInt(dd);
  F:=FreeGroup(d+1);
  gens:=Reversed(GeneratorsOfGroup(F));
  rels:=[];
  for i in [1..d+1] do 
    if IsOddInt(i) and (-i<>dd+1) then Add(rels,gens[i]^2);
      else Add(rels,gens[i]^2/gens[1]); fi; od;
  for i in [2..d+1] do Add(rels,Comm(gens[i],gens[1])); od;
  for i in [2..d] do for j in [i+1..d+1] do Add(rels,Comm(gens[j],gens[i])/gens[1]); od; od;
  #return [gens,rels];
  return PcGroupFpGroup(F/rels);
  end;
G:=GENERATE_G(4);relative_Anzahl_der_Markierungen_n1_n0_m1_m0(G);IdSmallGroup(G);
for i in [3..7] do G:=GENERATE_G(i); Print("\n",i," ",IdSmallGroup(G)," ",relative_Anzahl_der_Markierungen_n1_n0_m1_m0(G)); od;
i:=2; repeat i:=i+1; Print("\n",i,"\c"); G:=GENERATE_G(i); until i=100;
i:=2; repeat i:=i+2; Print("\n",i,"\c"); G:=GENERATE_G(-i); Print(relative_Anzahl_der_Markierungen_n1_n0_m1_m0(G)); until i=10;

Erzeuge_G_aus_xy_hoch_2:=function(R)
  local d,F,i,j,gens,rels;
  d:=Size(R);
  F:=FreeGroup(d+1);
  gens:=Reversed(GeneratorsOfGroup(F));
  rels:=[gens[1]^2];
  for i in [1..d] do 
    if R[d+1-i][1]=1 then Add(rels,gens[i+1]^2/gens[1]); else Add(rels,gens[i+1]^2); fi;
    od;
  for i in [1..d] do Add(rels,Comm(gens[i+1],gens[1])); od;
  for i in [2..d] do for j in [i+1..d+1] do 
    if IsOddInt(R[d+1-(i-1)][1]+R[d+1-(j-1)][1]+R[d+1-(i-1)][d+1-(j-1)+1]) then 
      Add(rels,Comm(gens[j],gens[i])/gens[1]); else Add(rels,Comm(gens[j],gens[i])); fi;
    od; od;
  return PcGroupFpGroup(F/rels);
  end;
R:=[[1],[0,0],[1,1,1],[1,1,1,1]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,50];
R:=[[1],[0,0],[1,1,1],[0,0,0,0]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,49];
R:=[[1],[0,0],[1,1,1],[0,1,0,1]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,48];
R:=[[1],[1,1],[0,1,1],[0,1,1,0]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,47];
R:=[[1],[0,0],[0,1,0],[0,1,0,0]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,46];
R:=[[1],[0,1],[0,1,0],[0,1,0,0]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[32,45];
R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];IdSmallGroup(Erzeuge_G_aus_xy_hoch_2(R));[64,266];

#### alle R erzeugen mit
alle_R:=[[[[1]]]];
for i in [2..14] do
  alle_R[i]:=[];
  for j in [1..Size(alle_R[i-1])] do
    alle_R[i][j]:=List(alle_R[i-1][j]); #List() kopiert
    neu:=[0];
    for k in [1..i-1] do Add(neu,alle_R[i][j][k][1]); od;
    Add(alle_R[i][j],neu);
    od;
  if IsEvenInt(i) then 
    Add(alle_R[i],Concatenation(List(alle_R[i-1][Size(alle_R[i-1])]),[ListWithIdenticalEntries(i,0)]));
    Add(alle_R[i],Concatenation(List(alle_R[i-1][Size(alle_R[i-1])]),[ListWithIdenticalEntries(i,1)]));
    else
      Add(alle_R[i],Concatenation(List(alle_R[i-1][Size(alle_R[i-1])-1]),[ListWithIdenticalEntries(i,1)]));
      fi;
  od;
alle_R;

for i in [1..14] do for j in [1..Size(alle_R[i])] do
  R:=alle_R[i][j];
  G:=Erzeuge_G_aus_xy_hoch_2(R);
  if i<8 then Print(IdSmallGroup(G)); else Print("[ ",2^(i+1),", ?+",j," ]\c"); fi;
  M:=relative_Anzahl_der_Markierungen_n1_n0_m1_m0(G);
  Print(M,"\n");
  od; od;

#########Anzahl aller 1
for dd in [1..10] do 
  for nr in [1..Size(ERGS1[dd])] do
    R:=ERGS1[dd][nr];
    D:=DIAG(R);
    Print(dd," ",nr," ",Collected(COMPDIAGSTABERZ(D)),Collected(D),"\n");
    od;
  od;

##########Alle R-Fortsetzungen
RT:=[
  [[1]],
  [[1],[0,0]],
  [[1],[0,0],[1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0,0,0]],
  ];

RU:=[
  [[1]],
  [[1],[1,1]],
  [[1],[0,0],[1,1,1]],
  [[1],[0,0],[1,1,1],[1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1]],
  [[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1],[0,0,0,0,0,0,0,0],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]],
  ];


R_FORTSETZUNGEN:=function(R)
  local dneu,T,i,C,RNEU,RET,DANF,PHI,PHILIST;
  dneu:=Size(R)+1;
  T:=Tuples([0,1],dneu);
  RET:=[];
  RNEU:=StructuralCopy(R);
  Add(RNEU,T[1]);
  DANF:=DIAG(RNEU);
  PHILIST:=[];
  for i in [1..Size(T)] do
    Print(i," ",T[i]," \c");
    RNEU:=StructuralCopy(R);
    Add(RNEU,T[i]);
    D:=DIAG(RNEU);
    C:=Collected(COMPDIAGSTABERZ(D));
    Print(D,C,"\n");
    Add(RET,C);
    PHI:=PermListList(DANF,D);
    if PHI<>fail then Add(PHILIST,PHI); fi;
    od;
  P:=Group(PHILIST);
  return [Collected(RET),Size(P)];
  end;

R:=RT[2]; R_FORTSETZUNGEN(R);#
R:=RT[4]; R_FORTSETZUNGEN(R);#
R:=RT[8]; R_FORTSETZUNGEN(R);#
R:=RT[9]; R_FORTSETZUNGEN(R);#
R:=RU[8]; R_FORTSETZUNGEN(R);#
[ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ], [ 0, 0, 0, 0 ] ]
 4 [ 0, 0, 0, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
 5 [ 0, 0, 1, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
12 [ 0, 1, 0, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
14 [ 0, 1, 1, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
15 [ 0, 1, 1, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
16 [ 0, 1, 1, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
20 [ 1, 0, 0, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
22 [ 1, 0, 1, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
23 [ 1, 0, 1, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
24 [ 1, 0, 1, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
25 [ 1, 1, 0, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
26 [ 1, 1, 0, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
27 [ 1, 1, 0, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
30 [ 1, 1, 1, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
31 [ 1, 1, 1, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
32 [ 1, 1, 1, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1 ][ [ 0, 15 ], [ 1, 15 ], [ 2, 1 ], [ 3, 1 ] ]
 1 [ 0, 0, 0, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 2 [ 0, 0, 0, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 3 [ 0, 0, 0, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 6 [ 0, 0, 1, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 7 [ 0, 0, 1, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 8 [ 0, 0, 1, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
 9 [ 0, 1, 0, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
10 [ 0, 1, 0, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
11 [ 0, 1, 0, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
13 [ 0, 1, 1, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
17 [ 1, 0, 0, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
18 [ 1, 0, 0, 0, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
19 [ 1, 0, 0, 1, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
21 [ 1, 0, 1, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
28 [ 1, 1, 0, 1, 1 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
29 [ 1, 1, 1, 0, 0 ] [ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 ][ [ 0, 18 ], [ 1, 12 ], [ 2, 2 ] ]
