#gap -L GAP_WORKSPACE #mit ERGS2_2945_20180813, AB_JETZT_NEU.txt bis RVOND4 mit dmax:=10 und PcgsOfR.txt.
##weiterer Versuch: Markierung verfeinern mit Aut(Aut(G)) oder wenigstens mit ConjugacyClasses
#Read("PcgsOfR.txt");
#Read("AB_JETZT_NEU.txt");
#0zuerst RVOND wenn nur 0,1 in D:
RVOND1:=function(dd,D)
  local d,j,R,RI;
  R:=[[0]];
  for d in [1..dd] do
    RI:=[D[2^(d-1)],D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
#RVOND1(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[0],[1,1],[1,1,2],[1,1,2,3],[0,0,0,0,0]];

#1zuerst als Probe aus ERGS1 echte Gruppen machen mit PcgsOfR:
dd:=4;
R:=ERGS1[dd][6]; #[[1],[1,1]], für PcgsOfR(R) muss das [[0],[1,1],[1,1,1]] sein, also los:
D:=DIAG(R); #ergibt [0,1,1,1]
Remove(D,1);
RD:=RVOND1(dd,D);[[0],[1,1],[1,1,1]];
G:=PcgsOfR(RD); IdSmallGroup(G); #müsste irgendein [8,x] sein

for dd in [1..7] do #IdSmallGroup nur bis 256=2*2^7
  Print("\n");
  for i in [1..Size(ERGS1[dd])] do
    R:=ERGS1[dd][i];
    D:=DIAG(R);
    Remove(D,1);
    RD:=RVOND1(dd,D);
    G:=PcgsOfR(RD); 
    ID:=IdSmallGroup(G);
    Print(ID);
    od;
  od;


#2wenn das bis hierher funktioniert, dann Versuch zusätzliche Markierung finden:

VERFEINERUNG:=function(D)
  SD:=Size(D);
  C:=COMPDIAGSTABERZ(D);
  S:=Group(STABMACH2(C)); #hier vorsichtshalber nochmal mit Aut(G) vergleichen
  T:=ConjugacyClasses(S);
  U:=Orbits(S,[1..SD]);
  V:=List([1..Size(T)],i->Orbits(Group(List(T[i])),[1..SD]));
  W:=Collected(List(V,v->Collected(List(v,w->Collected(List(w,i->C[i]))))));
  return [C,U,V,W];
  end;

dd:=3; 
i:=1;
R:=ERGS1[dd][i];
D:=DIAG(R);
VERFEINERUNG(D);
#Zwischenergebnis:
#U=  [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 7, 6, 8 ] ]
#V=[ [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 6, 7, 8 ] ], 
#    [ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 8 ], [ 6, 7 ] ], 
#    [ [ 1 ], [ 2, 3 ], [ 4 ], [ 5, 6, 7, 8 ] ] ]
#das ist schon mal eine Verfeinerung 2/3 und 58/67

dd:=1;R:=[[1]];D:=DIAG(R); VERFEINERUNG(D);#nix brauchbares
dd:=2;R:=[[1],[0,0]];D:=DIAG(R); VERFEINERUNG(D);#[ 3, 7, 11, 15 ], [ 4, 8, 12, 16 ]
dd:=2;R:=[[1],[1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 6 ], [ 3, 7 ], [ 4, 8 ]
dd:=3;R:=[[1],[0,0],[1,1,1]];D:=DIAG(R); VERFEINERUNG(D);#[ 2, 10 ], [ 3, 11 ], [ 4, 12 ], [ 5, 13 ], [ 6, 14 ], [ 7, 15 ], [ 8, 16 ]
dd:=4;R:=[[1],[0,0],[1,1,1],[0,0,0,0]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ]... und [ 2, 6, 5 ], [ 7, 12, 14 ] 
#[ 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ]
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0 ]
#  [ [ 1 ], [ 2, 12, 6, 18, 14, 28, 5, 22, 7, 30, 21, 23 ], [ 3, 8, 16, 19, 4, 11, 24, 10, 32, 15, 20, 13, 27, 26, 9, 31, 29, 25 ], [ 17 ] ], 
#     [ [ 1 ], [ 2, 18 ], [ 3, 19 ], [ 4, 20 ], [ 5, 21 ], [ 6, 22 ], [ 7, 23 ], [ 8, 24 ], [ 9, 25 ], [ 10, 26 ], [ 11, 27 ], [ 12, 28 ], 
#          [ 13, 29 ], [ 14, 30 ], [ 15, 31 ], [ 16, 32 ], [ 17 ] ], [ [ 1 ], [ 2, 18 ], [ 3, 19 ], [ 4, 20 ], [ 5, 21 ], [ 6, 22 ], [ 7, 23 ], 
#          [ 8, 24 ], [ 9, 25 ], [ 10, 26 ], [ 11, 27 ], [ 12, 28 ], [ 13, 29 ], [ 14, 30 ], [ 15, 31 ], [ 16, 32 ], [ 17 ] ], 
#      [ [ 1 ], [ 2, 6, 5, 22, 21, 18 ], [ 3, 16, 10, 32, 26, 8, 4, 24, 20, 19, 11, 15, 27, 31, 13, 9, 29, 25 ], [ 7, 12, 14, 28, 30, 23 ], 
#          [ 17 ] ], [ [ 1 ], [ 2, 22, 21, 5, 6, 18 ], [ 3, 32, 26, 16, 10, 24, 20, 8, 4, 19, 27, 31, 11, 15, 13, 9, 29, 25 ], 
#          [ 7, 12, 14, 28, 30, 23 ], [ 17 ] ], 
#  [ [ 1 ], [ 2, 12, 5, 6, 34, 18, 7, 14, 44, 28, 60, 37, 21, 38, 22, 50, 39, 23, 46, 30, 62, 55, 53, 54 ], 
#      [ 3, 8, 16, 19, 35, 11, 4, 40, 24, 10, 48, 32, 64, 51, 15, 13, 27, 43, 59, 36, 20, 56, 42, 26, 58, 9, 47, 31, 63, 45, 29, 61, 
#          52, 41, 57, 25 ], [ 17, 49, 33 ] ], 
#      [ [ 1 ], [ 2, 50, 34, 18 ], [ 3, 51, 35, 19 ], [ 4, 52, 36, 20 ], [ 5, 53, 37, 21 ], [ 6, 54, 38, 22 ], [ 7, 55, 39, 23 ], 
#          [ 8, 56, 40, 24 ], [ 9, 57, 41, 25 ], [ 10, 58, 42, 26 ], [ 11, 59, 43, 27 ], [ 12, 60, 44, 28 ], [ 13, 61, 45, 29 ], 
#          [ 14, 62, 46, 30 ], [ 15, 63, 47, 31 ], [ 16, 64, 48, 32 ], [ 17 ], [ 33 ], [ 49 ] ], 
#      [ [ 1 ], [ 2, 5, 6, 21, 22, 37, 38, 53, 54, 18, 34, 50 ], [ 3, 16, 10, 32, 26, 48, 42, 64, 58, 4, 8, 24, 40, 56, 20, 36, 52, 19, 35, 
#              51, 15, 11, 27, 43, 59, 31, 47, 63, 9, 13, 29, 45, 61, 25, 41, 57 ], [ 7, 12, 14, 28, 30, 44, 46, 60, 62, 23, 39, 55 ], [ 17 ], 
#          [ 33 ], [ 49 ] ], 
#      [ [ 1 ], [ 2, 60, 44, 28, 62, 46, 30, 12, 14, 7, 55, 39, 23, 50, 54, 34, 38, 18, 22, 6, 53, 37, 21, 5 ], 
#          [ 3, 59, 43, 27, 61, 45, 29, 11, 13, 15, 31, 47, 63, 57, 41, 25, 9, 51, 35, 19, 52, 36, 20, 4, 10, 26, 42, 58, 16, 32, 48, 64, 8, 
#              24, 40, 56 ], [ 17 ], [ 33 ], [ 49 ] ], 
dd:=4;R:=[[1],[0,0],[1,1,1],[1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 18 ], [ 3, 19 ],
dd:=5;R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1]];D:=DIAG(R); VERFEINERUNG(D);# [ 2, 34 ], [ 3, 35 ], 

dd:=dd+1; D:=Concatenation(D,D); VERFEINERUNG(D);
                                                                                            a
                                                a                       a           a   a b b
                        a           a     a  b  b           a     a  b  b     a  b  b c c c c
            a     a  b  b     a  b  b  c  c  c  c     a  b  b  c  c  c  c  d  d  d  d d d d d
   e  a  b  b  c  c  c  c  d  d  d  d  d  d  d  d  f  f  f  f  f  f  f  f  f  f  f  f f f f f 
#[ 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1 0 1 0 0 ]
      x        x  x  y              y     y           x        x  x  y              y   y
#×:1, 0, 1, 1, 
#x=[ 2, 6, 5, 22, 21, 18 ], y=[ 7, 12, 14, 28, 30, 23 ], 

#statt x^2=0 x^2=2 bei y^2=(yx)^2 für alle y
#statt x^2=1 x^2=3 bei y^2!=(yx)^2 für alle y

#x×y=x·1·y
#1×1=1
#0×0=1

#x×y=x·a^-1·y
#a×a=a also neutrales Element
#e×e=a^-1=a

#gebraucht wird sowas wie wenn x^2=y^2=1 und (xy)^2!=0, darf aber 0^_ sein
