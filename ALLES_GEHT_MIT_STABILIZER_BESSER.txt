#Read("ALLES_GEHT_MIT_STABILIZER_BESSER.txt");

SAGE:=true;
#dmax:=10;
dmax:=12;

XORMAT:=[[1]];
for i in [1..dmax] do
  n2:=2^(i-1);
  for j in [1..n2] do
    XORMAT[j+n2]:=[];
    for k in [1..n2] do
      XORMAT[j][k+n2]:=XORMAT[j][k]+n2;
      XORMAT[j+n2][k+n2]:=XORMAT[j][k];
      XORMAT[j+n2][k]:=XORMAT[j][k]+n2;
      od; od; od;
#---------#
Diagonale:=function(G,flag)
  local HRES,i,j,D,DD,DDD,RET,RA,PC;
  RA:=RankPGroup(G);
  PC:=Pcgs(G);
  HRES:=Reversed(PC{[1..RA]});#Print(RA,PC,HRES);
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,HRES[i]*D[j]);
      od;
    od;
  DDD:=List(D);
  DD:=List(D,i->i^2);
  HRES:=MinimalGeneratingSet(Group(DD));
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,D[j]*HRES[i]);
      od;
    od;
  Add(D,D[1]^0,1); Add(DDD,D[1]^0,1);
  RET:=List(DD,i->Position(D,i)-1);
  if flag=1 then RET:=DDD; fi;
  return RET;
  end;

Diagonale(SmallGroup(4,1),0);
Diagonale(SmallGroup(8,2),0);
Diagonale(SmallGroup(16,3),0);
Diagonale(SmallGroup(256,55750),1);

COMPDIAG6E:=function(dd,D,flag)#neu
  local i,j,k,l,SD,ORBZU,MARK,NMARK,STUFE;
  SD:=Size(D);
  ORBZU:=[]; STUFE:=1;
  ORBZU[STUFE]:=List(D);
  ORBZU[STUFE][1]:=-1;
  repeat
    if flag=88 then Print("\n",ORBZU); fi;
    Print("#",Size(Collected(ORBZU[STUFE])),"\c");
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[-1];
      for j in [1..SD] do 
        MARK[i][j]:=[
          ORBZU[STUFE][i],
          ORBZU[STUFE][j],
          ORBZU[STUFE][XORMAT[j][i]]];
        od;
      MARK[i]:=Collected(MARK[i]{[1..SD]});
      od;
    STUFE:=STUFE+1;
    ORBZU[STUFE]:=[];
    for i in [1..SD] do for j in [i,i-1..1] do
      if MARK[i]=MARK[j] and ORBZU[STUFE-1][i]=ORBZU[STUFE-1][j] then ORBZU[STUFE][i]:=j; fi; od; od;
    until ORBZU[STUFE]=ORBZU[STUFE-1];  
  return ORBZU[STUFE];
  end;

COMPDIAG7E:=function(D)
  local i,j,SD,ORBZU,ORBZUMERK,MARK;
  SD:=Size(D); ORBZU:=List(D);
  repeat
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[];
      for j in [1..SD] do MARK[i][j]:=[ORBZU[j],ORBZU[XORMAT[j][i]]]; od;
      MARK[i]:=Collected(MARK[i]);
      od;
    ORBZUMERK:=ORBZU; ORBZU:=[1];
    for i in [2..SD] do for j in [i,i-1..2] do
      if MARK[i]=MARK[j] and ORBZUMERK[i]=ORBZUMERK[j] then ORBZU[i]:=j; fi; od; od;
    until ORBZU=ORBZUMERK;  
  return ORBZU;
  end;

RMINVORTEST:=function(D)
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMIN,RNEU,
  HRES,LD,ORBZU,ORBS,ONEU;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMIN:=[];
  ORBZU:=COMPDIAG6E(S,D,0);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1])];
  for STUFE in [1..S] do
    NEUE_VARIANTEN:=[];
    RNEU:=[9999];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;
      ORBS:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        RR:=[D[i]];
        for j in HRES do Add(RR,D[XORMAT[i][j]]); od;
        if RR<RNEU then NEUE_VARIANTEN:=[]; RNEU:=RR; fi;
        if RR=RNEU then
          LNEU:=List(LRES,j->XORMAT[i][j]);
          ONEU:=List(LNEU,j->ORBZU[j]);
          if not (ONEU in ORBS) then
            Add(ORBS,ONEU);
            VNEU:=StructuralCopy(V);
            Add(VNEU.HRES,i);
            VNEU.LRES:=Concatenation(LRES,LNEU);
            for i in LNEU do VNEU.LD[i]:=STUFE; od;
            Add(NEUE_VARIANTEN,VNEU);
            fi;
          fi;
        fi; od;
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    Add(RMIN,RNEU);
    od;
  return [RMIN,VARIANTEN];
  end;

ALPHA:=[0];#global weil von DNEU veraendert
BETA:=[0];

DNEU:=function(d)
  local dneu,i;
  if not IsBound(ALPHA[d+1]) then
    dneu:=Size(BETA);
    for i in [dneu,dneu-1..1] do Add(BETA,XORMAT[d+1][BETA[i]+1]-1); od;
    for i in [1..dneu] do ALPHA[BETA[dneu+i]+1]:=dneu+i-1; od;
    fi;
  dneu:=ALPHA[d+1];
  return dneu;
  end;

#DNEU(2);ALPHA;BETA;
#DNEU(7);ALPHA;BETA;
#DNEU(6);ALPHA;BETA;

RMINSUCH:=function(D)
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMIN,RNEU,
  HRES,KRES,LD,ORBZU,ORBS,ONEU;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMIN:=[];
  #ORBZU:=COMPDIAG6E(S,D,0);
  ORBZU:=COMPDIAG7E(D);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0])];
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    NEUE_VARIANTEN:=[];
    RNEU:=[0];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;
      ORBS:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        RR:=List(KRES,i->DNEU(D[i]));
        if RR>RNEU then NEUE_VARIANTEN:=[]; RNEU:=RR; fi;#max geht schneller als min
        if RR=RNEU then
          LNEU:=List(LRES,j->XORMAT[i][j]);
          ONEU:=List(LNEU,j->ORBZU[j]);#Print("O");
          if not (ONEU in ORBS) then
            Add(ORBS,ONEU);
            VNEU:=StructuralCopy(V);
            Add(VNEU.HRES,i);
            VNEU.LRES:=Concatenation(LRES,LNEU);
            for i in LNEU do VNEU.LD[i]:=STUFE; od;
            VNEU.ALPHA:=ALPHA; VNEU.BETA:=List(BETA);
            Add(NEUE_VARIANTEN,VNEU);
            fi;
          #Print("P");
          fi;
        fi; od;
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    Add(RMIN,RNEU);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    od;
  return [RMIN,VARIANTEN];
  end;


#---------#

ERWIND:=[];
j:=1;k:=1;S:=dmax;
for i in IteratorOfTuples( [0,1], S ) do
   if not SAGE then Print("."); fi;
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=XORMAT[RET[XP]+1][RET[YP]+1]-1;
        PROD:=XORMAT[PROD+1][RET[ZP]+1]-1;
        PROD:=XORMAT[PROD+1][RET[XPYP]+1]-1;
        PROD:=XORMAT[PROD+1][RET[XPZP]+1]-1;
        PROD:=XORMAT[PROD+1][RET[YPZP]+1]-1;
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=[[0],[0,0],[1,1,1],[1,1,1,0],[0,0,0,2,3],[2,2,2,3,1,1]];
DIAG(R);

#--------------#

JKLLISTE:=[ [ 2, 3, 4 ],#d=2
 
  [ 2, 5, 6 ], [ 2, 7, 8 ],#d=3 

  [ 3, 5, 7 ], [ 3, 6, 8 ], 
  [ 4, 5, 8 ], [ 4, 6, 7 ] ];

for d in [4..dmax] do
  for i in [(2^(d-2)-1)*(2^(d-2)-2)/6+1..(2^(d-1)-1)*(2^(d-1)-2)/6] do
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-2),JKLLISTE[i][3]+2^(d-2)]);
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-1),JKLLISTE[i][3]+2^(d-1)]);
    od;
  for j in [1..2^(d-2)] do for k in [1..2^(d-2)] do
    Add(JKLLISTE,[j+2^(d-2),k+2^(d-1),XORMAT[j][k+2^(d-2)+2^(d-1)]]);
    od; od; 
  od;


#--------------#

a:=[];
for i in [1..1000] do a[i]:=i+Int(i/2); od;

KANTENZUG:=function(d,z)
  local s,u,R,LWIE;
  LWIE:=ListWithIdenticalEntries;
  if d=1 then R:=[[1]]; else
    if z>=a[d] then 
      R:=KANTENZUG(d-1,a[d-1]);
      Add(R,LWIE(d,1)); 
      else
        s:=Int(z/6); u:=z mod 6;
        if u=0 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s,1),LWIE(d-4*s,0))); fi;
        if u=1 then R:=KANTENZUG(d-1,z+1);
          Add(R,Concatenation(LWIE(4*s,1),LWIE(d-4*s,0))); fi;
        if u=2 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0))); fi;
        if u=3 then 
          if z+1=a[d-1] then 
            R:=KANTENZUG(d-1,z);
            Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-2,0),[1]));
            else if z=a[d-1] then
              R:=KANTENZUG(d-1,z);
              Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0)));
              else 
                R:=KANTENZUG(d-1,z+1);
                Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-2,0),[1]));  
                fi; fi;
          fi;
        if u=4 then R:=KANTENZUG(d-1,z+1);
          Add(R,Concatenation(LWIE(4*s+1,1),LWIE(d-4*s-1,0))); fi;
        if u=5 then R:=KANTENZUG(d-1,z);
          Add(R,Concatenation(LWIE(4*s+3,1),LWIE(d-4*s-3,0))); fi;
        fi;
    fi;
  return R;
  end;

KANTENZUG(2,1);

ERGS1:=[];
KANTENZUEGE:=function(ddmax)
  #global dmax;
  local dd;
  ERGS1:=[];
  for dd in [1..ddmax] do
    ERGS1[dd]:=[];
    for i in [1..a[dd]] do ERGS1[dd][i]:=KANTENZUG(dd,i); od;
    od;
  end;
#KANTENZUEGE(10);
#ERGS1[4];

#--------------#

FORTSETZ:=function(HRES,y,D) #setzt HRES,y zu einem gueltigen pcgs fort und macht ein PHI daraus
  local PHI,i,j,k,HRESNEU,nochnichtgefunden;
  PHI:=[];HRESNEU:=[];
  i:=1;
  repeat
    if i<=Size(HRES) then HRESNEU[i]:=HRES[i]; fi;
    if i=Size(HRES)+1 then HRESNEU[i]:=y; fi;
    if i>Size(HRES)+1 then
      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;
      fi;
    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;
    i:=i+1;
    until 2^(i-1)=Size(D)+1;
  return PermList(PHI);
  end;

#FORTSETZ([1,2],4,[1,0,0,1,1,3,0]);();
#FORTSETZ([1],3,[1,0,0,1,1,3,0]);(2,3)(4,5);
#FORTSETZ([], 4,[1,0,0,1,1,3,0]);(1,4,5)(2,3,7);

LRESAUSHRES:=function(HRES)
  local LRES,i,j;
  LRES:=[];
  for i in [1..Size(HRES)] do
    LRES[2^(i-1)]:=HRES[i];
    for j in [1..Size(LRES)-1] do
      LRES[2^(i-1)+j]:=XORMAT[LRES[j]+1][HRES[i]+1]-1;
      od;
    od;
  return LRES;
  end;
#LRESAUSHRES([1,2,27]);[ 1, 2, 3, 27, 26, 25, 24 ];
  
STABERZ:=function(MENGE,HRES,STAB,D)
  #global LRESAUSHRES,FORTSETZ;
  local MENGENEU,STABNEU,x,y,i,DRIN,PHI,DK,PHI0,LRES;
  #1
  x:=MENGE[1];STABNEU:=STAB;
  LRES:=LRESAUSHRES(HRES);
  #2
  MENGENEU:=[];
  for y in MENGE do
    DRIN:=true;
    ##Print("\ny=",y," ",D[y]," ",D[x]);
    if D[y]<>D[x] then DRIN:=false; fi;
    for i in [1..Size(LRES)] do
     ##Print(" i=",i," ",D[XORMAT[HRES[i]+1][y+1]-1]," ",D[XORMAT[HRES[i]+1][x+1]-1]);
      if D[XORMAT[LRES[i]+1][y+1]-1]<>D[XORMAT[LRES[i]+1][x+1]-1] then DRIN:=false; fi;
      od;
    if DRIN then Add(MENGENEU,y); fi;
    od;
  ##Print("\nMENGENEU=",MENGENEU,"\n\c");
  #3
  repeat
    y:=MENGENEU[1];
    #4
    DK:=List(D);Remove(DK,1);
    ##Print("\n",MENGENEU,HRES,y,D,"\n\c");
    PHI:=FORTSETZ(HRES,y,D);
    #5
    if not PHI in STABNEU then Add(STABNEU,PHI); fi;
    ##Print("\n",PHI,STABNEU,"\n\c");
    #6
    MENGENEU:=Difference(MENGENEU,Orbit(Group(STABNEU),x));
  #7
    until MENGENEU=[];
  #8
  return STABNEU;
  end;
 
STAB:=[];
# 0  1  2  3  4  5  6  7
# e  a  b ab  c ac bc abc
D:=[ 1, 0, 0, 1, 1, 3, 0];#D
STAB:=STABERZ([4..7],[1,2],STAB,D);
STAB:=STABERZ([2..7],[1],STAB,D);
STAB:=STABERZ([1..7],[],STAB,D);
Size(STAB);
Size(Group(STAB));#6 laut 4788 und 4752R

COMPDIAGSTABERZ:=function(D)#aus COMPDIAG4 mit geaendertem RETURN
  #global JKLLISTE;
  local RET,i,j,k,l,jkl,jkli,dj,dk,dl,RET2,reti,SD,DD;
  SD:=Size(D);DD:=[];
  for i in [1..SD] do DD[i]:=D[i]+2; od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    if dj=1 and dk=dl then DD[j]:=1; fi;
    if dj=0 and dk<>dl then DD[j]:=0; fi;
    if dk=1 and dj=dl then DD[k]:=1; fi;
    if dk=0 and dj<>dl then DD[k]:=0; fi;
    if dl=1 and dk=dj then DD[l]:=1; fi;
    if dl=0 and dk<>dj then DD[l]:=0; fi;
    od;
#Print("\n",DD);
  return DD;
  end;

STABMACH:=function(dd,D)
  #global STABERZ;
  local STAB,ddd;
  STAB:=[];
  for ddd in [dd,dd-1..1] do 
    STAB:=STABERZ([2^(ddd-1)..2^dd-1],List([1..ddd-1],i->2^(i-1)),STAB,D);
    od;
  return STAB;
  end;

DOPPELSTAB:=function(dd,S)
  local L,LL,SD;
  L:=List(S,s->ListPerm(s,2^(dd-1)-1));
  for LL in L do LL[2^(dd-1)]:=2^(dd-1); 
    for i in [2^(dd-1)+1..2^dd-1] do
      LL[i]:=LL[i-2^(dd-1)]+2^(dd-1);
      od;
    od; #Display(L);
  SD:=List(L,s->PermList(s));
  return SD;
  end;

HMACH:=function(dd)
  local d,ddd,dddd,i,j,H,L;
  H:=[];ddd:=2^(dd-1);dddd:=2^dd;
  for d in [1..dd-1] do
    L:=[];
    for j in [1..ddd-1] do L[j]:=j; od;
    for j in [ddd..dddd-1] do
      if not IsBound(L[j]) then
        L[j]:=j+2^(d-1);
        L[j+2^(d-1)]:=j;
        fi;
      od;
    Add(H,PermList(L));
    od;
  return H;
  end;
HMACH(4);

RVOND:=function(dd,D)
  local d,j,R,RI;
  R:=[[0],[0,0]];
  for d in [1..dd] do
    RI:=[D[2^(d-1)],D[2^(d-1)],D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
#RVOND(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[0],[0,0],[1,1,1],[1,1,1,2],[1,1,1,2,3],[0,0,0,0,0,0]];

RKVOND:=function(dd,D)
  local d,j,R,RI;
  R:=[];
  for d in [1..dd] do
    RI:=[D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
#RKVOND(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[1],[1,2],[1,2,3],[0,0,0,0]];


#-----bis hierher unveraendert aus DA_LEGST_DICH_NIEDER.txt, ab hier neu 2018:

STABMACH2:=function(C) #beginnt mit D und mit neutralem Element
  local C1,PHITAB;
  #C:=COMPDIAGSTABERZ(D);
  C1:=List(C); Remove(C1,1);
  PHITAB:=STABMACH(LogInt(Size(C),2),C1);
  PHITAB:=List(PHITAB,i->PermList(Concatenation([1],List(ListPerm(i),j->j+1))));
  return PHITAB;
  end;

RVOND4:=function(D) # erwartet neutrales Element mit
  local D0,R;
  D0:=List(D);Remove(D0,1);
  R:=RKVOND(LogInt(Size(D),2),D0);
  return R;
  end;

DGANZNEU:=function(d) #
  local dneu,i;
  if not IsBound(ALPHA[d+1]) then
    dneu:=Size(BETA);
    for i in [1..dneu] do Add(BETA,XORMAT[d+1][BETA[i]+1]-1); od;
    for i in [1..dneu] do ALPHA[BETA[dneu+i]+1]:=dneu+i-1; od;
    fi;
  dneu:=ALPHA[d+1];
  if dneu=0 then return 0; else return 8-dneu; fi;
  end;

RMAXSUCH:=function(D) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMAX:=[];
  D3:=List(D,i->Int(i/4));
  D1:=List(D,i->Int((i mod 4)/2));
  D2:=List(D,i->i mod 2);
  C1:=COMPDIAGSTABERZ(D1);
  C2:=COMPDIAGSTABERZ(D2);
  C3:=COMPDIAGSTABERZ(D3);  
  S1:=Group(STABMACH2(C1));
  S2:=Group(STABMACH2(C2));
  S3:=Group(STABMACH2(C3));
  SX:=Intersection(S1,S2,S3);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=[];MALPHA:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
        if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
        if RR=RNEU then Add(MENGS,i); MALPHA[i]:=[ALPHA,BETA]; fi;
        fi; od;
      #Print("\nMENGS=",MENGS,Size(MENGS));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      for i in BOINGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        VNEU.ALPHA:=List(MALPHA[i][1]); VNEU.BETA:=List(MALPHA[i][2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i.HRES),Size(VARIANTEN));
    od;
  return [RMAX,VARIANTEN];
  end;

SCHNICK:=function(R1,R2)#alle Fortsetzungen von R1 konstant und R2 ergaenzt
  #global COMPDIAGSTABERZ,STABMACH,DOPPELSTAB,HMACH,RKVOND;
  local D1,D2,DD,DDD,S0,S1,S2,SD,SD1,SD2,H,K,t,ORBS,dd;
  dd:=Size(R1);
  D1:=DIAG(R1);
  D2:=DIAG(R2);
  #folgendes aus S:=STABAUSD4(dd-1,D);
  D1:=COMPDIAGSTABERZ(D1);Remove(D1,1);
  S1:=STABMACH(dd,D1);
  D2:=COMPDIAGSTABERZ(D2);Remove(D2,1);
  S2:=STABMACH(dd-1,D2);
  if not SAGE then Print("\nDOPPELSTAB S2: \c"); t:=Runtime(); fi;
  SD2:=DOPPELSTAB(dd,S2);
  if not SAGE then Print(Runtime()-t); fi;
  if not SAGE then Print("\nHMACH: \c"); t:=Runtime(); fi;
  H:=HMACH(dd);
  if not SAGE then Print(Runtime()-t); fi;
  if not SAGE then Print("\nConcatenation(SD2,H): \c"); t:=Runtime(); fi;
  K:=Group(Concatenation(SD2,H));
  if not SAGE then Print(Runtime()-t); fi;
  if not SAGE then Print("\nIntersection(S1,K): \c"); t:=Runtime(); fi;
  K:=Intersection(Group(S1),K);
  if not SAGE then Print(Runtime()-t); fi;
  DD:=Tuples([0..1],dd);;#Print(Size(DD));
  DDD:=[];
  for i in [1..2^dd] do
    DDD[i]:=DIAG(Concatenation(R2,[DD[i]])){[2..2^dd]};
    od;
  ORBS:=OrbitsDomain(K,DDD,Permuted);;#Print(Size(ORBS));
  #Print(List(ORBS,i->Size(i)));Print("\c");
  #List(ORBS,i->IdSmallGroup(PcgsOfR(RVOND(dd,2*D1+i[1]))));
  #Print(Collected(List(ORBS,i->IdSmallGroup(PcgsOfR(RVOND(dd,2*D1+i[1]))))));
  return Reversed(SortedList(List(ORBS,i->RKVOND(dd,Maximum(i)))));
  end;

ERGS2:=[];
GESAMTDILIST:=[];
SCHNACK:=function(dd,CMPD)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  for rr in [1..Size(ERGS1[dd])] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        D:=DIAG(R);
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=CMPD(dd,D,false);
        #a#Print(" ",ID,"\c");
        if not ID in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then Print(".\c"); fi; fi;
        od;
      fi; od;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;



COMPDIAG5RS:=function(dd,D,flag) return RMAXSUCH(D)[1]; end;

ProfileFunctions(SCHNACK,SCHNICK,COMPDIAGSTABERZ,STABMACH2,Stabilizer,Orbits,RMAXSUCH,Concatenation,DGANZNEU,Add,Group,List,StructuralCopy);

#-----------
KANTENZUEGE(10);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
SCHNACK(2,COMPDIAG5RS);#16#6
SCHNACK(3,COMPDIAG5RS);#32#19
SCHNACK(4,COMPDIAG5RS);#64#60
#SCHNACK(5,COMPDIAG5RS);#128#158
#SCHNACK(6,COMPDIAG5RS);#256#442
#SCHNACK(7,COMPDIAG5RS);#512#1122
#SCHNACK(8,COMPDIAG5RS);#1024#2945
DisplayProfile();
#dd:=4;;Reversed(List(ERGS2[dd],i->2*i[1]+i[2]));

ERGS22:=[];
for i in [1..Size(ERGS2)] do
  ERGS22[i]:=[];
  for j in [1..Size(ERGS2[i])] do
    ERGS22[i][j]:=2*ERGS2[i][j][1]+ERGS2[i][j][2];
    od;
  ERGS22[i]:=SortedList(ERGS22[i]);
  od;

KURZSCHNACK:=function(dd,CMPD)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  for rr in [1..Size(ERGS1[dd])] do R1:=Reversed(ERGS1[dd])[rr]; if dd=2 or not 0 in R1[dd-2] then
    if not SAGE then Print("\n***R1=",R1); fi;
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] and R1{[1..dd-2]}=R1R2[2]{[1..dd-2]} then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2[2],"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        D:=DIAG(R);
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=CMPD(dd,D,false);
        #a#Print(" ",ID,"\c");
        if not ID in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then Print(".\c"); fi; fi;
        od;
      fi; od;
    fi; od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

#-----------
KANTENZUEGE(dmax);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
KURZSCHNACK(2,COMPDIAG5RS);#16
KURZSCHNACK(3,COMPDIAG5RS);#32
KURZSCHNACK(4,COMPDIAG5RS);#64
KURZSCHNACK(5,COMPDIAG5RS);#128
KURZSCHNACK(6,COMPDIAG5RS);#256
KURZSCHNACK(7,COMPDIAG5RS);#512
KURZSCHNACK(8,COMPDIAG5RS);#1024
KURZSCHNACK(9,COMPDIAG5RS);#2048
KURZSCHNACK(10,COMPDIAG5RS);#4096
#KURZSCHNACK(11,COMPDIAG5RS);#8192
#KURZSCHNACK(12,COMPDIAG5RS);#16384
DisplayProfile();
#dd:=6;;List(SortedList(ERGS2[dd]),i->2*i[1]+i[2]));
#PrintTo("ERGS2NUR2.txt","ERGS2:=",ERGS2,";");

#---von dd=6:100 auf dd=10:113
dd:=9;ERG:=Reversed(List(ERGS2NUR2[dd]));;
for i in [1..Size(ERG)] do
  R1R2:=ERG[i];
  R:=2*R1R2[1]+R1R2[2];
  RDD:=R[dd-1];
  Print("\n",i,R{[dd-1,dd]});
  od;
#Ergebnis: bereits im vorletzten Block von 8 auf 11

dd:=5;ERG:=Reversed(List(ERGS2[dd]));;count:=0;
for i in [1..Size(ERG)] do
  R1R2:=ERG[i];
  R:=2*R1R2[1]+R1R2[2];
  RDD:=R{[1..4]};REE:=R[5];
  if RDD=[[3],[3,3],[3,3,3],[3,3,3,3]] and REE<>[3,3,3,3,3] then
    Print("\n",i,R{[5..dd]});
    count:=count+1;
    fi;
  od;Print(count);

#------
DISP5:=function(dd)
  ERG:=Reversed(List(ERGS2[dd]));
  count:=0;
  for i in [1..Size(ERG)] do
    R1R2:=ERG[i];
    R:=2*R1R2[1]+R1R2[2];
    if R{[1..4]}=[[3],[3,3],[3,3,3],[3,3,3,3]] and R[5]<>[3,3,3,3,3] then
      Print("\n",i,R{[5..dd]});
      count:=count+1;
      fi;
    od;
  Print(count);
  end;

DISP6:=function(dd)
  ERG:=Reversed(List(ERGS2[dd]));
  count:=0;
  for i in [1..Size(ERG)] do
    R1R2:=ERG[i];
    R:=2*R1R2[1]+R1R2[2];
    if R{[1..5]}=[[3],[3,3],[3,3,3],[3,3,3,3],[3,3,3,3,3]] and R[6]<>[3,3,3,3,3,3] then
      Print("\n",i,R{[6..dd]});
      count:=count+1;
      fi;
    od;
  Print(count);
  end;

ZAEHLE:=function(ddmin,ddmax,nr)
  local i,j,dd,ERG,COUNT,COUNTS;
  COUNTS:=[];
  for dd in [ddmin..ddmax] do
    ERG:=ERGS2[dd];
    COUNT:=0;
    for i in [1..Size(ERG)] do
      if ERG[i][1]=ERGS1[dd][nr] then COUNT:=COUNT+1; fi;
      od;
    Add(COUNTS,COUNT);
    od;
  return COUNTS;
  end;

ZAEHLE2:=function(ddmin,ddmax,ddmitt,nr)
  local i,j,dd,ERG,COUNT,COUNTS;
  COUNTS:=[];
  for dd in [ddmin..ddmax] do
    ERG:=ERGS2[dd];
    COUNT:=0;
    for i in [1..Size(ERG)] do
      if ERG[i][1]=ERGS1[dd][nr] and ERG[i][2]{[1..ddmitt]}=ERGS1[dd][nr]{[1..ddmitt]} then COUNT:=COUNT+1; fi;
      od;
    Add(COUNTS,COUNT);
    od;
  return COUNTS;
  end;

#---Klassifizierung versuchen:
KLASSI:=function(dd)
  local i,j,ERG2,ERG1,D1,D2,D3,R1R2,R1,R2,R3,P1,P2,P3,RET;
  RET:=[];
  ERG1:=ERGS1[dd];
  ERG2:=ERGS2[dd];
  for i in [1..Size(ERG2)] do
    Print(".\c");
    R1R2:=ERG2[i];
    D1:=DIAG(R1R2[1]);
    D2:=DIAG(R1R2[2]);
    D3:=(D1+D2) mod 2;
    R1:=RMAXSUCH(D1)[1];
    R2:=RMAXSUCH(D2)[1];
    R3:=RMAXSUCH(D3)[1];
    P1:=Position(ERG1,R1/3);
    P2:=Position(ERG1,R2/3);
    P3:=Position(ERG1,R3/3);if P3=fail then P3:=0; fi;
    Add(RET,Reversed(SortedList([P1,P2,P3])));
    od;
  Print("\n");
  return Collected(RET);
  end;

KLASSI7:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], [ [ 3, 3, 0 ], 1 ], 
  [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 2 ], 1 ], [ [ 3, 3, 3 ], 10 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], 
  [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], [ [ 4, 4, 2 ], 2 ], [ [ 4, 4, 3 ], 6 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], 
  [ [ 5, 4, 1 ], 1 ], [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 6 ], [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], 
  [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 8 ], [ [ 6, 6, 4 ], 3 ], 
  [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 3 ], 2 ], [ [ 7, 4, 3 ], 2 ], [ [ 7, 5, 3 ], 1 ], [ [ 7, 6, 1 ], 1 ], [ [ 7, 6, 3 ], 7 ], [ [ 7, 6, 4 ], 2 ], 
  [ [ 7, 6, 6 ], 1 ], [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 4 ], [ [ 7, 7, 2 ], 1 ], [ [ 7, 7, 3 ], 16 ], [ [ 7, 7, 4 ], 6 ], [ [ 7, 7, 5 ], 1 ], 
  [ [ 7, 7, 6 ], 6 ], [ [ 7, 7, 7 ], 8 ], [ [ 8, 3, 1 ], 2 ], [ [ 8, 3, 2 ], 1 ], [ [ 8, 3, 3 ], 8 ], [ [ 8, 4, 1 ], 1 ], [ [ 8, 4, 3 ], 10 ], 
  [ [ 8, 4, 4 ], 3 ], [ [ 8, 5, 3 ], 1 ], [ [ 8, 5, 4 ], 1 ], [ [ 8, 6, 1 ], 2 ], [ [ 8, 6, 2 ], 1 ], [ [ 8, 6, 3 ], 11 ], [ [ 8, 6, 4 ], 8 ], 
  [ [ 8, 6, 5 ], 1 ], [ [ 8, 6, 6 ], 5 ], [ [ 8, 7, 1 ], 2 ], [ [ 8, 7, 3 ], 17 ], [ [ 8, 7, 4 ], 8 ], [ [ 8, 7, 5 ], 1 ], [ [ 8, 7, 6 ], 13 ],
  [ [ 8, 7, 7 ], 23 ], [ [ 8, 8, 0 ], 1 ], [ [ 8, 8, 1 ], 6 ], [ [ 8, 8, 2 ], 2 ], [ [ 8, 8, 3 ], 29 ], [ [ 8, 8, 4 ], 15 ], 
  [ [ 8, 8, 5 ], 3 ], [ [ 8, 8, 6 ], 17 ], [ [ 8, 8, 7 ], 26 ], [ [ 8, 8, 8 ], 27 ], [ [ 9, 3, 3 ], 1 ], [ [ 9, 4, 3 ], 1 ], 
  [ [ 9, 6, 3 ], 2 ], [ [ 9, 6, 4 ], 1 ], [ [ 9, 6, 6 ], 1 ], [ [ 9, 7, 1 ], 2 ], [ [ 9, 7, 2 ], 1 ], [ [ 9, 7, 3 ], 12 ], [ [ 9, 7, 4 ], 8 ], 
  [ [ 9, 7, 5 ], 1 ], [ [ 9, 7, 6 ], 9 ], [ [ 9, 7, 7 ], 14 ], [ [ 9, 8, 1 ], 1 ], [ [ 9, 8, 3 ], 12 ], [ [ 9, 8, 4 ], 4 ], [ [ 9, 8, 5 ], 1 ],
  [ [ 9, 8, 6 ], 10 ], [ [ 9, 8, 7 ], 42 ], [ [ 9, 8, 8 ], 22 ], [ [ 9, 9, 0 ], 1 ], [ [ 9, 9, 1 ], 4 ], [ [ 9, 9, 2 ], 1 ], 
  [ [ 9, 9, 3 ], 18 ], [ [ 9, 9, 4 ], 9 ], [ [ 9, 9, 5 ], 2 ], [ [ 9, 9, 6 ], 12 ], [ [ 9, 9, 7 ], 24 ], [ [ 9, 9, 8 ], 35 ], 
  [ [ 9, 9, 9 ], 11 ], [ [ 10, 3, 1 ], 1 ], [ [ 10, 3, 3 ], 5 ], [ [ 10, 4, 3 ], 2 ], [ [ 10, 6, 3 ], 3 ], [ [ 10, 6, 4 ], 2 ], 
  [ [ 10, 6, 5 ], 1 ], [ [ 10, 6, 6 ], 4 ], [ [ 10, 7, 1 ], 1 ], [ [ 10, 7, 2 ], 1 ], [ [ 10, 7, 3 ], 11 ], [ [ 10, 7, 4 ], 9 ], 
  [ [ 10, 7, 5 ], 2 ], [ [ 10, 7, 6 ], 14 ], [ [ 10, 7, 7 ], 21 ], [ [ 10, 8, 1 ], 2 ], [ [ 10, 8, 3 ], 18 ], [ [ 10, 8, 4 ], 8 ], 
  [ [ 10, 8, 5 ], 1 ], [ [ 10, 8, 6 ], 14 ], [ [ 10, 8, 7 ], 42 ], [ [ 10, 8, 8 ], 32 ], [ [ 10, 9, 1 ], 2 ], [ [ 10, 9, 2 ], 1 ], 
  [ [ 10, 9, 3 ], 13 ], [ [ 10, 9, 4 ], 8 ], [ [ 10, 9, 5 ], 1 ], [ [ 10, 9, 6 ], 10 ], [ [ 10, 9, 7 ], 33 ], [ [ 10, 9, 8 ], 47 ], 
  [ [ 10, 9, 9 ], 30 ], [ [ 10, 10, 0 ], 1 ], [ [ 10, 10, 1 ], 4 ], [ [ 10, 10, 2 ], 1 ], [ [ 10, 10, 3 ], 18 ], [ [ 10, 10, 4 ], 7 ], 
  [ [ 10, 10, 5 ], 1 ], [ [ 10, 10, 6 ], 8 ], [ [ 10, 10, 7 ], 16 ], [ [ 10, 10, 8 ], 29 ], [ [ 10, 10, 9 ], 19 ], [ [ 10, 10, 10 ], 17 ] ];


KLASSI8:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], [ [ 3, 3, 0 ], 1 ], 
  [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 2 ], 1 ], [ [ 3, 3, 3 ], 10 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 2 ], [ [ 4, 4, 3 ], 6 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 4, 1 ], 2 ],
  [ [ 6, 4, 3 ], 6 ], [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], 
  [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 8 ], [ [ 6, 6, 4 ], 3 ], [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 3 ], 2 ], [ [ 7, 4, 3 ], 2 ], [ [ 7, 5, 3 ], 1 ], [ [ 7, 6, 1 ], 1 ], [ [ 7, 6, 3 ], 7 ], [ [ 7, 6, 4 ], 2 ],
  [ [ 7, 6, 6 ], 1 ], [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 4 ], [ [ 7, 7, 2 ], 1 ], [ [ 7, 7, 3 ], 20 ], [ [ 7, 7, 4 ], 6 ], [ [ 7, 7, 5 ], 1 ], 
  [ [ 7, 7, 6 ], 6 ], [ [ 7, 7, 7 ], 12 ], [ [ 8, 3, 1 ], 2 ], [ [ 8, 3, 2 ], 1 ], [ [ 8, 3, 3 ], 8 ], [ [ 8, 4, 1 ], 1 ], [ [ 8, 4, 3 ], 10 ], [ [ 8, 4, 4 ], 3 ], [ [ 8, 5, 3 ], 1 ], 
  [ [ 8, 5, 4 ], 1 ], [ [ 8, 6, 1 ], 2 ], [ [ 8, 6, 2 ], 1 ], [ [ 8, 6, 3 ], 11 ], [ [ 8, 6, 4 ], 8 ], [ [ 8, 6, 5 ], 1 ], 
  [ [ 8, 6, 6 ], 5 ], [ [ 8, 7, 1 ], 2 ], [ [ 8, 7, 3 ], 17 ], [ [ 8, 7, 4 ], 8 ], [ [ 8, 7, 5 ], 1 ], [ [ 8, 7, 6 ], 13 ], [ [ 8, 7, 7 ], 29 ], [ [ 8, 8, 0 ], 1 ], [ [ 8, 8, 1 ], 6 ], 
  [ [ 8, 8, 2 ], 2 ], [ [ 8, 8, 3 ], 29 ], [ [ 8, 8, 4 ], 15 ], [ [ 8, 8, 5 ], 3 ], [ [ 8, 8, 6 ], 17 ], [ [ 8, 8, 7 ], 28 ], [ [ 8, 8, 8 ], 29 ], 
  [ [ 9, 6, 3 ], 1 ], [ [ 9, 7, 1 ], 1 ], [ [ 9, 7, 3 ], 6 ], [ [ 9, 7, 4 ], 2 ], [ [ 9, 7, 6 ], 3 ], [ [ 9, 7, 7 ], 10 ], [ [ 9, 8, 3 ], 2 ], [ [ 9, 8, 6 ], 2 ], [ [ 9, 8, 7 ], 17 ], 
  [ [ 9, 8, 8 ], 4 ], [ [ 9, 9, 0 ], 1 ], [ [ 9, 9, 1 ], 2 ], [ [ 9, 9, 2 ], 1 ], [ [ 9, 9, 3 ], 10 ], [ [ 9, 9, 4 ], 4 ], [ [ 9, 9, 5 ], 1 ], [ [ 9, 9, 6 ], 5 ], 
  [ [ 9, 9, 7 ], 15 ], [ [ 9, 9, 8 ], 19 ], [ [ 9, 9, 9 ], 8 ], [ [ 10, 3, 3 ], 1 ], [ [ 10, 4, 3 ], 1 ], [ [ 10, 6, 3 ], 2 ], [ [ 10, 6, 4 ], 1 ], [ [ 10, 6, 6 ], 1 ], 
  [ [ 10, 7, 1 ], 2 ], [ [ 10, 7, 2 ], 1 ], [ [ 10, 7, 3 ], 18 ], [ [ 10, 7, 4 ], 10 ], [ [ 10, 7, 5 ], 1 ], [ [ 10, 7, 6 ], 14 ], [ [ 10, 7, 7 ], 36 ], [ [ 10, 8, 1 ], 1 ], 
  [ [ 10, 8, 3 ], 14 ], [ [ 10, 8, 4 ], 5 ], [ [ 10, 8, 5 ], 1 ], [ [ 10, 8, 6 ], 12 ], [ [ 10, 8, 7 ], 73 ], [ [ 10, 8, 8 ], 31 ], [ [ 10, 9, 1 ], 2 ], [ [ 10, 9, 3 ], 13 ], 
  [ [ 10, 9, 4 ], 6 ], [ [ 10, 9, 5 ], 1 ], [ [ 10, 9, 6 ], 10 ], [ [ 10, 9, 7 ], 52 ], [ [ 10, 9, 8 ], 44 ], [ [ 10, 9, 9 ], 28 ], [ [ 10, 10, 0 ], 1 ], [ [ 10, 10, 1 ], 6 ], 
  [ [ 10, 10, 2 ], 2 ], [ [ 10, 10, 3 ], 39 ], [ [ 10, 10, 4 ], 16 ], [ [ 10, 10, 5 ], 3 ], [ [ 10, 10, 6 ], 25 ], [ [ 10, 10, 7 ], 96 ], [ [ 10, 10, 8 ], 104 ], [ [ 10, 10, 9 ], 67 ], 
  [ [ 10, 10, 10 ], 82 ], [ [ 11, 3, 1 ], 1 ], [ [ 11, 3, 3 ], 5 ], [ [ 11, 4, 3 ], 2 ], [ [ 11, 6, 3 ], 3 ], [ [ 11, 6, 4 ], 2 ], [ [ 11, 6, 5 ], 1 ], 
  [ [ 11, 6, 6 ], 4 ], [ [ 11, 7, 1 ], 1 ], [ [ 11, 7, 2 ], 1 ], [ [ 11, 7, 3 ], 11 ], [ [ 11, 7, 4 ], 9 ], [ [ 11, 7, 5 ], 2 ], [ [ 11, 7, 6 ], 17 ], [ [ 11, 7, 7 ], 36 ], [ [ 11, 8, 1 ], 2 ], 
  [ [ 11, 8, 3 ], 18 ], [ [ 11, 8, 4 ], 8 ], [ [ 11, 8, 5 ], 1 ], [ [ 11, 8, 6 ], 14 ], [ [ 11, 8, 7 ], 51 ], [ [ 11, 8, 8 ], 35 ], [ [ 11, 9, 3 ], 4 ], 
  [ [ 11, 9, 4 ], 2 ], [ [ 11, 9, 5 ], 1 ], [ [ 11, 9, 6 ], 5 ], [ [ 11, 9, 7 ], 28 ], [ [ 11, 9, 8 ], 18 ], [ [ 11, 9, 9 ], 20 ], [ [ 11, 10, 1 ], 2 ], [ [ 11, 10, 2 ], 1 ], [ [ 11, 10, 3 ], 19 ], 
  [ [ 11, 10, 4 ], 10 ], [ [ 11, 10, 5 ], 1 ], [ [ 11, 10, 6 ], 15 ], [ [ 11, 10, 7 ], 80 ], [ [ 11, 10, 8 ], 80 ], [ [ 11, 10, 9 ], 60 ], [ [ 11, 10, 10 ], 117 ], 
  [ [ 11, 11, 0 ], 1 ], [ [ 11, 11, 1 ], 4 ], [ [ 11, 11, 2 ], 1 ], [ [ 11, 11, 3 ], 22 ], [ [ 11, 11, 4 ], 7 ], [ [ 11, 11, 5 ], 1 ], [ [ 11, 11, 6 ], 8 ], [ [ 11, 11, 7 ], 24 ], 
  [ [ 11, 11, 8 ], 36 ], [ [ 11, 11, 9 ], 12 ], [ [ 11, 11, 10 ], 46 ], [ [ 11, 11, 11 ], 27 ], 

[ [ 12, 3, 3 ], 1 ], 
[ [ 12, 6, 6 ], 1 ], 
[ [ 12, 7, 3 ], 4 ], 
[ [ 12, 7, 4 ], 2 ], 
[ [ 12, 7, 5 ], 1 ], 
[ [ 12, 7, 6 ], 5 ], 
[ [ 12, 7, 7 ], 17 ], 
[ [ 12, 8, 3 ], 2 ], 
[ [ 12, 8, 6 ], 2 ], 
[ [ 12, 8, 7 ], 17 ], 
[ [ 12, 8, 8 ], 6 ], 
[ [ 12, 9, 1 ], 1 ], 
[ [ 12, 9, 2 ], 1 ], 
[ [ 12, 9, 3 ], 7 ], 
[ [ 12, 9, 4 ], 5 ], 
[ [ 12, 9, 5 ], 1 ], 
[ [ 12, 9, 6 ], 7 ], 
[ [ 12, 9, 7 ], 25 ], 
[ [ 12, 9, 8 ], 27 ], 
[ [ 12, 9, 9 ], 14 ], 
[ [ 12, 10, 1 ], 2 ], 
[ [ 12, 10, 3 ], 13 ], 
[ [ 12, 10, 4 ], 6 ], 
[ [ 12, 10, 5 ], 1 ], 
[ [ 12, 10, 6 ], 10 ], 
[ [ 12, 10, 7 ], 55 ], 
[ [ 12, 10, 8 ], 45 ], 
[ [ 12, 10, 9 ], 56 ], 
[ [ 12, 10, 10 ], 77 ], 
[ [ 12, 11, 1 ], 1 ], 
[ [ 12, 11, 3 ], 6 ], 
[ [ 12, 11, 4 ], 2 ], 
[ [ 12, 11, 6 ], 3 ], 
[ [ 12, 11, 7 ], 21 ], 
[ [ 12, 11, 8 ], 18 ], 
[ [ 12, 11, 9 ], 25 ], 
[ [ 12, 11, 10 ], 63 ], 
[ [ 12, 11, 11 ], 19 ], 
[ [ 12, 12, 0 ], 1 ], 
[ [ 12, 12, 1 ], 2 ], 
[ [ 12, 12, 2 ], 1 ], 
[ [ 12, 12, 3 ], 11 ], 
[ [ 12, 12, 4 ], 4 ], 
[ [ 12, 12, 5 ], 1 ], 
[ [ 12, 12, 6 ], 6 ], 
[ [ 12, 12, 7 ], 18 ], 
[ [ 12, 12, 8 ], 21 ], 
[ [ 12, 12, 9 ], 13 ], 
[ [ 12, 12, 10 ], 32 ], 
[ [ 12, 12, 11 ], 23 ], 
[ [ 12, 12, 12 ], 13 ] ];

#-----nur die 1111... Reihe.
SCHNACK111:=function(dd,CMPD)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  #for rr in [1..Size(ERGS1[dd])] do
  for rr in [1..1] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        D:=DIAG(R);
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=CMPD(dd,D,false);
        #a#Print(" ",ID,"\c");
        if not ID in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then Print(".\c"); fi; fi;
        od;
      fi; od;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;



COMPDIAG5RS:=function(dd,D,flag) return RMAXSUCH(D)[1]; end;

ProfileFunctions(SCHNACK,SCHNICK,COMPDIAGSTABERZ,STABMACH2,Stabilizer,Orbits,RMAXSUCH,SCHNACK111);

#-----------
KANTENZUEGE(12);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
SCHNACK111(2,COMPDIAG5RS);#16#6
SCHNACK111(3,COMPDIAG5RS);#32#19
SCHNACK111(4,COMPDIAG5RS);#64#60
#SCHNACK111(5,COMPDIAG5RS);#128#158
#SCHNACK111(6,COMPDIAG5RS);#256#442
#SCHNACK111(7,COMPDIAG5RS);#512#1122
#SCHNACK111(8,COMPDIAG5RS);#1024#2945
DisplayProfile();
#dd:=4;;Reversed(List(ERGS2[dd],i->2*i[1]+i[2]));

ERGS22:=[];
for i in [1..Size(ERGS2)] do
  ERGS22[i]:=[];
  for j in [1..Size(ERGS2[i])] do
    ERGS22[i][j]:=2*ERGS2[i][j][1]+ERGS2[i][j][2];
    od;
  ERGS22[i]:=SortedList(ERGS22[i]);
  od;

ZAEHLE3:=function(ddmin,ddmax,ddmitt,nr) #nur die gleich nach dmitt abzweigen
  local i,j,dd,ERG,COUNT,COUNTS;
  COUNTS:=[];
  for dd in [ddmin..ddmax] do
    ERG:=ERGS2[dd];
    COUNT:=0;
    for i in [1..Size(ERG)] do
      if ERG[i][1]=ERGS1[dd][nr] and ERG[i][2]{[1..ddmitt]}=ERG[i][1]{[1..ddmitt]} and ERG[i][2][ddmitt+1]<>ERG[i][1][ddmitt+1] then
        Print("\n",COUNT,ERG[i][2]{[ddmitt+1..ddmax]});
        COUNT:=COUNT+1;
        fi;
      od;
    Add(COUNTS,COUNT);
    od;
  return COUNTS;
  end;

#----KLASSI mit P1,P2,P3 unsortiert
KLASSU:=function(dd)
  local i,j,ERG2,ERG1,D1,D2,D3,R1R2,R1,R2,R3,P1,P2,P3,RET;
  RET:=[];
  ERG1:=ERGS1[dd];
  ERG2:=ERGS2[dd];
  for i in [1..Size(ERG2)] do
    Print(".\c");
    R1R2:=ERG2[i];
    D1:=DIAG(R1R2[1]);
    D2:=DIAG(R1R2[2]);
    D3:=(D1+D2) mod 2;
    R1:=RMAXSUCH(D1)[1];
    R2:=RMAXSUCH(D2)[1];
    R3:=RMAXSUCH(D3)[1];
    P1:=Position(ERG1,R1/3);
    P2:=Position(ERG1,R2/3);
    P3:=Position(ERG1,R3/3);if P3=fail then P3:=0; fi;
    Add(RET,[P1,P2,P3]);
    od;
  Print("\n");
  return Collected(RET);
  end;

KLASSU2:=[ [ [ 1, 1, 0 ], 1 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 2, 1 ], 1 ], [ [ 3, 3, 0 ], 1 ] ];
KLASSU3:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 1 ], 1 ], [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 2 ], [ [ 3, 3, 3 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 3, 1 ], 1 ], [ [ 4, 3, 2 ], 1 ], [ [ 4, 3, 3 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 1 ] ];
KLASSU4:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 2 ], [ [ 3, 3, 3 ], 2 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 2, 4 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 2 ], [ [ 4, 3, 4 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 1 ], [ [ 4, 4, 3 ], 3 ], [ [ 4, 4, 4 ], 2 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 1 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 2 ], [ [ 6, 4, 4 ], 2 ], 
  [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 1 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 1 ], [ [ 6, 6, 2 ], 1 ], 
  [ [ 6, 6, 3 ], 1 ], [ [ 6, 6, 4 ], 1 ], [ [ 6, 6, 6 ], 1 ] ];
KLASSU5:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 3 ], 6 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 2, 4 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], [ [ 4, 3, 4 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 1 ], [ [ 4, 4, 3 ], 5 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 3, 4 ], 1 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 5 ], 
  [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], 
  [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 5 ], [ [ 6, 6, 4 ], 3 ], [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 1 ], 2 ], [ [ 7, 3, 2 ], 1 ], 
  [ [ 7, 3, 3 ], 4 ], [ [ 7, 4, 1 ], 1 ], [ [ 7, 4, 3 ], 8 ], [ [ 7, 4, 4 ], 2 ], [ [ 7, 4, 7 ], 4 ], [ [ 7, 5, 3 ], 1 ], 
  [ [ 7, 5, 4 ], 1 ], [ [ 7, 5, 7 ], 2 ], [ [ 7, 6, 1 ], 2 ], [ [ 7, 6, 2 ], 1 ], [ [ 7, 6, 3 ], 6 ], [ [ 7, 6, 4 ], 6 ], 
  [ [ 7, 6, 5 ], 1 ], [ [ 7, 6, 6 ], 2 ], [ [ 7, 6, 7 ], 5 ], [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 4 ], [ [ 7, 7, 2 ], 1 ], 
  [ [ 7, 7, 3 ], 8 ], [ [ 7, 7, 4 ], 3 ], [ [ 7, 7, 7 ], 3 ] ];
KLASSU6:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 3 ], 10 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 2, 4 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], [ [ 4, 3, 4 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 1 ], [ [ 4, 4, 3 ], 5 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 3, 4 ], 1 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 5 ], 
  [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], 
  [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 8 ], [ [ 6, 6, 4 ], 3 ], [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 3 ], 2 ], [ [ 7, 4, 3 ], 2 ], 
  [ [ 7, 5, 3 ], 1 ], [ [ 7, 6, 1 ], 1 ], [ [ 7, 6, 3 ], 5 ], [ [ 7, 6, 4 ], 2 ], [ [ 7, 6, 6 ], 1 ], [ [ 7, 6, 7 ], 1 ], 
  [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 2 ], [ [ 7, 7, 2 ], 1 ], [ [ 7, 7, 3 ], 7 ], [ [ 7, 7, 4 ], 3 ], [ [ 7, 7, 5 ], 1 ], 
  [ [ 7, 7, 6 ], 2 ], [ [ 7, 7, 7 ], 2 ], [ [ 8, 3, 1 ], 2 ], [ [ 8, 3, 2 ], 1 ], [ [ 8, 3, 3 ], 8 ], [ [ 8, 4, 1 ], 1 ], 
  [ [ 8, 4, 3 ], 10 ], [ [ 8, 4, 4 ], 3 ], [ [ 8, 4, 8 ], 6 ], [ [ 8, 5, 3 ], 1 ], [ [ 8, 5, 4 ], 1 ], [ [ 8, 5, 8 ], 3 ], 
  [ [ 8, 6, 1 ], 2 ], [ [ 8, 6, 2 ], 1 ], [ [ 8, 6, 3 ], 11 ], [ [ 8, 6, 4 ], 8 ], [ [ 8, 6, 5 ], 1 ], [ [ 8, 6, 6 ], 5 ], 
  [ [ 8, 6, 7 ], 2 ], [ [ 8, 6, 8 ], 15 ], [ [ 8, 7, 1 ], 2 ], [ [ 8, 7, 3 ], 11 ], [ [ 8, 7, 4 ], 6 ], [ [ 8, 7, 5 ], 1 ], 
  [ [ 8, 7, 6 ], 6 ], [ [ 8, 7, 7 ], 7 ], [ [ 8, 7, 8 ], 11 ], [ [ 8, 8, 0 ], 1 ], [ [ 8, 8, 1 ], 6 ], [ [ 8, 8, 2 ], 2 ], 
  [ [ 8, 8, 3 ], 25 ], [ [ 8, 8, 4 ], 8 ], [ [ 8, 8, 8 ], 21 ], [ [ 9, 3, 1 ], 1 ], [ [ 9, 3, 3 ], 3 ], [ [ 9, 3, 9 ], 1 ], 
  [ [ 9, 4, 3 ], 2 ], [ [ 9, 4, 8 ], 1 ], [ [ 9, 4, 9 ], 2 ], [ [ 9, 5, 8 ], 1 ], [ [ 9, 5, 9 ], 1 ], [ [ 9, 6, 3 ], 3 ], 
  [ [ 9, 6, 4 ], 2 ], [ [ 9, 6, 5 ], 1 ], [ [ 9, 6, 6 ], 2 ], [ [ 9, 6, 7 ], 3 ], [ [ 9, 6, 8 ], 9 ], [ [ 9, 6, 9 ], 4 ], 
  [ [ 9, 7, 1 ], 1 ], [ [ 9, 7, 2 ], 1 ], [ [ 9, 7, 3 ], 5 ], [ [ 9, 7, 4 ], 5 ], [ [ 9, 7, 5 ], 1 ], [ [ 9, 7, 6 ], 2 ], 
  [ [ 9, 7, 7 ], 2 ], [ [ 9, 7, 8 ], 12 ], [ [ 9, 7, 9 ], 2 ], [ [ 9, 8, 1 ], 2 ], [ [ 9, 8, 3 ], 12 ], [ [ 9, 8, 4 ], 5 ], 
  [ [ 9, 8, 8 ], 13 ], [ [ 9, 8, 9 ], 9 ], [ [ 9, 9, 0 ], 1 ], [ [ 9, 9, 1 ], 2 ], [ [ 9, 9, 2 ], 1 ], [ [ 9, 9, 3 ], 7 ], 
  [ [ 9, 9, 4 ], 2 ], [ [ 9, 9, 9 ], 3 ] ];
KLASSU7:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 3 ], 10 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 2, 4 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], [ [ 4, 3, 4 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 1 ], [ [ 4, 4, 3 ], 5 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 3, 4 ], 1 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 5 ], 
  [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], 
  [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 8 ], [ [ 6, 6, 4 ], 3 ], [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 3 ], 2 ], [ [ 7, 4, 3 ], 2 ], 
  [ [ 7, 5, 3 ], 1 ], [ [ 7, 6, 1 ], 1 ], [ [ 7, 6, 3 ], 7 ], [ [ 7, 6, 4 ], 2 ], [ [ 7, 6, 6 ], 1 ], [ [ 7, 6, 7 ], 2 ], 
  [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 4 ], [ [ 7, 7, 2 ], 1 ], [ [ 7, 7, 3 ], 16 ], [ [ 7, 7, 4 ], 6 ], [ [ 7, 7, 5 ], 1 ], 
  [ [ 7, 7, 6 ], 4 ], [ [ 7, 7, 7 ], 8 ], [ [ 8, 3, 1 ], 2 ], [ [ 8, 3, 2 ], 1 ], [ [ 8, 3, 3 ], 8 ], [ [ 8, 4, 1 ], 1 ], 
  [ [ 8, 4, 3 ], 10 ], [ [ 8, 4, 4 ], 3 ], [ [ 8, 4, 8 ], 6 ], [ [ 8, 5, 3 ], 1 ], [ [ 8, 5, 4 ], 1 ], [ [ 8, 5, 8 ], 3 ], 
  [ [ 8, 6, 1 ], 2 ], [ [ 8, 6, 2 ], 1 ], [ [ 8, 6, 3 ], 11 ], [ [ 8, 6, 4 ], 8 ], [ [ 8, 6, 5 ], 1 ], [ [ 8, 6, 6 ], 5 ], 
  [ [ 8, 6, 7 ], 3 ], [ [ 8, 6, 8 ], 17 ], [ [ 8, 7, 1 ], 2 ], [ [ 8, 7, 3 ], 17 ], [ [ 8, 7, 4 ], 8 ], [ [ 8, 7, 5 ], 1 ], 
  [ [ 8, 7, 6 ], 10 ], [ [ 8, 7, 7 ], 23 ], [ [ 8, 7, 8 ], 26 ], [ [ 8, 8, 0 ], 1 ], [ [ 8, 8, 1 ], 6 ], [ [ 8, 8, 2 ], 2 ], 
  [ [ 8, 8, 3 ], 29 ], [ [ 8, 8, 4 ], 9 ], [ [ 8, 8, 8 ], 27 ], [ [ 9, 3, 3 ], 1 ], [ [ 9, 4, 3 ], 1 ], [ [ 9, 4, 9 ], 1 ], 
  [ [ 9, 5, 9 ], 1 ], [ [ 9, 6, 3 ], 2 ], [ [ 9, 6, 4 ], 1 ], [ [ 9, 6, 6 ], 1 ], [ [ 9, 6, 7 ], 2 ], [ [ 9, 6, 8 ], 10 ], 
  [ [ 9, 6, 9 ], 8 ], [ [ 9, 7, 1 ], 2 ], [ [ 9, 7, 2 ], 1 ], [ [ 9, 7, 3 ], 12 ], [ [ 9, 7, 4 ], 8 ], [ [ 9, 7, 5 ], 1 ], 
  [ [ 9, 7, 6 ], 7 ], [ [ 9, 7, 7 ], 14 ], [ [ 9, 7, 8 ], 39 ], [ [ 9, 7, 9 ], 24 ], [ [ 9, 8, 1 ], 1 ], [ [ 9, 8, 3 ], 12 ],
  [ [ 9, 8, 4 ], 4 ], [ [ 9, 8, 5 ], 1 ], [ [ 9, 8, 7 ], 3 ], [ [ 9, 8, 8 ], 22 ], [ [ 9, 8, 9 ], 8 ], [ [ 9, 9, 0 ], 1 ], 
  [ [ 9, 9, 1 ], 4 ], [ [ 9, 9, 2 ], 1 ], [ [ 9, 9, 3 ], 18 ], [ [ 9, 9, 4 ], 8 ], [ [ 9, 9, 5 ], 1 ], [ [ 9, 9, 6 ], 4 ], 
  [ [ 9, 9, 8 ], 27 ], [ [ 9, 9, 9 ], 11 ], [ [ 10, 3, 1 ], 1 ], [ [ 10, 3, 3 ], 5 ], [ [ 10, 3, 10 ], 3 ], 
  [ [ 10, 4, 3 ], 2 ], [ [ 10, 4, 8 ], 1 ], [ [ 10, 4, 9 ], 1 ], [ [ 10, 4, 10 ], 4 ], [ [ 10, 5, 8 ], 1 ], 
  [ [ 10, 5, 9 ], 1 ], [ [ 10, 5, 10 ], 1 ], [ [ 10, 6, 3 ], 3 ], [ [ 10, 6, 4 ], 2 ], [ [ 10, 6, 5 ], 1 ], 
  [ [ 10, 6, 6 ], 4 ], [ [ 10, 6, 7 ], 6 ], [ [ 10, 6, 8 ], 14 ], [ [ 10, 6, 9 ], 8 ], [ [ 10, 6, 10 ], 8 ], 
  [ [ 10, 7, 1 ], 1 ], [ [ 10, 7, 2 ], 1 ], [ [ 10, 7, 3 ], 11 ], [ [ 10, 7, 4 ], 9 ], [ [ 10, 7, 5 ], 2 ], 
  [ [ 10, 7, 6 ], 8 ], [ [ 10, 7, 7 ], 21 ], [ [ 10, 7, 8 ], 41 ], [ [ 10, 7, 9 ], 33 ], [ [ 10, 7, 10 ], 16 ], 
  [ [ 10, 8, 1 ], 2 ], [ [ 10, 8, 3 ], 18 ], [ [ 10, 8, 4 ], 7 ], [ [ 10, 8, 7 ], 1 ], [ [ 10, 8, 8 ], 32 ], 
  [ [ 10, 8, 9 ], 12 ], [ [ 10, 8, 10 ], 28 ], [ [ 10, 9, 1 ], 2 ], [ [ 10, 9, 2 ], 1 ], [ [ 10, 9, 3 ], 13 ], 
  [ [ 10, 9, 4 ], 7 ], [ [ 10, 9, 6 ], 2 ], [ [ 10, 9, 8 ], 35 ], [ [ 10, 9, 9 ], 30 ], [ [ 10, 9, 10 ], 19 ], 
  [ [ 10, 10, 0 ], 1 ], [ [ 10, 10, 1 ], 4 ], [ [ 10, 10, 2 ], 1 ], [ [ 10, 10, 3 ], 15 ], [ [ 10, 10, 4 ], 3 ], 
  [ [ 10, 10, 8 ], 1 ], [ [ 10, 10, 10 ], 17 ] ];
KLASSU8:=[ [ [ 1, 1, 0 ], 1 ], [ [ 1, 1, 1 ], 2 ], [ [ 2, 1, 1 ], 1 ], [ [ 2, 2, 0 ], 1 ], [ [ 2, 2, 2 ], 1 ], [ [ 3, 1, 1 ], 1 ], 
  [ [ 3, 2, 3 ], 1 ], [ [ 3, 3, 0 ], 1 ], [ [ 3, 3, 1 ], 4 ], [ [ 3, 3, 3 ], 10 ], [ [ 4, 1, 1 ], 1 ], [ [ 4, 2, 1 ], 1 ], 
  [ [ 4, 2, 4 ], 1 ], [ [ 4, 3, 1 ], 2 ], [ [ 4, 3, 3 ], 5 ], [ [ 4, 3, 4 ], 1 ], [ [ 4, 4, 0 ], 1 ], [ [ 4, 4, 1 ], 4 ], 
  [ [ 4, 4, 2 ], 1 ], [ [ 4, 4, 3 ], 5 ], [ [ 4, 4, 4 ], 3 ], [ [ 5, 2, 1 ], 1 ], [ [ 5, 3, 3 ], 1 ], [ [ 5, 4, 1 ], 1 ], 
  [ [ 5, 4, 2 ], 1 ], [ [ 5, 4, 3 ], 1 ], [ [ 5, 4, 4 ], 2 ], [ [ 5, 5, 0 ], 1 ], [ [ 5, 5, 1 ], 1 ], [ [ 5, 5, 3 ], 1 ], 
  [ [ 6, 3, 1 ], 1 ], [ [ 6, 3, 2 ], 1 ], [ [ 6, 3, 3 ], 3 ], [ [ 6, 3, 4 ], 1 ], [ [ 6, 4, 1 ], 2 ], [ [ 6, 4, 3 ], 5 ], 
  [ [ 6, 4, 4 ], 3 ], [ [ 6, 5, 1 ], 1 ], [ [ 6, 5, 3 ], 2 ], [ [ 6, 5, 4 ], 1 ], [ [ 6, 6, 0 ], 1 ], [ [ 6, 6, 1 ], 3 ], 
  [ [ 6, 6, 2 ], 1 ], [ [ 6, 6, 3 ], 8 ], [ [ 6, 6, 4 ], 3 ], [ [ 6, 6, 6 ], 2 ], [ [ 7, 3, 3 ], 2 ], [ [ 7, 4, 3 ], 2 ], 
  [ [ 7, 5, 3 ], 1 ], [ [ 7, 6, 1 ], 1 ], [ [ 7, 6, 3 ], 7 ], [ [ 7, 6, 4 ], 2 ], [ [ 7, 6, 6 ], 1 ], [ [ 7, 6, 7 ], 2 ], 
  [ [ 7, 7, 0 ], 1 ], [ [ 7, 7, 1 ], 4 ], [ [ 7, 7, 2 ], 1 ], [ [ 7, 7, 3 ], 20 ], [ [ 7, 7, 4 ], 6 ], [ [ 7, 7, 5 ], 1 ], 
  [ [ 7, 7, 6 ], 4 ], [ [ 7, 7, 7 ], 12 ], [ [ 8, 3, 1 ], 2 ], [ [ 8, 3, 2 ], 1 ], [ [ 8, 3, 3 ], 8 ], [ [ 8, 4, 1 ], 1 ], 
  [ [ 8, 4, 3 ], 10 ], [ [ 8, 4, 4 ], 3 ], [ [ 8, 4, 8 ], 6 ], [ [ 8, 5, 3 ], 1 ], [ [ 8, 5, 4 ], 1 ], [ [ 8, 5, 8 ], 3 ], 
  [ [ 8, 6, 1 ], 2 ], [ [ 8, 6, 2 ], 1 ], [ [ 8, 6, 3 ], 11 ], [ [ 8, 6, 4 ], 8 ], [ [ 8, 6, 5 ], 1 ], [ [ 8, 6, 6 ], 5 ], 
  [ [ 8, 6, 7 ], 3 ], [ [ 8, 6, 8 ], 17 ], [ [ 8, 7, 1 ], 2 ], [ [ 8, 7, 3 ], 17 ], [ [ 8, 7, 4 ], 8 ], [ [ 8, 7, 5 ], 1 ], 
  [ [ 8, 7, 6 ], 10 ], [ [ 8, 7, 7 ], 29 ], [ [ 8, 7, 8 ], 28 ], [ [ 8, 8, 0 ], 1 ], [ [ 8, 8, 1 ], 6 ], [ [ 8, 8, 2 ], 2 ], 
  [ [ 8, 8, 3 ], 29 ], [ [ 8, 8, 4 ], 9 ], [ [ 8, 8, 8 ], 29 ], [ [ 9, 6, 3 ], 1 ], [ [ 9, 6, 9 ], 1 ], [ [ 9, 7, 1 ], 1 ], 
  [ [ 9, 7, 3 ], 6 ], [ [ 9, 7, 4 ], 2 ], [ [ 9, 7, 6 ], 3 ], [ [ 9, 7, 7 ], 10 ], [ [ 9, 7, 8 ], 17 ], [ [ 9, 7, 9 ], 3 ], 
  [ [ 9, 8, 3 ], 2 ], [ [ 9, 8, 6 ], 2 ], [ [ 9, 8, 8 ], 4 ], [ [ 9, 8, 9 ], 1 ], [ [ 9, 9, 0 ], 1 ], [ [ 9, 9, 1 ], 2 ], 
  [ [ 9, 9, 2 ], 1 ], [ [ 9, 9, 3 ], 10 ], [ [ 9, 9, 4 ], 4 ], [ [ 9, 9, 5 ], 1 ], [ [ 9, 9, 6 ], 4 ], [ [ 9, 9, 7 ], 12 ], 
  [ [ 9, 9, 8 ], 18 ], [ [ 9, 9, 9 ], 8 ], [ [ 10, 3, 3 ], 1 ], [ [ 10, 4, 3 ], 1 ], [ [ 10, 4, 10 ], 1 ], 
  [ [ 10, 5, 10 ], 1 ], [ [ 10, 6, 3 ], 2 ], [ [ 10, 6, 4 ], 1 ], [ [ 10, 6, 6 ], 1 ], [ [ 10, 6, 7 ], 2 ], 
  [ [ 10, 6, 8 ], 11 ], [ [ 10, 6, 9 ], 1 ], [ [ 10, 6, 10 ], 13 ], [ [ 10, 7, 1 ], 2 ], [ [ 10, 7, 2 ], 1 ], 
  [ [ 10, 7, 3 ], 18 ], [ [ 10, 7, 4 ], 10 ], [ [ 10, 7, 5 ], 1 ], [ [ 10, 7, 6 ], 12 ], [ [ 10, 7, 7 ], 36 ], 
  [ [ 10, 7, 8 ], 70 ], [ [ 10, 7, 9 ], 8 ], [ [ 10, 7, 10 ], 94 ], [ [ 10, 8, 1 ], 1 ], [ [ 10, 8, 3 ], 14 ], 
  [ [ 10, 8, 4 ], 5 ], [ [ 10, 8, 5 ], 1 ], [ [ 10, 8, 6 ], 1 ], [ [ 10, 8, 7 ], 3 ], [ [ 10, 8, 8 ], 31 ], 
  [ [ 10, 8, 9 ], 1 ], [ [ 10, 8, 10 ], 12 ], [ [ 10, 9, 1 ], 2 ], [ [ 10, 9, 3 ], 13 ], [ [ 10, 9, 4 ], 6 ], 
  [ [ 10, 9, 5 ], 1 ], [ [ 10, 9, 6 ], 9 ], [ [ 10, 9, 7 ], 44 ], [ [ 10, 9, 8 ], 43 ], [ [ 10, 9, 9 ], 28 ], 
  [ [ 10, 9, 10 ], 67 ], [ [ 10, 10, 0 ], 1 ], [ [ 10, 10, 1 ], 6 ], [ [ 10, 10, 2 ], 2 ], [ [ 10, 10, 3 ], 39 ], 
  [ [ 10, 10, 4 ], 15 ], [ [ 10, 10, 5 ], 2 ], [ [ 10, 10, 6 ], 12 ], [ [ 10, 10, 7 ], 2 ], [ [ 10, 10, 8 ], 92 ], 
  [ [ 10, 10, 10 ], 82 ], [ [ 11, 3, 1 ], 1 ], [ [ 11, 3, 3 ], 5 ], [ [ 11, 3, 11 ], 3 ], [ [ 11, 4, 3 ], 2 ], 
  [ [ 11, 4, 8 ], 1 ], [ [ 11, 4, 10 ], 1 ], [ [ 11, 4, 11 ], 4 ], [ [ 11, 5, 8 ], 1 ], [ [ 11, 5, 10 ], 1 ], 
  [ [ 11, 5, 11 ], 1 ], [ [ 11, 6, 3 ], 3 ], [ [ 11, 6, 4 ], 2 ], [ [ 11, 6, 5 ], 1 ], [ [ 11, 6, 6 ], 4 ], 
  [ [ 11, 6, 7 ], 6 ], [ [ 11, 6, 8 ], 14 ], [ [ 11, 6, 9 ], 1 ], [ [ 11, 6, 10 ], 9 ], [ [ 11, 6, 11 ], 8 ], 
  [ [ 11, 7, 1 ], 1 ], [ [ 11, 7, 2 ], 1 ], [ [ 11, 7, 3 ], 11 ], [ [ 11, 7, 4 ], 9 ], [ [ 11, 7, 5 ], 2 ], 
  [ [ 11, 7, 6 ], 11 ], [ [ 11, 7, 7 ], 36 ], [ [ 11, 7, 8 ], 50 ], [ [ 11, 7, 9 ], 5 ], [ [ 11, 7, 10 ], 77 ], 
  [ [ 11, 7, 11 ], 24 ], [ [ 11, 8, 1 ], 2 ], [ [ 11, 8, 3 ], 18 ], [ [ 11, 8, 4 ], 7 ], [ [ 11, 8, 7 ], 1 ], 
  [ [ 11, 8, 8 ], 35 ], [ [ 11, 8, 9 ], 1 ], [ [ 11, 8, 10 ], 14 ], [ [ 11, 8, 11 ], 33 ], [ [ 11, 9, 3 ], 4 ], 
  [ [ 11, 9, 4 ], 2 ], [ [ 11, 9, 5 ], 1 ], [ [ 11, 9, 6 ], 4 ], [ [ 11, 9, 7 ], 23 ], [ [ 11, 9, 8 ], 17 ], 
  [ [ 11, 9, 9 ], 20 ], [ [ 11, 9, 10 ], 60 ], [ [ 11, 9, 11 ], 12 ], [ [ 11, 10, 1 ], 2 ], [ [ 11, 10, 2 ], 1 ], 
  [ [ 11, 10, 3 ], 19 ], [ [ 11, 10, 4 ], 9 ], [ [ 11, 10, 6 ], 6 ], [ [ 11, 10, 7 ], 3 ], [ [ 11, 10, 8 ], 66 ], 
  [ [ 11, 10, 10 ], 117 ], [ [ 11, 10, 11 ], 46 ], [ [ 11, 11, 0 ], 1 ], [ [ 11, 11, 1 ], 4 ], [ [ 11, 11, 2 ], 1 ], 
  [ [ 11, 11, 3 ], 19 ], [ [ 11, 11, 4 ], 3 ], [ [ 11, 11, 8 ], 3 ], [ [ 11, 11, 11 ], 27 ], [ [ 12, 3, 3 ], 1 ], 
  [ [ 12, 4, 12 ], 1 ], [ [ 12, 5, 12 ], 1 ], [ [ 12, 6, 6 ], 1 ], [ [ 12, 6, 7 ], 1 ], [ [ 12, 6, 9 ], 2 ], 
  [ [ 12, 6, 10 ], 3 ], [ [ 12, 6, 11 ], 2 ], [ [ 12, 6, 12 ], 3 ], [ [ 12, 7, 3 ], 4 ], [ [ 12, 7, 4 ], 2 ], 
  [ [ 12, 7, 5 ], 1 ], [ [ 12, 7, 6 ], 4 ], [ [ 12, 7, 7 ], 17 ], [ [ 12, 7, 8 ], 17 ], [ [ 12, 7, 9 ], 5 ], 
  [ [ 12, 7, 10 ], 49 ], [ [ 12, 7, 11 ], 21 ], [ [ 12, 7, 12 ], 18 ], [ [ 12, 8, 3 ], 2 ], [ [ 12, 8, 6 ], 2 ], 
  [ [ 12, 8, 8 ], 6 ], [ [ 12, 8, 9 ], 2 ], [ [ 12, 8, 10 ], 2 ], [ [ 12, 8, 11 ], 14 ], [ [ 12, 8, 12 ], 3 ], 
  [ [ 12, 9, 1 ], 1 ], [ [ 12, 9, 2 ], 1 ], [ [ 12, 9, 3 ], 7 ], [ [ 12, 9, 4 ], 5 ], [ [ 12, 9, 5 ], 1 ], 
  [ [ 12, 9, 6 ], 5 ], [ [ 12, 9, 7 ], 20 ], [ [ 12, 9, 8 ], 25 ], [ [ 12, 9, 9 ], 14 ], [ [ 12, 9, 10 ], 56 ], 
  [ [ 12, 9, 11 ], 25 ], [ [ 12, 9, 12 ], 13 ], [ [ 12, 10, 1 ], 2 ], [ [ 12, 10, 3 ], 13 ], [ [ 12, 10, 4 ], 6 ], 
  [ [ 12, 10, 5 ], 1 ], [ [ 12, 10, 6 ], 7 ], [ [ 12, 10, 7 ], 6 ], [ [ 12, 10, 8 ], 43 ], [ [ 12, 10, 10 ], 77 ], 
  [ [ 12, 10, 11 ], 63 ], [ [ 12, 10, 12 ], 31 ], [ [ 12, 11, 1 ], 1 ], [ [ 12, 11, 3 ], 6 ], [ [ 12, 11, 4 ], 2 ], 
  [ [ 12, 11, 6 ], 1 ], [ [ 12, 11, 8 ], 4 ], [ [ 12, 11, 11 ], 19 ], [ [ 12, 12, 0 ], 1 ], [ [ 12, 12, 1 ], 2 ], 
  [ [ 12, 12, 2 ], 1 ], [ [ 12, 12, 3 ], 11 ], [ [ 12, 12, 4 ], 3 ], [ [ 12, 12, 6 ], 3 ], [ [ 12, 12, 8 ], 18 ], 
  [ [ 12, 12, 10 ], 1 ], [ [ 12, 12, 11 ], 23 ], [ [ 12, 12, 12 ], 13 ] ];

#---Test GF(8)------------------------------
GESAMTDILIST:=[];
for i2 in [0..7] do
  for i3 in [0..7] do
  for i4 in [0..7] do
  for i5 in [0..7] do
  for i6 in [0..7] do
  R:=RMAXSUCH(DIAG([[7],[i2,i3],[i4,i5,i6]]))[1];
  if not (R in GESAMTDILIST) then
    Add(GESAMTDILIST,R);
    Print("\n",Size(GESAMTDILIST),[[7],[i2,i3],[i4,i5,i6]],R,"\c");
    fi;
  od; od; od; od; od;#47

#List(AllSmallGroups(Size,32,RankPGroup,4,PClassPGroup,2),i->Size(Orbits(AutomorphismGroup(i),i)));
#i:=SmallGroup(32,45);Size(Orbits(AutomorphismGroup(i),i));

#----Start DNEU mit Markierung:
DGANZNEU:=function(d) #
  local dneu,i;
  if not IsBound(ALPHA[d+1]) then
    dneu:=Size(BETA);
    for i in [1..dneu] do Add(BETA,XORMAT[d+1][BETA[i]+1]-1); od;
    for i in [1..dneu] do ALPHA[BETA[dneu+i]+1]:=dneu+i-1; od;
    #Print("\n",d," ",dneu,ALPHA,BETA);
    fi;
  dneu:=ALPHA[d+1];
  if dneu=0 then return 0; else return 4-dneu; fi;
  end;

CSWAHL:=function(i,ALPHA,BETA,CS)
  if Size(BETA)<4 then return Reversed(SortedList([CS[1][i],CS[2][i],CS[3][i]]));
    else return [CS[4-BETA[2]][i],CS[4-BETA[3]][i],CS[4-BETA[4]][i]]; fi;
  end; #geht nicht bei VIERTSCHNACK111(6), und zwar konkret bei:

#RVG:=RMAXSUCH(DIAG(ERGS2[6][132][1]*2+ERGS2[6][132][2]))[1];
#for i in [1..132] do Print(".\c");
#  RVI:=RMAXSUCH(DIAG(ERGS2[6][i][1]*2+ERGS2[6][i][2]))[1];
#  if RVI=RVG then Print(i); fi;
#  od;

#gap> ERGS2[6][131];
#[ [ [ 1 ], [ 1, 1 ], [ 1, 1, 1 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1 ] ],
#  [ [ 1 ], [ 1, 1 ], [ 1, 1, 0 ], [ 1, 0, 1, 0 ], [ 0, 1, 0, 0, 1 ], [ 1, 1, 0, 0, 0, 0 ] ] ]
#gap> ERGS2[6][98];
#[ [ [ 1 ], [ 1, 1 ], [ 1, 1, 1 ], [ 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1 ] ],
#  [ [ 1 ], [ 1, 1 ], [ 1, 1, 1 ], [ 1, 1, 0, 0 ], [ 0, 0, 1, 0, 1 ], [ 0, 0, 0, 1, 0, 1 ] ] ]

RMAXSUCH:=function(D) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMAX:=[];
  D1:=List(D,i->Int((i mod 4)/2));
  C1:=COMPDIAGSTABERZ(D1);
  S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2);
  C2:=COMPDIAGSTABERZ(D2);
  S2:=Group(STABMACH2(C2));
  SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2;
  C3:=COMPDIAGSTABERZ(D3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=Filtered([2..SD],i->not IsBound(LD[i]));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      MENGS:=[]; MALPHA:=[];
      for i in BOINGS do
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
        RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
        #RR:=List(KRES,i->[DGANZNEU(D[i]),CSWAHL(i,ALPHA,BETA,[C1,C2,C3])]);#geht nich
        #RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
        if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
        if RR=RNEU then Add(MENGS,i); MALPHA[i]:=[ALPHA,BETA]; fi;
        od;
      for i in MENGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        VNEU.ALPHA:=List(MALPHA[i][1]); VNEU.BETA:=List(MALPHA[i][2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i.HRES),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  return [RMAX,VARIANTEN];
  end;

#zuvor SCHNACK
dd:=4; i:=52;
R:=2*ERGS2[dd][i][1]+ERGS2[dd][i][2];
D:=DIAG(R);
RMAX:=RMAXSUCH(D)[1];

#----jetzt mit DOPPELSCHNACK111 erst grob und dann fein durchgehen

RFEINSUCH:=function(D) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMAX:=[];
  D1:=List(D,i->Int((i mod 4)/2));
  C1:=COMPDIAGSTABERZ(D1);
  S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2);
  C2:=COMPDIAGSTABERZ(D2);
  S2:=Group(STABMACH2(C2));
  SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2;
  C3:=COMPDIAGSTABERZ(D3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN{[1..Minimum(4,Size(VARIANTEN))]} do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=[];MALPHA:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
        #RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
        RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
        if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
        if RR=RNEU then Add(MENGS,i); MALPHA[i]:=[ALPHA,BETA]; fi;
        fi; od;
      #Print("\nMENGS=",MENGS,Size(MENGS));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      for i in BOINGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        VNEU.ALPHA:=List(MALPHA[i][1]); VNEU.BETA:=List(MALPHA[i][2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i.HRES),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  return [RMAX,VARIANTEN];
  end;

RGROBSUCH:=function(D) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMAX:=[]; SX:=[];
  D1:=List(D,i->Int((i mod 4)/2));
  C1:=COMPDIAGSTABERZ(D1);
 # S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2);
  C2:=COMPDIAGSTABERZ(D2);
 # S2:=Group(STABMACH2(C2));
 # SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2;
  C3:=COMPDIAGSTABERZ(D3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=[];MALPHA:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
        #RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
        RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
        if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
        if RR=RNEU then Add(MENGS,i); MALPHA[i]:=[ALPHA,BETA]; fi;
        fi; od;
      #Print("\nMENGS=",MENGS,Size(MENGS));
  #    GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
  #    BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      for i in MENGS{[1]} do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        VNEU.ALPHA:=List(MALPHA[i][1]); VNEU.BETA:=List(MALPHA[i][2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
  #    V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i.HRES),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  return [RMAX,VARIANTEN];
  end;


DOPPELSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  #for rr in [1..Size(ERGS1[dd])] do
  for rr in [1..1] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        D:=DIAG(R);
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=RGROBSUCH(D)[1];
        #a#Print(" ",ID,"\c");
        if not ID in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then Print(".\c"); fi; fi;
        od;
      fi; od;
    od;

  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RFEINSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print("#\c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    od;

  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RMAXSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print("*\c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    od;

  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  #Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

ProfileFunctions(SCHNACK,SCHNICK,COMPDIAGSTABERZ,STABMACH2,Stabilizer,Orbits,RMAXSUCH,RFEINSUCH,RGROBSUCH,DOPPELSCHNACK111);

#-----------
KANTENZUEGE(12);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
DOPPELSCHNACK111(2);#16#6
DOPPELSCHNACK111(3);#32#19
DOPPELSCHNACK111(4);#64#60
#DOPPELSCHNACK111(5);#128#158
#DOPPELSCHNACK111(6);#256#442
#DOPPELSCHNACK111(7);#512#1122
#DOPPELSCHNACK111(8);#1024#2945
DisplayProfile();

#----ERSTSCHNACK111 und ZWEITSCHNACK111 und DRITTSCHNACK111

ERSTSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,ORBI,ORB,ts,rr,DX;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime();
  ERGS2[dd]:=[];
  #for rr in [1..Size(ERGS1[dd])] do
  for rr in [1..1] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(ERGS2[dd])=",Size(ERGS2[dd]),"\n"); fi;
      for ORB in ORBI do
        Add(ERGS2[dd],[R1,ORB]); 
        if not SAGE then Print("#\c"); fi;
        od;
      fi; od;
    od;
  DX:=       [ 1, 3,10, 50,286,1260,6072,25404,100392,0,0,0];
  Print("\n",List(ERGS2,i->Size(i)),DX[dd]);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

ZWEITSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,ID,ts,rr,ERGS2ALT,DX;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RGROBSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print(Size(ERGS2[dd])," \c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    od;
  DX:=       [ 1, 0, 0,  0,  0,   0,2090,70008,0,0,0,0];
  Print("\n",List(ERGS2,i->Size(i)),DX[dd]);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

DRITTSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,ID,ts,rr,ERGS2ALT,DX;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RFEINSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print(Size(ERGS2[dd])," \c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    od;
  DX:=       [ 1, 0, 0,  0,  0,   0,2090,0,0,0,0,0];
  Print("\n",List(ERGS2,i->Size(i)),DX[dd]);
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

VIERTSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,ID,ts,rr,ERGS2ALT;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RMAXSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print(Size(ERGS2[dd])," \c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    od;
  Print("\n",List(ERGS2,i->Size(i)));
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

ProfileFunctions(SCHNACK,SCHNICK,COMPDIAGSTABERZ,STABMACH2,Stabilizer,Orbits,RMAXSUCH,RFEINSUCH,RGROBSUCH,DOPPELSCHNACK111);

#-----------
KANTENZUEGE(12);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
ERSTSCHNACK111(2);#16
VIERTSCHNACK111(2);#16
ERSTSCHNACK111(3);#32
VIERTSCHNACK111(3);#32
ERSTSCHNACK111(4);#64
VIERTSCHNACK111(4);#64
ERSTSCHNACK111(5);#128
VIERTSCHNACK111(5);#128
ERSTSCHNACK111(6);#256
VIERTSCHNACK111(6);#256
ERSTSCHNACK111(7);#512
ZWEITSCHNACK111(7);#512
VIERTSCHNACK111(7);#512
ERSTSCHNACK111(8);#1048
ZWEITSCHNACK111(8);#1048
VIERTSCHNACK111(8);#1048
ERSTSCHNACK111(9);#2096
ZWEITSCHNACK111(9);#2096
VIERTSCHNACK111(9);#2096
DisplayProfile();

#---- mit Zwischenfilter nur (x,x,x)
ZWISCHENFILTER:=function(R1,R2)
  local R3,D1,D2,D3,C1,C2,C3,RET;
  R3:=(R1+R2) mod 2;
  D1:=DIAG(R1);
  D2:=DIAG(R2);
  D3:=DIAG(R3);
  C1:=Collected(COMPDIAGSTABERZ(D1));
  C2:=Collected(COMPDIAGSTABERZ(D2));
  C3:=Collected(COMPDIAGSTABERZ(D3));
  Print("\n",C1,C2,C3);
  if C1=C2 and C2=C3 then RET:=true; else RET:=false; fi;
  return RET;
  end;

FILTERSCHNACK111:=function(dd)
  local jj,R,R1,R1R2,ID,ts,rr,ERGS2ALT,C;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2ALT:=ERGS2[dd]; ERGS2[dd]:=[]; GESAMTDILIST[dd]:=[];
  for R1R2 in ERGS2ALT do if ZWISCHENFILTER(R1R2[1],R1R2[2]) then
    R:=2*R1R2[1]+R1R2[2];
    D:=DIAG(R);
    ID:=RMAXSUCH(D)[1];
    if not ID in GESAMTDILIST[dd] then
      Add(ERGS2[dd],R1R2); 
      Add(GESAMTDILIST[dd],ID);
      if not SAGE then Print(Size(ERGS2[dd])," \c"); fi;
      else if not SAGE then Print(".\c"); fi; fi;
    fi; od;
  Print("\n",List(ERGS2,i->Size(i)));
  Print("\n",[ 1, 2, 6, 18, 69, 124, 460, 715],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

#-----------
KANTENZUEGE(12);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
ERSTSCHNACK111(2);#16
FILTERSCHNACK111(2);#16
ERSTSCHNACK111(3);#32
FILTERSCHNACK111(3);#32
ERSTSCHNACK111(4);#64
FILTERSCHNACK111(4);#64
ERSTSCHNACK111(5);#128
FILTERSCHNACK111(5);#128
ERSTSCHNACK111(6);#256
FILTERSCHNACK111(6);#256
ERSTSCHNACK111(7);#512
FILTERSCHNACK111(7);#512
ERSTSCHNACK111(8);#1048
FILTERSCHNACK111(8);#1048
DisplayProfile();

#----RMAXSUCH Versuch mit hintereinandergestelltem RMAX

RMAXSUCH:=function(R) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA,RRR;
  D:=DIAG(R);
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMAX:=[];
  D1:=List(D,i->Int((i mod 4)/2));
  C1:=COMPDIAGSTABERZ(D1);
  S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2);
  C2:=COMPDIAGSTABERZ(D2);
  S2:=Group(STABMACH2(C2));
  SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2;
  C3:=COMPDIAGSTABERZ(D3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=Filtered([2..SD],i->not IsBound(LD[i]));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      MENGS:=[]; MALPHA:=[];
      for i in BOINGS do
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
        #RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
        #RR:=List(KRES,i->[DGANZNEU(D[i]),CSWAHL(i,ALPHA,BETA,[C1,C2,C3])]);#geht nich
        #RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
        RRR:=List(KRES,i->DGANZNEU(D[i]));
        RR:=[List(RRR,i->Int(i/2)),RRR mod 2];
        #if RR[1]>List(R[STUFE],i->Int(i/2)) then return [false,false]; fi;
        #if RR[1]>List(R[STUFE],i->Int(i/2)) or RR[1]=List(R[STUFE],i->Int(i/2)) and RR[2]>List(R[STUFE],i->i mod 2) then return [false,false]; fi;
        if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
        if RR=RNEU then Add(MENGS,i); MALPHA[i]:=[ALPHA,BETA]; fi;
        od;
      for i in MENGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        VNEU.ALPHA:=List(MALPHA[i][1]); VNEU.BETA:=List(MALPHA[i][2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i.HRES),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  return [TransposedMat(RMAX),VARIANTEN];
  end;

#for i in [1..154] do if GESAMTDILIST[5][i]<>ERGS2[5][i] then Print(i," "); fi; od;
#64 90 91 93 94 96 97 98 99 100 101 102 103 104
#i:=64;;ERGS2[5][i];GESAMTDILIST[5][i];
#RMAXSUCH([[3],[2,2]])[1];

SCHNACK:=function(dd)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0;
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  for rr in [1..Size(ERGS1[dd])] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=RMAXSUCH(R)[1];
        #a#Print(" ",ID,"\c");
        if ID<>false and not ID in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          #if 2*ID[Size(R)][1]+ID[Size(R)][2]<>R[Size(R)] then Error("\n",ID,"\n",R,"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then if ID=false then Print(":\c"); else Print(".\c"); fi; fi; fi;
        od;
      fi; od;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],Runtime()-ts,"\n");
  if not SAGE then Exec("date"); fi;
  end;

#-----------
KANTENZUEGE(dmax);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
SCHNACK(2);#16#6
SCHNACK(3);#32#19
SCHNACK(4);#64#60
#SCHNACK(5);#128#158
#SCHNACK(6);#256#442
#SCHNACK(7);#512#1122
#SCHNACK(8);#1024#2945
DisplayProfile();
#dd:=4;;Reversed(List(ERGS2[dd],i->2*i[1]+i[2]));



#-----neuer Anlauf mit Markierungen und D1 erhalten. Dazu brauche ich RMAXSUCH2.
RMAXSUCH2:=function(D) #sucht RMAX 
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMIN,RNEU,
  HRES,KRES,LD,ORBZU,ORBS,ONEU;
  SD:=Size(D); S:=LogInt(SD,2); STUFE:=0; RMIN:=[];
  #ORBZU:=COMPDIAG6E(S,D,0);
  #RMINSUCH#ORBZU:=COMPDIAG7E(D);
  ORBZU:=COMPDIAGSTABERZ(D);
  #RMINSUCH#VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0])];
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1])];
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    NEUE_VARIANTEN:=[];
    RNEU:=[0];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;
      ORBS:=[];
      for i in [2..SD] do if not IsBound(LD[i]) then
        #RMINSUCH#ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        KRES:=[i];
        for j in HRES do Add(KRES,XORMAT[i][j]); od;
        #RMINSUCH#RR:=List(KRES,i->DNEU(D[i]));
        RR:=List(KRES,i->D[i]);
        if RR>RNEU then NEUE_VARIANTEN:=[]; RNEU:=RR; fi;
        if RR=RNEU then
          LNEU:=List(LRES,j->XORMAT[i][j]);
          ONEU:=List(LNEU,j->ORBZU[j]);#Print("O");
          if not (ONEU in ORBS) then
            Add(ORBS,ONEU);
            VNEU:=StructuralCopy(V);
            Add(VNEU.HRES,i);
            VNEU.LRES:=Concatenation(LRES,LNEU);
            for i in LNEU do VNEU.LD[i]:=STUFE; od;
            #RMINSUCH#VNEU.ALPHA:=ALPHA; VNEU.BETA:=List(BETA);
            Add(NEUE_VARIANTEN,VNEU);
            fi;
          #Print("P");
          fi;
        fi; od;
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    Add(RMIN,RNEU);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    od;
  return [RMIN,VARIANTEN];
  end;

DINIT:=function(di)
  if di=1 then return [[[0,3,2,1],[0,3,2,1]],[[0,3,1,2],[0,2,3,1]]]; fi;
  if di=2 then return [[[0,1,3,2],[0,1,3,2]],[[0,2,3,1],[0,3,1,2]]]; fi;
  if di=3 then return [[[0,1,2,3],[0,1,2,3]],[[0,2,1,3],[0,2,1,3]]]; fi;
  end;

DPRUEFNEU:=function(di)
  return ALPHA[di+1];
  end;

GLOBAB:=[];

RMAXPRUEF:=function(R) #sucht RMAX mit Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA,
  RRR,R1,R2,R3,ABLISTE,ABL,RC1,CS,REMO,RS,RD2;
  D:=DIAG(R);
  SD:=Size(D); S:=Size(R); STUFE:=0; RMAX:=[];
  D1:=List(D,i->Int((i mod 4)/2)); R1:=RMAXSUCH2(D1)[1];
  C1:=COMPDIAGSTABERZ(D1);
  S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2); 
  R2:=RMAXSUCH2(D2)[1]; if GLOBAB=[] and R2>R1 then return [false,"y"]; fi;
  C2:=COMPDIAGSTABERZ(D2);
  S2:=Group(STABMACH2(C2));
  SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2; 
  R3:=RMAXSUCH2(D3)[1]; if GLOBAB=[] and R3>R1 then return [false,"z"]; fi;
  C3:=COMPDIAGSTABERZ(D3);
  #Print("\n",R1,"\n",R2,"\n",R3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  CS:=[C1,C2,C3];
  RS:=[R1,R2,R3];
  RC1:=StructuralCopy(R1);
  for i in [1..S] do
    RC1[i]:=[RC1[i],[C1[2^(i-1)+1]]];
#    for j in [1..i-1] do
#      Add(RC1[i][2],C1[2^(i-1)+1+2^(j-1)]);
    for j in [1..2^(i-1)-1] do
      Add(RC1[i][2],C1[2^(i-1)+1+j]);
      od;
    od;
  RD2:=[];
  for i in [1..S] do
    RD2[i]:=[D2[2^(i-1)+1]];
    for j in [1..i-1] do
      Add(RD2[i],D2[2^(i-1)+1+2^(j-1)]);
      od;
    od;
  #Print("\nR  =",R);
  #Print("\nRC1=",RC1);
  #Print("\n C1=",C1);
  #Print("\nRD2=",C1);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0,1],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=Filtered([2..SD],i->not IsBound(LD[i]));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      MENGS:=[]; MALPHA:=[];
      for i in BOINGS do
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        ABLISTE:=[[ALPHA,BETA]];
        if ALPHA=[0] and D[i]>0 then ABLISTE:=DINIT(D[i]); fi;
        if ALPHA=[0] and GLOBAB<>[] then ABLISTE:=GLOBAB; fi;
        for ABL in ABLISTE do if R1=RS[ABL[2][2]] then
          #Print("\nABL=",ABL);
          ALPHA:=List(ABL[1]); BETA:=List(ABL[2]);
          KRES:=[i];
          for j in HRES do Add(KRES,XORMAT[i][j]); od;
          #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
          #RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
          #RR:=List(KRES,i->[DGANZNEU(D[i]),CSWAHL(i,ALPHA,BETA,[C1,C2,C3])]);#geht n.
          #RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
     #     RRR:=List(KRES,i->DPRUEFNEU(D[i]));
     #     RR:=[List(RRR,i->Int(i/2)),List(RRR,i->i mod 2)];
     #     #if RR[1]>List(R[STUFE],i->Int(i/2)) then return [false,false]; fi;
     #     #if RR[1]>List(R[STUFE],i->Int(i/2)) or RR[1]=List(R[STUFE],i->Int(i/2)) and RR[2]>List(R[STUFE],i->i mod 2) then return [false,false]; fi;
     #     if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
     #     if RR=RNEU then Add(MENGS,i); Add(MALPHA,[ALPHA,BETA]); fi;
          RRR:=List(KRES,i->[DPRUEFNEU(D[i]),CS[BETA[2]][i]]);
          RR:=[List(RRR,i->Int(i[1]/2)),List(RRR,i->i[2]),List(RRR,i->i[1] mod 2)];
        LNEU:=List(V.LRES,j->XORMAT[i][j]);
        RR[2]:=List(LNEU,i->CS[BETA[2]][i]);
          #Print("\nRR=",RR,"\n   ",RC1[STUFE],ALPHA,RD2[STUFE],RNEU);
     if RR{[1,2]}=RC1[STUFE] then
          #Print("=",RR{[1,3]}>RNEU);
          if GLOBAB=[] and RR[3]>RD2[STUFE] then
#  Print("\nRR =",RR);
#  Print("\nR  =",R);
#  Print("\nRC1=",RC1);
#  Print("\n C1=",C1);
#  Print("\nRD2=",RD2);
#  Print("\nRMAX=",TransposedMat(RMAX));
            return [false,STUFE]; fi;
          if RR{[1,3]}>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; MALPHA:=[]; RNEU:=RR{[1,3]}; fi;
          if RR{[1,3]}=RNEU then Add(MENGS,i); Add(MALPHA,[ALPHA,BETA]); fi;
          #Print("\nMENGS,MALPHA=",MENGS,MALPHA);
       fi;
          fi; od;
        od;
      for i in MENGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        REMO:=Remove(MALPHA,1);
        VNEU.ALPHA:=List(REMO[1]); VNEU.BETA:=List(REMO[2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  #Print("\nR1=",R1);
  #Print("\nR2=",R2);
  #Print("\nR3=",R3);
  #Print("\nR   =",R);
  #Print("\nRMAX=",TransposedMat(RMAX));
  return [TransposedMat(RMAX),VARIANTEN];
  end;

#for i in [1..154] do if GESAMTDILIST[5][i]<>ERGS2[5][i] then Print(i," "); fi; od;
#64 90 91 93 94 96 97 98 99 100 101 102 103 104
#i:=64;;ERGS2[5][i];GESAMTDILIST[5][i];
#i:=64;;RMAXPRUEF(2*ERGS2[5][i][1]+ERGS2[5][i][2]);
#RMAXPRUEF([[3],[2,2]])[1];
#RMAXPRUEF([[3],[3,0]])[1];
#RMAXPRUEF([[3],[0,0]])[1];
#for i in [1..154] do if GESAMTDILIST[5][i]<>RMAXPRUEF(2*ERGS2[5][i][1]+ERGS2[5][i][2]); then Print(i," "); fi; od;
#RR:=ERGS2MERK[6][124]; R:=2*RR[1]+RR[2]; RMAXPRUEF(R);

SCHNACK:=function(dd)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0; GLOBAB:=[];
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  for rr in [1..Size(ERGS1[dd])] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=RMAXPRUEF(R);
        #a#Print(" ",ID,"\c");
        if ID[1]<>false and not ID[1] in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          #if 2*ID[Size(R)][1]+ID[Size(R)][2]<>R[Size(R)] then Error("\n",ID,"\n",R,"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID[1]);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then if ID[1]=false then Print(ID[2],"\c"); else Print(".\c"); fi; fi; fi;
        od;
      fi; od;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n[ 1, 6, 19, 60, 158, 442, 1122, 2945]",Runtime()-ts);
  Print("\n[ 1, 6, 19, 63, 174, 508, 1333, xxxx]\n");
  if not SAGE then Exec("date"); fi;
  end;

POSTBOOSTER:=function(dd)
  local i,R,RR,R1,R2,R3,RNEU,ERGS2ZUSATZ;
  ERGS2ZUSATZ:=[];
  for i in [1..Size(ERGS2[dd])] do
    Print(i," \c");
    RR:=ERGS2[dd][i];
    R:=2*RR[1]+RR[2];
    R1:=RR[1];
    R2:=RMAXSUCH2(DIAG(RR[2]))[1];
    R3:=RMAXSUCH2(DIAG((R1+RR[2]) mod 2))[1];
    #Print(" ",R1=R2," ",R1=R3);
    if R1=R2 then
      GLOBAB:=[[[0,3,1,2],[0,2,3,1]],[[0,2,1,3],[0,2,1,3]]];
      RNEU:=RMAXPRUEF(R)[1];
      if not (RNEU in ERGS2[dd]) then 
        Print("R2 neu "); 
        Add(ERGS2ZUSATZ,RNEU);
        fi;
      GLOBAB:=[];
      fi;
    if R1=R3 then
      GLOBAB:=[[[0,3,2,1],[0,3,2,1]],[[0,2,3,1],[0,3,1,2]]];
      RNEU:=RMAXPRUEF(R)[1];
      Add(ERGS2ZUSATZ,RNEU);
      if not (RNEU in ERGS2[dd]) then 
        Print("R3 neu "); 
        Add(ERGS2ZUSATZ,RNEU);
        fi;
      GLOBAB:=[];
      fi;
    od;
  ERGS2[dd]:=Reversed(SortedList(Union(ERGS2[dd],ERGS2ZUSATZ)));
  Print("\n");
  end;


#-----------
KANTENZUEGE(dmax);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
SCHNACK(2); POSTBOOSTER(2);#16#6
SCHNACK(3); POSTBOOSTER(3);#32#19
SCHNACK(4); POSTBOOSTER(4);#64#60
#SCHNACK(5); POSTBOOSTER(5);#128#158
#SCHNACK(6); POSTBOOSTER(6);#256#442
#SCHNACK(7); POSTBOOSTER(7);#512#1122
#SCHNACK(8); POSTBOOSTER(8);#1024#2945
#SCHNACK(9); POSTBOOSTER(9);#1024#????
DisplayProfile();
#dd:=4;;Reversed(List(ERGS2[dd],i->2*i[1]+i[2]));

#-------Vorfilter mit R2=RD2 bis dd-1
RMAXVORFILT:=function(R) #sucht RMAX ohne Umbenennen
  local SD,S,STUFE,LRES,LNEU,V,VNEU,VARIANTEN,NEUE_VARIANTEN,RR,RMAX,RNEU,
  HRES,KRES,LD,S1,S2,S3,SX,D,D1,D2,D3,C1,C2,C3,MENGS,GOINGS,BOINGS,i,j,MALPHA,
  RRR,R1,R2,R3,ABLISTE,ABL,RC1,CS,REMO,RS,RD2;
  D:=DIAG(R);
  SD:=Size(D); S:=Size(R); STUFE:=0; RMAX:=[];
  D1:=List(D,i->Int((i mod 4)/2)); R1:=RMAXSUCH2(D1)[1];
  C1:=COMPDIAGSTABERZ(D1);
  S1:=Group(STABMACH2(C1));
  D2:=List(D,i->i mod 2); 
  R2:=RMAXSUCH2(D2)[1]; if GLOBAB=[] and R2>R1 then return [false,"y"]; fi;
  C2:=COMPDIAGSTABERZ(D2);
  S2:=Group(STABMACH2(C2));
  SX:=Intersection(S1,S2);
  D3:=(D1+D2) mod 2; 
  R3:=RMAXSUCH2(D3)[1]; if GLOBAB=[] and R3>R1 then return [false,"z"]; fi;
  C3:=COMPDIAGSTABERZ(D3);
  #Print("\n",R1,"\n",R2,"\n",R3);
  #D4:=List(D,i->Int(i/4));
  #C4:=COMPDIAGSTABERZ(D4);
  #S4:=Group(STABMACH2(C4));
  #SX:=Intersection(S1,S2,S4);
  CS:=[C1,C2,C3];
  RS:=[R1,R2,R3];
  RC1:=StructuralCopy(R1);
  for i in [1..S] do
    RC1[i]:=[RC1[i],[C1[2^(i-1)+1]]];
#    for j in [1..i-1] do
#      Add(RC1[i][2],C1[2^(i-1)+1+2^(j-1)]);
    for j in [1..2^(i-1)-1] do
      Add(RC1[i][2],C1[2^(i-1)+1+j]);
      od;
    od;
  RD2:=[];
  for i in [1..S] do
    RD2[i]:=[D2[2^(i-1)+1]];
    for j in [1..i-1] do
      Add(RD2[i],D2[2^(i-1)+1+2^(j-1)]);
      od;
    od;
  #Print("\nR  =",R);
  #Print("\nRC1=",RC1);
  #Print("\n C1=",C1);
  #Print("\nRD2=",C1);
  VARIANTEN:=[rec(LD:=[],HRES:=[],LRES:=[1],ALPHA:=[0],BETA:=[0,1],SX:=SX)];
  #Print("\nSX=",List(SX));
  for STUFE in [1..S] do 
    #Print("\nSTUFE=",STUFE);
    #Print(", VARIANTEN=",Size(VARIANTEN));
    #for V in VARIANTEN do Print("\n",V.LRES); od;
    NEUE_VARIANTEN:=[];
    RNEU:=[];
    for V in VARIANTEN do
      HRES:=V.HRES;LRES:=V.LRES;LD:=V.LD;SX:=V.SX;
      MENGS:=Filtered([2..SD],i->not IsBound(LD[i]));
      GOINGS:=Orbits(SX,MENGS);
      #Print("\nGOINGS=",GOINGS);
      BOINGS:=List(GOINGS,i->i[1]);
      #Print("\nBOINGS=",BOINGS);
      MENGS:=[]; MALPHA:=[];
      for i in BOINGS do
        ALPHA:=List(V.ALPHA);BETA:=List(V.BETA);
        ABLISTE:=[[ALPHA,BETA]];
        if ALPHA=[0] and D[i]>0 then ABLISTE:=DINIT(D[i]); fi;
        if ALPHA=[0] and GLOBAB<>[] then ABLISTE:=GLOBAB; fi;
        for ABL in ABLISTE do if R1=RS[ABL[2][2]] then
          #Print("\nABL=",ABL);
          ALPHA:=List(ABL[1]); BETA:=List(ABL[2]);
          KRES:=[i];
          for j in HRES do Add(KRES,XORMAT[i][j]); od;
          #RR:=List(KRES,i->DGANZNEU(D[i]));#Error("\n",RR,KRES);
          #RR:=List(KRES,i->[DGANZNEU(D[i]),C1[i]+C2[i]+C3[i]]);
          #RR:=List(KRES,i->[DGANZNEU(D[i]),CSWAHL(i,ALPHA,BETA,[C1,C2,C3])]);#geht n.
          #RR:=List(KRES,i->[DGANZNEU(D[i]),Reversed(SortedList([C1[i],C2[i],C3[i]]))]);
     #     RRR:=List(KRES,i->DPRUEFNEU(D[i]));
     #     RR:=[List(RRR,i->Int(i/2)),List(RRR,i->i mod 2)];
     #     #if RR[1]>List(R[STUFE],i->Int(i/2)) then return [false,false]; fi;
     #     #if RR[1]>List(R[STUFE],i->Int(i/2)) or RR[1]=List(R[STUFE],i->Int(i/2)) and RR[2]>List(R[STUFE],i->i mod 2) then return [false,false]; fi;
     #     if RR>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; RNEU:=RR; fi;
     #     if RR=RNEU then Add(MENGS,i); Add(MALPHA,[ALPHA,BETA]); fi;
          RRR:=List(KRES,i->[DPRUEFNEU(D[i]),CS[BETA[2]][i]]);
          RR:=[List(RRR,i->Int(i[1]/2)),List(RRR,i->i[2]),List(RRR,i->i[1] mod 2)];
        LNEU:=List(V.LRES,j->XORMAT[i][j]);
        RR[2]:=List(LNEU,i->CS[BETA[2]][i]);
          #Print("\nRR=",RR,"\n   ",RC1[STUFE],ALPHA,RD2[STUFE],RNEU);
     if RR{[1,2]}=RC1[STUFE] then
          #Print("=",RR{[1,3]}>RNEU);
          if GLOBAB=[] and RR[3]>RD2[STUFE] and STUFE=S then
#  Print("\nRR =",RR);
#  Print("\nR  =",R);
#  Print("\nRC1=",RC1);
#  Print("\n C1=",C1);
#  Print("\nRD2=",RD2);
#  Print("\nRMAX=",TransposedMat(RMAX));
            return [false,STUFE]; fi;
          #if RR{[1,3]}>RNEU then NEUE_VARIANTEN:=[]; MENGS:=[]; MALPHA:=[]; RNEU:=RR{[1,3]}; fi;
          #if RR{[1,3]}=RNEU then Add(MENGS,i); Add(MALPHA,[ALPHA,BETA]); fi;
          if RR[3]=RD2[STUFE] then Add(MENGS,i); Add(MALPHA,[ALPHA,BETA]); 
            RNEU:=RR{[1,3]}; 
            #Print("\nRNEU=",RNEU);
            fi;
          #Print("\nMENGS,MALPHA=",MENGS,MALPHA);
       fi;
          fi; od;
        od;
      for i in MENGS do
        VNEU:=StructuralCopy(V);
        Add(VNEU.HRES,i);
        LNEU:=List(LRES,j->XORMAT[i][j]);
        VNEU.LRES:=Concatenation(LRES,LNEU);
        for j in LNEU do VNEU.LD[j]:=STUFE; od;
        REMO:=Remove(MALPHA,1);
        VNEU.ALPHA:=List(REMO[1]); VNEU.BETA:=List(REMO[2]);
        Add(NEUE_VARIANTEN,VNEU);        
        od;
      od;
    Add(RMAX,RNEU);
    for V in NEUE_VARIANTEN do
      V.SX:=Stabilizer(V.SX,V.HRES[STUFE]);
      od;
    VARIANTEN:=NEUE_VARIANTEN;
    #Print("\n  VARIANTEN=",List(VARIANTEN,i->i),Size(VARIANTEN));
    #Print("\n  STUFE=",STUFE," VARIANTEN=",Size(VARIANTEN));
    od;
  #Print("\nC1=",C1);
  #Print("\nC2=",C2);
  #Print("\nC3=",C3);
  #Print("\nR1=",R1);
  #Print("\nR2=",R2);
  #Print("\nR3=",R3);
  #Print("\nR   =",R);
  #Print("\nRMAX=",TransposedMat(RMAX));
  return [TransposedMat(RMAX),VARIANTEN];
  end;

#RMAXVORFILT([[3],[3,3]])[1];

VORSCHNACK:=function(dd)
  local jj,R,R1,R1R2,TEILDILIST,ORBI,ORB,ID,ts,ZM,rr;
  if not SAGE then Exec("date"); fi;
  ts:=Runtime(); ZM:=0; GLOBAB:=[];
  ERGS2[dd]:=[];GESAMTDILIST[dd]:=[];
  for rr in [1..Size(ERGS1[dd])] do
    R1:=Reversed(ERGS1[dd])[rr];
    if not SAGE then Print("\n***R1=",R1); fi;
    TEILDILIST:=[];
    for jj in [1..Size(ERGS2[dd-1])] do R1R2:=ERGS2[dd-1][jj]; if R1{[1..dd-1]}=R1R2[1] then
      if not SAGE then Print("\n...R1,R1R2=\n",R1,"\n",R1R2,"\n"); fi;
      ORBI:=SCHNICK(R1,R1R2[2]); ZM:=ZM+Size(ORBI);
      #1#Print("\nORBI=",ORBI,Size(ORBI),"\n",R1R2,"...\n");
      if not SAGE then Print("\nSize(ORBI)=",Size(ORBI)); fi;
      if not SAGE then Print("\n",jj," von ",Size(ERGS2[dd-1])," in ",rr," von ",Size(ERGS1[dd]),": Size(GESAMTDILIST[dd])=",Size(GESAMTDILIST[dd]),"\n"); fi;
      for ORB in ORBI do
        R:=2*R1+ORB;
        #a#Remove(D,1);
        #a#RV:=RVOND(dd,D);
        #a#ID:=IdSmallGroup(PcgsOfR(RV));
        ID:=RMAXVORFILT(R);
        #a#Print(" ",ID,"\c");
        if ID[1]<>false and not ID[1] in GESAMTDILIST[dd] then
        #if DIAG(ID)=D then
          #if DIAG(ID)<>D then Print("\n",ID,"\n",RVOND4(D),"\n"); fi;
          #if 2*ID[Size(R)][1]+ID[Size(R)][2]<>R[Size(R)] then Error("\n",ID,"\n",R,"\n"); fi;
          Add(ERGS2[dd],[R1,ORB]); 
          Add(GESAMTDILIST[dd],ID[1]);
          if not SAGE then Print("*\c"); fi;
          else if not SAGE then if ID[1]=false then Print(ID[2],"\c"); else Print(".\c"); fi; fi; fi;
        od;
      fi; od;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)),ZM);
  Print("\n[ 1, 6, 19, 60, 158, 442, 1122, 2945]",Runtime()-ts);
  Print("\n[ 1, 6, 19, 63, 174, 508, 1xxx, xxxx]");
  Print("\n[ 1, 6, 24, 170,174, 508, 1xxx, xxxx]\n");
  if not SAGE then Exec("date"); fi;
  end;

#-----------
KANTENZUEGE(dmax);
#ERGS1[4];
ERGS2:=[[[[[1]],[[1]]]]];
GESAMTDILIST:=[[[[3]]]];
ClearProfile();ZM:=0;
VORSCHNACK(2);#16#6
VORSCHNACK(3);#32#19
VORSCHNACK(4);#64#60
#SCHNACK(5);#128#158
#SCHNACK(6);#256#442
#SCHNACK(7);#512#1122
#SCHNACK(8);#1024#2945
#SCHNACK(9);#2048#????
DisplayProfile();
#dd:=4;;Reversed(List(ERGS2[dd],i->2*i[1]+i[2]));

#-----auf zu YSAMMEL-----
dd:=2;for iii in [1..Size(ERGS1[dd])] do Print("\n",iii,COMPDIAGSTABERZ(DIAG(ERGS1[dd][iii]))); od;

R:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1,1]];
COMPDIAGSTABERZ(DIAG(R{[1..3]}));
#also 2->3 geht und 4->5 und 6->7
R2:=[[1],[1,1]];COMPDIAGSTABERZ(DIAG(R2));
R4:=[[1],[0,0],[1,1,1],[1,1,1,1]];COMPDIAGSTABERZ(DIAG(R4));
R6:=[[1],[0,0],[1,1,1],[0,0,0,0],[1,1,1,1,1],[1,1,1,1,1,1]];COMPDIAGSTABERZ(DIAG(R6));

