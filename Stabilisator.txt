FORTSETZ:=function(HRES,y,D) #setzt HRES,y zu einem gültigen pcgs fort und macht ein PHI daraus
  local PHI,i,j,k,HRESNEU,nochnichtgefunden;
  PHI:=[];HRESNEU:=[];
  i:=1;
  repeat
    if i<=Size(HRES) then HRESNEU[i]:=HRES[i]; fi;
    if i=Size(HRES)+1 then HRESNEU[i]:=y; fi;
    if i>Size(HRES)+1 then
      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;
      fi;
    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;
    i:=i+1;
    until 2^(i-1)=Size(D)+1;
  return PermList(PHI);
  end;

FORTSETZ([1,2],4,[1,0,0,1,1,3,0]);#(2,3)(4,5)
FORTSETZ([1],3,[1,0,0,1,1,3,0]);#(2,3)(4,5)
FORTSETZ([], 4,[1,0,0,1,1,3,0]);#(1,4,5)(2,3,7)

LRESAUSHRES:=function(HRES)
  local LRES,i,j;
  LRES:=[];
  for i in [1..Size(HRES)] do
    LRES[2^(i-1)]:=HRES[i];
    for j in [1..Size(LRES)-1] do
      LRES[2^(i-1)+j]:=XORMAT[LRES[j]+1][HRES[i]+1]-1;
      od;
    od;
  return LRES;
  end;
LRESAUSHRES([1,2,27]);
  
STABERZ:=function(MENGE,HRES,STAB,D)
  local MENGENEU,STABNEU,x,y,i,DRIN,PHI,DK,PHI0;
  #1
  x:=MENGE[1];STABNEU:=STAB;
  LRES:=LRESAUSHRES(HRES);
  #2
  MENGENEU:=[];
  for y in MENGE do
    DRIN:=true;
    ##Print("\ny=",y," ",D[y]," ",D[x]);
    if D[y]<>D[x] then DRIN:=false; fi;
    for i in [1..Size(LRES)] do
     ##Print(" i=",i," ",D[XORMAT[HRES[i]+1][y+1]-1]," ",D[XORMAT[HRES[i]+1][x+1]-1]);
      if D[XORMAT[LRES[i]+1][y+1]-1]<>D[XORMAT[LRES[i]+1][x+1]-1] then DRIN:=false; fi;
      od;
    if DRIN then Add(MENGENEU,y); fi;
    od;
  ##Print("\nMENGENEU=",MENGENEU,"\n\c");
  #3
  repeat
    y:=MENGENEU[1];
    #4
    DK:=List(D);Remove(DK,1);
    ##Print("\n",MENGENEU,HRES,y,D,"\n\c");
    PHI:=FORTSETZ(HRES,y,D);
    #5
    if not PHI in STABNEU then Add(STABNEU,PHI); fi;
    ##Print("\n",PHI,STABNEU,"\n\c");
    #6
    MENGENEU:=Difference(MENGENEU,Orbit(Group(STABNEU),x));
  #7
    until MENGENEU=[];
  #8
  return STABNEU;
  end;
 
STAB:=[];
# 0  1  2  3  4  5  6  7
# e  a  b ab  c ac bc abc
D:=[ 1, 0, 0, 1, 1, 3, 0];#D
STAB:=STABERZ([4..7],[1,2],STAB,D);
STAB:=STABERZ([2..7],[1],STAB,D);
STAB:=STABERZ([1..7],[],STAB,D);
Size(STAB);
Size(Group(STAB));#6 laut 4788 und 4752R

STAB:=[];
#  0  1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
#  e  a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 0, 0, 1, 1, 1, 0, 0, 0, 0,  1, 0,  1,  0,   0];#F
STAB:=STABERZ([8..15],[1,2,4],STAB,D);
STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..15],[1],STAB,D);
STAB:=STABERZ([1..15],[],STAB,D);
Size(STAB);
Size(Group(STAB));#72

STAB:=[];
#  0 1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
#  e a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 0, 0, 1, 1, 1, 0, 1, 1, 1,  0, 1,  0,  1,   1];#G
STAB:=STABERZ([8..15],[1,2,4],STAB,D);
STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..15],[1],STAB,D);
STAB:=STABERZ([1..15],[],STAB,D);
Size(STAB);
Size(Group(STAB));#120

STAB:=[];
#  0 1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
#  e a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 1, 1];#C
#STAB:=STABERZ([8..15],[1,2,4],STAB,D);
#STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..3],[1],STAB,D);
STAB:=STABERZ([1..3],[],STAB,D);
Size(STAB);
Size(Group(STAB));#6

STAB:=[];
#  0 1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
#  e a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 0, 0];#B
#STAB:=STABERZ([8..15],[1,2,4],STAB,D);
#STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..3],[1],STAB,D);
STAB:=STABERZ([1..3],[],STAB,D);
Size(STAB);
Size(Group(STAB));#2

STAB:=[];
# 0  1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
# e  a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 0, 0, 1, 1, 3, 0, 2, 1, 0, 0, 1, 1, 3, 0];#D'
STAB:=STABERZ([8..15],[1,2,4],STAB,D);
STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..15],[1],STAB,D);
STAB:=STABERZ([1..15],[],STAB,D);
Size(STAB);
Size(Group(STAB));#48

STAB:=[];
# 0  1  2  3  4  5  6  7  8  9 10  11 12  13  14   15
# e  a  b ab  c ac bc abc d ad bd abd cd acd bcd abcd
D:=[ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1];#C''
STAB:=STABERZ([8..15],[1,2,4],STAB,D);
STAB:=STABERZ([4..15],[1,2],STAB,D);
STAB:=STABERZ([2..15],[1],STAB,D);
STAB:=STABERZ([1..15],[],STAB,D);
Size(STAB);
Size(Group(STAB));#576

#-----------
#Test STABERZ mit P25: Ergebnis Size(STAB)=16 22 29 37 46
COMPDIAGSTABERZ:=function(D)#aus COMPDIAG4 mit geändertem RETURN
  local RET,i,j,k,l,jkl,jkli,dj,dk,dl,RET2,reti,SD,DD;
  SD:=Size(D);DD:=[];
  for i in [1..SD] do DD[i]:=D[i]+2; od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    if dj=1 and dk=dl then DD[j]:=1; fi;
    if dj=0 and dk<>dl then DD[j]:=0; fi;
    if dk=1 and dj=dl then DD[k]:=1; fi;
    if dk=0 and dj<>dl then DD[k]:=0; fi;
    if dl=1 and dk=dj then DD[l]:=1; fi;
    if dl=0 and dk<>dj then DD[l]:=0; fi;
    od;
#Print("\n",DD);
  return DD;
  end;

STABMACH:=function(dd,D)
  local STAB,ddd;
  STAB:=[];
  for ddd in [dd,dd-1..1] do 
    STAB:=STABERZ([2^(ddd-1)..2^dd-1],List([1..ddd-1],i->2^(i-1)),STAB,D);
    od;
  return STAB;
  end;

STABTAB:=[];
GRUPTAB:=[];
for dd in [1..10] do
  STABTAB[dd]:=[];
  GRUPTAB[dd]:=[];
  Print("\n\ndd=",dd);
  for kd in [1..a[dd]] do
    x:=DIAG(KANTENZUG(dd,kd));
    x:=COMPDIAGSTABERZ(x);
    Remove(x,1);
    D:=x;
    STABTAB[dd][kd]:=STABMACH(dd,D);
    GRUPTAB[dd][kd]:=Group(STABTAB[dd][kd]);
    Print("\n",kd," ",Size(STABTAB[dd][kd])," ",Size(Group(STABTAB[dd][kd])));#576
    od;
  od;

dd=1
1 1 1

dd=2
1 2 2
2 2 2
3 3 6

dd=3
1 4 8
2 4 24
3 3 6
4 4 24

dd=4
1 7 192
2 7 1344
3 6 72
4 5 48
5 6 576
6 5 120

dd=5
1 11 21504
2 11 322560
3 9 1152
4 8 2304
5 9 64512
6 6 1920
7 6 720

dd=6
1 16 10321920
2 16 319979520
3 13 110592
4 12 516096
5 13 30965760
6 8 184320
7 8 51840
8 7 23040
9 8 40320

dd=7
1 22 20478689280
2 22 1290157424640
3 18 49545216
4 17 495452160
5 18 61436067840
6 11 82575360
7 10 3317760
8 9 4423680
9 9 1451520
10 9 2580480

dd=8
1 29 165140150353920
2 29 20972799094947840
3 24 95126814720
4 23 1965954170880
5 24 495420451061760
6 15 158544691200
7 13 1274019840
8 12 3963617280
9 11 394813440
10 11 185794560
11 11 990904320
12 10 348364800



D1:=[1,0,0,1,0,1,1,0,1,1,1,0,1,1,1];
D2:=[0,0,1,0,1,1,1,0,1,1,1,1,1,1,0];
S1:=STABMACH(4,D1);
S2:=STABMACH(4,D2);
G1:=Group(S1);
G2:=Group(S2);
I1:=Intersection(G1,G2);

D1:=[1,0,0,1,0,1,1,0,1,1,1,0,1,1,1];
D2:=[0,0,1,0,1,1,1];
S1:=STABMACH(4,D1);
S2:=STABMACH(3,D2);
G1:=Group(S1);
G2:=Group(S2);
I1:=Intersection(G1,G2);

D1:=[1,0,0,1,0,1,1,0,1,1,1,0,1,1,1];
D2:=[0,0,1,0,1,1,1,0,1,1,1,1,1,1,0];
S1:=STABMACH(4,D1);
G1:=Group(S1);
ORB:=Orbit(G1,D2,Permuted);;
Size(ORB);
Filtered(ORB,i->i{[1..7]}=[0,0,1,0,1,1,1]);

ORB:=Orbit(G1,D2,Permuted);;Size(ORB);#60
ORB1:=Orbit(A[4],D1,Permuted);#168
ORB12:=Orbit(A[4],[1,0,2,1,2,3,3,0,3,3,3,2,3,3,1],Permuted);;Size(ORB12);#10080=168*60
#also ist das ORB schon mal vollständig.
DIAG(R5([ [ [ 0, 2 ], [ 1, 2, 3 ] ], [ 0, 3, 3, 2 ] ]));
STAB12:=Stabiliser(A[4],[1,0,2,1,2,3,3,0,3,3,3,2,3,3,1],Permuted);
#=Group([ (1,4)(2,8)(3,12)(6,9)(7,13)(11,14) ])

i1:=1;i2:=2;dd:=4;
I1:=Intersection(GRUPTAB[dd][i1],GRUPTAB[dd][i2]);Size(I1);
SGSI1:=SmallGeneratingSet(I1);;Size(SGSI1);
I1:=Group(SGSI1);
RT:=RightTransversal(A[dd],I1);Size(RT);#210
DX1:=DIAG(KANTENZUG(dd,i1));
DX2:=DIAG(KANTENZUG(dd,i2));
DX:=[]; for i in [2..Size(DX1)] do DX[i-1]:=DX1[i]+2*DX2[i]; od; DX;
ORB:=Orbit(A[dd],DX,Permuted);;Size(ORB);#210
Size(RT)=Size(ORB);
R:=[
  [0],
  [0,0],
  [DX[1],DX[1],DX[1]],
  [DX[2],DX[2],DX[2],DX[3]],
  [DX[4],DX[4],DX[4],DX[5],DX[6]],
  [DX[8],DX[8],DX[8],DX[9],DX[10],DX[12]]
  ];

G:=PcgsOfR(R);AU:=AutomorphismGroup(G);Size(AU)/Size(I1);

############################
dd:=4;
D1:=[1,0,0,1,0,1,1,0,1,1,1,0,1,1,1];
D2:=[0,0,1,0,1,1,1,0,1,1,1,1,1,1,0];
XY:=[1,0,2,1,2,3,3,0,3,3,3,2,3,3,1];
ORB:=Orbit(A[dd],XY,Permuted);;Size(ORB);#10080
ORB:=Collected(List(A[dd],a->Permuted(XY,a)));;Size(ORB);#auch 10080
ORB:=Collected(Filtered(List(A[dd],a->Permuted(XY,a)),xy->xy{[1..7]}=XY{[1..7]}));;Size(ORB);#
S1:=STABMACH(4,D1);
S2:=STABMACH(4,D2);
G1:=Group(S1);
G2:=Group(S2);
I1:=Intersection(G1,G2);

R:=[[ 1 ],[ 0, 2 ],[ 0, 1, 0 ],[ 0, 0, 0, 1 ]];#227 später
R:=[[ 1 ],[ 0, 2 ],[ 0, 1, 0 ],[ 0, 0, 0, 2 ]];#1<->2
XY:=DIAG(R);
XY:=[ 0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 3, 1, 1, 1, 2 ];
Remove(XY,1);XY;
ORB:=Orbit(A[dd],XY,Permuted);;Size(ORB);#10080
ORB:=Collected(List(A[dd],a->Permuted(XY,a)));;Size(ORB);#auch 10080
ORB:=Collected(Filtered(List(A[dd],a->Permuted(XY,a)),xy->xy{[1..7]}=XY{[1..7]}));;Size(ORB);
?Gibt es also nicht mehr als 6 ===> ? Das wäre sensationell!!!
Doch, bei R:=[[ 1 ],[ 0, 2 ],[ 0, 1, 0 ],[ 0, 0, 0, 1 ]];#227 später
D1:=                       #  #  #     #
 [ 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 ];
                                    u  u  u  u
[ [ [ 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 3, 1, 1, 1, 2 ], 2 ], #
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 2, 1, 1, 0, 3 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 0, 2, 1, 1, 1, 3, 0 ], 2 ], #
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 0, 3, 0, 1, 1, 2, 1 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 2, 1, 0, 1, 3 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 1, 1, 3, 1, 0, 0, 2 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 1, 2, 0, 1, 0, 3, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 1, 3, 1, 1, 0, 2, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 2, 0, 1, 1, 3, 1, 0 ], 2 ], #
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 1, 3, 0, 1 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 3, 0, 0, 1, 2, 1, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 0, 3, 1, 1, 1, 2, 0, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 0, 0, 2, 0, 1, 1, 3 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 0, 1, 3, 0, 1, 0, 2 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 0, 2, 0, 0, 1, 3, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 0, 3, 1, 0, 1, 2, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 1, 0, 3, 0, 0, 1, 2 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 1, 1, 2, 0, 0, 0, 3 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 1, 2, 1, 0, 0, 3, 0 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 1, 3, 0, 0, 0, 2, 1 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 2, 0, 0, 0, 3, 1, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 2, 1, 1, 0, 3, 0, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 3, 0, 1, 0, 2, 1, 0 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 1, 3, 1, 0, 0, 2, 0, 1 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 2, 0, 0, 1, 3, 1, 1, 0 ], 2 ], #
  [ [ 1, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 3, 1, 0, 1 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 2, 1, 0, 0, 3, 0, 1, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 2, 1, 1, 1, 3, 0, 0, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 3, 0, 0, 0, 2, 1, 1, 1 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 3, 0, 1, 1, 2, 1, 0, 0 ], 2 ], 
  [ [ 1, 0, 2, 0, 1, 0, 2, 3, 1, 0, 1, 2, 0, 1, 0 ], 2 ], +
  [ [ 1, 0, 2, 0, 1, 0, 2, 3, 1, 1, 0, 2, 0, 0, 1 ], 2 ] ]+
XY:=DIAG(R);
XY:=[ 0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 3, 1, 1, 1, 2 ];
D1:=[ 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 ];
D2:=[ 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
D3:=[ 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1 ];
D1:=COMPDIAGSTABERZ(D1);
D2:=COMPDIAGSTABERZ(D2);
Remove(D1,1);D1;
Remove(D2,1);D2;
Remove(XY,1);XY;
S1:=STABMACH(4,D1);
S2:=STABMACH(4,D2);
G1:=Group(S1);
G2:=Group(S2);
I1:=Intersection(G1,G2);
ORB:=Collected(Filtered(List(S1,a->Permuted(D2,a)),xy->xy{[1..7]}=D2{[1..7]}));;Size(ORB);
S1A:=Filtered(S1,a->Permuted(D2,a){[1..7]}=D2{[1..7]});;Size(S1A);
S1B:=Filtered(S1,a->Permuted(D3,a){[1..7]}=D3{[1..7]});;Size(S1A);
S2A:=Filtered(S2,a->Permuted(D1,a){[1..7]}=D1{[1..7]});;Size(S1A);
S12:=Group(Concatenation(S1A,S2A));Size(S12);
ORB:=SortedList(Orbit(S12,XY,Permuted));Size(ORB);#schafft # und +, die ersten 16
REST:=Group((8,9)(10,11)(12,13)(14,15),
            (8,10)(9,11)(12,14)(13,15),
            (8,12)(9,13)(10,14)(11,15));
S12:=Group(Concatenation(S1A,S2A,List(REST)));Size(S12);
ORB:=SortedList(Orbit(S12,XY,Permuted));Size(ORB);#schafft # und +, die ersten 16
#mit REST alle 32 geschafft!!! Feierabend! Jetzt noch zu den 64 schaffen
#die 64 entstehen aus 32 dur Umbenennen 1 gegen 2, 
#1 gegen 3 umbenennen geht nicht, weil nur eine 3 da, fürs erste D/2 werden 2 gebraucht
#So, und den benötigten Teilstabilisator kann ich ja aus XSAMMEL für Folge 3_4_6 holen!
  2 [ 1, 1 ] 2 <=== [ 4, 1 ] (2) 

#### [32,48 ] mit P22 ausgerechnet ####
1 [ 0 ] 1 <=== [ 2, 1 ] (1) 
  2 [ 1, 1 ] 2 <=== [ 4, 1 ] (2) 
    3 [ 0, 0, 1 ] 2 <=== [ 8, 2 ] (2) 
      4 [ 0, 0, 1, 0 ] 3 <=== [ 16, 10 ] (3) 
        5 [ 0, 0, 0, 0, 1 ] 2 ===> [ 32, 48 ] (2) 
        5 [ 1, 1, 1, 1, 0 ] 15 2 [ 32, 48 ] (15) 
        5 [ 0, 0, 0, 1, 0 ] 3 ===> [ 32, 48 ] (3) 
        5 [ 0, 0, 0, 1, 1 ] 4 3 [ 32, 48 ] (4) 
        5 [ 1, 1, 1, 0, 0 ] 13 3 [ 32, 48 ] (13) 
        5 [ 1, 1, 1, 0, 1 ] 14 3 [ 32, 48 ] (14) 
        5 [ 0, 0, 1, 0, 0 ] 5 <=== [ 32, 45 ] (5) 
        5 [ 1, 1, 0, 1, 1 ] 12 5 [ 32, 45 ] (12) 
        5 [ 0, 0, 1, 0, 1 ] 6 ===> [ 32, 48 ] (6) 
        5 [ 1, 1, 0, 1, 0 ] 11 6 [ 32, 48 ] (11) 
        5 [ 0, 0, 1, 1, 0 ] 7 ===> [ 32, 48 ] (7) 
        5 [ 0, 0, 1, 1, 1 ] 8 7 [ 32, 48 ] (8) 
        5 [ 1, 1, 0, 0, 0 ] 9 7 [ 32, 48 ] (9) 
        5 [ 1, 1, 0, 0, 1 ] 10 7 [ 32, 48 ] (10) 

RV:=[
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 0, 0, 1 ]],#2#[ 0, 0, 0, 0, 1, 1, 1, 1 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 1, 1, 0 ]],  #[ 1, 1, 1, 1, 0, 0, 0, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 0, 1, 0 ]],#3#[ 0, 0, 1, 1, 0, 0, 1, 1 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 0, 1, 1 ]],  #[ 0, 0, 1, 1, 1, 1, 0, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 1, 0, 0 ]],  #[ 1, 1, 0, 0, 0, 0, 1, 1 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 1, 0, 1 ]],  #[ 1, 1, 0, 0, 1, 1, 0, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 0, 1 ]],#6#[ 0, 1, 0, 1, 1, 0, 1, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 1, 0 ]],  #[ 1, 0, 1, 0, 0, 1, 0, 1 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 1, 0 ]],#7#[ 0, 1, 1, 0, 0, 1, 1, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 1, 1 ]],  #[ 0, 1, 1, 0, 1, 0, 0, 1 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0, 0 ]],  #[ 1, 0, 0, 1, 0, 1, 1, 0 ]
[[ 1 ], [ 0, 1 ], [ 0, 1, 0 ], [ 1, 0, 0, 1 ]]   #[ 1, 0, 0, 1, 1, 0, 0, 1 ]
  ];

for i in [1..14] do Print("\n",DIAG(RV[i]){[9..16]}); od;
DX:=COMPDIAGSTABERZ(DIAG(RV[3])){[2..16]};
#[ 1, 0, 3, 2, 1, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1 ]
S:=STABMACH(4,DX);
#[ (), (8,9)(10,11)(12,13)(14,15), (8,12)(9,13)(10,14)(11,15), 
  (2,6)(3,7)(10,14)(11,15), (1,5)(3,7)(9,13)(11,15), 
  (1,10,11)(2,9,8)(5,14,15)(6,13,12) ]
ORB:=Orbit(Group(S),DX,Permuted);
SX:=Group(Concatenation(S,List(REST)));
ORB:=Orbit(SX,DX,Permuted);
#[ [ 1, 0, 3, 2, 1, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1 ], 
  [ 1, 0, 3, 2, 1, 0, 3, 1, 1, 0, 0, 1, 1, 0, 0 ], 
  [ 0, 1, 3, 2, 0, 1, 3, 1, 0, 1, 0, 1, 0, 1, 0 ], 
  [ 0, 1, 3, 2, 0, 1, 3, 0, 1, 0, 1, 0, 1, 0, 1 ] ]
#da fehlen 2, also hole ich erstmal die PHI aus XSAMMEL heraus.

ISOD1D2:=function (D0,D)
  local i,HRESNEU,PHI,nochnichtgefunden;
  i:=1;HRESNEU:=[];PHI:=[];
  repeat

      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D0[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D0[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;

    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;

    #Print("\ni=",i,HRESNEU);
    i:=i+1;
    until 2^i>Size(D1)+1;
  return PermList(PHI);
  end;

D1:=COMPDIAGSTABERZ(DIAG(RV[1]));;Remove(D1,1);D1;
D2:=COMPDIAGSTABERZ(DIAG(RV[2]));;Remove(D2,1);D2;
ISOD1D2(D1,D2);

PHIMENGE:=[];
D1:=COMPDIAGSTABERZ(DIAG(RV[1]));;Remove(D1,1);D1;
for i in [1..12] do
  D2:=COMPDIAGSTABERZ(DIAG(RV[i]));Remove(D2,1);Print(D2);
  Add(PHIMENGE,ISOD1D2(D1,D2));
  od;

D1:=COMPDIAGSTABERZ(DIAG(RV[1]));;Remove(D1,1);D1;
#D1:=DIAG(RV[1]);;Remove(D1,1);D1;
List(PHIMENGE,i->Permuted(D1,i));
[ [ 1, 2, 1, 0, 3, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1 ], #()
  [ 1, 2, 1, 0, 3, 0, 3, 1, 1, 1, 1, 0, 0, 0, 0 ], #(8,12)(9,13)(10,14)(11,15), 
  [ 1, 0, 3, 2, 1, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1 ], #(2,4)(3,5)(10,12)(11,13)
  [ 1, 0, 3, 0, 3, 2, 1, 0, 0, 1, 1, 1, 1, 0, 0 ], #(2,6,4)(3,7,5)(10,14,12)(11,15,13)
  [ 1, 0, 3, 0, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1 ], #(2,6,4)(3,7,5)(8,10,12)(9,11,13)
  [ 1, 0, 3, 2, 1, 0, 3, 1, 1, 0, 0, 1, 1, 0, 0 ], #(2,4)(3,5)(8,10,14,12)(9,11,15,13)
  [ 3, 2, 3, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0 ], #(1,5)(3,7)(9,13)(11,15)
  [ 3, 2, 3, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1 ], #(1,5)(3,7)(8,9,12,13)(10,11,14,15)
  [ 3, 0, 1, 2, 3, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0 ], #(1,3,7,5)(2,4)(9,11,15,13)(10,12)
  [ 3, 0, 1, 0, 1, 2, 3, 0, 1, 1, 0, 1, 0, 0, 1 ], #(1,3,5)(2,6,4)(9,11,13)(10,14,12)
  [ 3, 0, 1, 0, 1, 2, 3, 1, 0, 0, 1, 0, 1, 1, 0 ], #(1,3,5)(2,6,4)(8,9,10,15,14,13)(11,12)
  [ 3, 0, 1, 2, 3, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1 ] ] #(1,3,7,5)(2,4)(8,9,10,13)(11,14,15,12)
  
D1:=COMPDIAGSTABERZ(DIAG(RV[1]){[1..8]});;Remove(D1,1);D1;
S:=STABMACH(3,D1);
G:=Group(S);Size(G);
Orbit(G,[ 1, 2, 1, 0, 3, 0, 3]);
[ [ 1, 2, 1, 0, 3, 0, 3 ], 
  [ 1, 0, 3, 2, 1, 0, 3 ], 
  [ 1, 0, 3, 0, 3, 2, 1 ], 
  [ 3, 0, 1, 2, 3, 0, 1 ], 
  [ 3, 0, 1, 0, 1, 2, 3 ], 
  [ 3, 2, 3, 0, 1, 0, 1 ] ]
#aha, ich muss Stab(D/2) erweitert anwenden.

############jetzt alles zu RV[1] durchlaufenlassen
R:=RV[1]{[1..3]};
ENUM:=EnumeratorOfTuples([0,1],4);
SCHONFERTIG:=[];
for i in [1..16] do if not IsBound(SCHONFERTIG) then
  Print("\ni=",i," R[4]=",R[4]);
  R[4]:=ENUM[i];
  D1:=DIAG(R);Remove(D1,1);
  for PHI in PHIMENGE do
    SCHONFERTIG[PositionSorted(ENUM,Permuted(D2,PHI){[8,9,10,12]})]:=1;
    od;
  fi; od;

##########jetzt mit ListPerm
dd:=4;
R:=[[1],[2,3],[0,0,0],[0,0,1,0]];#===>[ 64, 216 ]#[ (), (4,5)(6,7), (4,6)(5,7) ]#16
R:=[[1],[2,3],[0,1,2],[0,2,0,0]];#===>[ 64, 216 ]#[ (), (4,5)(6,7), (4,6)(5,7) ]#32
D:=DIAG(R);Remove(D,1);
S:=STABMACH(3,D{[1..7]});[ (), (4,5)(6,7), (4,6)(5,7) ];
L:=List(S,s->ListPerm(s,2^(dd-1)-1));
for LL in L do LL[2^(dd-1)]:=2^(dd-1); 
  for i in [2^(dd-1)+1..2^dd-1] do
    LL[i]:=LL[i-2^(dd-1)]+2^(dd-1);
    od;
  od; L;
SD:=List(L,s->PermList(s));[ (), (4,5)(6,7)(12,13)(14,15), (4,6)(5,7)(12,14)(13,15) ];
H:=Group(
  (8,9)(10,11)(12,13)(14,15),
  (8,10)(9,11)(12,14)(13,15),
  (8,12)(9,13)(10,14)(11,15)
  );
K:=Group(Concatenation(SD,List(H)));Size(K);
ORB:=Orbit(K,D,Permuted);
SortedList(List(ORB,i->i{[8,8,8,9,10,12]}));
Size(Orbit(K,D,Permuted));16;
#so, beim zweiten R fehlt wieder was
gap> Orbit(K,D,Permuted);
[ [ 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 2, 0, 3, 2, 1 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 2, 3, 0, 1, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 2, 2, 1, 0, 3 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 3, 0, 1, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 1, 2, 3, 0 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 0, 3, 2, 1, 0, 2, 0, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 3, 0, 1, 2, 2, 0, 2, 0 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 1, 0, 3, 0, 2, 0, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 2, 0, 2, 0 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 0, 2, 0, 2, 1, 2, 3, 0 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 0, 3, 2, 1 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 2, 1, 0, 3 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 3, 0, 1, 2, 0, 2, 0, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 0, 3, 2, 1, 2, 0, 2, 0 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 1, 2, 3, 0, 0, 2, 0, 2 ], 
  [ 1, 2, 3, 0, 0, 0, 0, 2, 1, 0, 3, 2, 0, 2, 0 ] ]

#########gleich ganze Orbits
R:=[[1]];#<=== [ 8, 2 ]#
R:=[[1],[0,2]];#<=== [ 16, 3 ]#
R:=[[1],[1,2]];#<=== [ 16, 4 ]#
R:=[[1],[2,3]];#<=== [ 16, 2 ]#
R:=[[1],[0,2],[0,0,0]];#<=== [ 32, 27 ]#ok
R:=[[1],[0,2],[0,0,1]];#<=== [ 32, 28 ]#ok
R:=[[1],[0,2],[0,1,0]];#<=== [ 32, 22 ]#ok
R:=[[1],[0,2],[0,1,1]];#<=== [ 32, 30 ]#mit D1,D2 ok
R:=[[1],[0,2],[0,1,3]];#<=== [ 32, 25 ]#mit D1,D2 ok
R:=[[1],[0,2],[0,2,2]];#<=== [ 32, 31 ]#ok
R:=[[1],[0,2],[1,1,1]];#<=== [ 32, 29 ]#mit D1,D2 ok
R:=[[1],[0,2],[1,2,3]];#<=== [ 32, 33 ]#mit D1,D2 ok
R:=[[1],[0,2],[1,3,2]];#<=== [ 32, 24 ]#ok
R:=[[1],[1,2],[0,1,1]];#<=== [ 32, 23 ]#ok
R:=[[1],[1,2],[1,1,1]];#<=== [ 32, 35 ]#mit D1,D2 ok
R:=[[1],[1,2],[1,2,2]];#<=== [ 32, 26 ]#ok
R:=[[1],[1,2],[1,2,3]];#<=== [ 32, 32 ]#mit D1,D2 ok
R:=[[1],[2,3],[0,0,0]];#<=== [ 32, 34 ]#ok
R:=[[1],[2,3],[0,1,2]];#<=== [ 32, 21 ]#ok

STABAUSD4:=function(dd,D)#aufpass, Input mit 0, Output ohne 0!
  local S,D1,D2,i,S1,S2;
  D1:=[];D2:=[];
  for i in [1..Size(D)] do
    if D[i]=1 or D[i]=3 then D1[i]:=1; else D1[i]:=0; fi;
    if D[i]=2 or D[i]=3 then D2[i]:=1; else D2[i]:=0; fi;
    od;
  D1:=COMPDIAGSTABERZ(D1);Remove(D1,1);
  D2:=COMPDIAGSTABERZ(D2);Remove(D2,1);
  S1:=STABMACH(dd,D1);
  S2:=STABMACH(dd,D2);
  S:=Intersection(Group(S1),Group(S2));
  return S;
  end;

DOPPELSTAB:=function(dd,S)
  local L,LL;
  L:=List(S,s->ListPerm(s,2^(dd-1)-1));
  for LL in L do LL[2^(dd-1)]:=2^(dd-1); 
    for i in [2^(dd-1)+1..2^dd-1] do
      LL[i]:=LL[i-2^(dd-1)]+2^(dd-1);
      od;
    od; #Display(L);
  SD:=List(L,s->PermList(s));
  return SD;
  end;

HMACH:=function(dd)
  local d,ddd,dddd,i,j,H,L;
  H:=[];ddd:=2^(dd-1);dddd:=2^dd;
  for d in [1..dd-1] do
    L:=[];
    for j in [1..ddd-1] do L[j]:=j; od;
    for j in [ddd..dddd-1] do
      if not IsBound(L[j]) then
        L[j]:=j+2^(d-1);
        L[j+2^(d-1)]:=j;
        fi;
      od;
    Add(H,PermList(L));
    od;
  return H;
  end;
HMACH(4);

RVOND:=function(dd,D)
  local d,j,R,RI;
  R:=[[0],[0,0]];
  for d in [1..dd] do
    RI:=[D[2^(d-1)],D[2^(d-1)],D[2^(d-1)]];
    for j in [2..d] do
      Add(RI,D[2^(d-1)+2^(j-2)]);
      od;
    Add(R,RI);
    od;
  return R;
  end;
RVOND(4,[ 1, 1, 2, 1, 2, 3, 2, 0, 0, 0, 2, 0, 2, 3, 3 ]);[[0],[0,0],[1,1,1],[1,1,1,2],[1,1,1,2,3],[0,0,0,0,0,0]];


TESTL:=function(R)#alle Fortsetzungen von R
dd:=Size(R)+1;
D:=DIAG(R);#Remove(D,1);
S:=STABAUSD4(dd-1,D);
SD:=DOPPELSTAB(dd,S);
H:=HMACH(dd);
K:=Group(Concatenation(SD,H));Print(Size(K));

DD:=Tuples([0..3],dd);;Print(Size(DD));
DDD:=[];
for i in [1..4^dd] do
  DDD[i]:=DIAG(Concatenation(R,[DD[i]])){[2..2^dd]};
  od;
ORBS:=OrbitsDomain(K,DDD,Permuted);;Print(Size(ORBS));
Print(List(ORBS,i->Size(i)));Print("\c");
Print(Collected(List(ORBS,i->IdSmallGroup(PcgsOfR(RVOND(dd,i[1]))))));
  end;

###jetzt Id bestimmen
DMITNULL:=StructuralCopy(List(DDD[8]));Add(DMITNULL,0,1);DMITNULL;
S:=STABAUSD4(DMITNULL);Size(S);
Orbits(S,[1..15]);
