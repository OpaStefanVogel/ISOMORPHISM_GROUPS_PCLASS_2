#Read("ENDE_IN_SICHT.txt");
Read("ERGS2PrintToTxt.txt");

ERWIND:=[];
j:=1;k:=1;S:=12;
for i in IteratorOfTuples( [0,1], S ) do
   Print(".");
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,GM,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=GM[RET[XP]+1][RET[YP]+1];
        PROD:=GM[PROD+1][RET[ZP]+1];
        PROD:=GM[PROD+1][RET[XPYP]+1];
        PROD:=GM[PROD+1][RET[XPZP]+1];
        PROD:=GM[PROD+1][RET[YPZP]+1];
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=[[0],[0,0],[1,1,1],[1,1,1,0],[0,0,0,2,3],[2,2,2,3,1,1]];
DIAG(R);


dmax:=10;
#dmax:=12;

XORMAT:=[[1]];
for i in [1..dmax] do
  n2:=2^(i-1);
  for j in [1..n2] do
    XORMAT[j+n2]:=[];
    for k in [1..n2] do
      XORMAT[j][k+n2]:=XORMAT[j][k]+n2;
      XORMAT[j+n2][k+n2]:=XORMAT[j][k];
      XORMAT[j+n2][k]:=XORMAT[j][k]+n2;
      od; od; od;

JKLLISTE:=[ [ 2, 3, 4 ],#d=2
 
  [ 2, 5, 6 ], [ 2, 7, 8 ],#d=3 

  [ 3, 5, 7 ], [ 3, 6, 8 ], 
  [ 4, 5, 8 ], [ 4, 6, 7 ] ];

for d in [4..dmax] do
  for i in [(2^(d-2)-1)*(2^(d-2)-2)/6+1..(2^(d-1)-1)*(2^(d-1)-2)/6] do
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-2),JKLLISTE[i][3]+2^(d-2)]);
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-1),JKLLISTE[i][3]+2^(d-1)]);
    od;
  for j in [1..2^(d-2)] do for k in [1..2^(d-2)] do
    Add(JKLLISTE,[j+2^(d-2),k+2^(d-1),XORMAT[j][k+2^(d-2)+2^(d-1)]]);
    od; od; 
  od;

BITLIST0:=[[0,0,0],[1,0,1],[0,1,1],[1,1,0]];
BITLIST2:=[[2,2,2],[3,2,3],[2,3,3],[3,3,2]];

###aus Stabilisator.txt:
FORTSETZ:=function(HRES,y,D) #setzt HRES,y zu einem gültigen pcgs fort und macht ein PHI daraus
  local PHI,i,j,k,HRESNEU,nochnichtgefunden;
  PHI:=[];HRESNEU:=[];
  i:=1;
  repeat
    if i<=Size(HRES) then HRESNEU[i]:=HRES[i]; fi;
    if i=Size(HRES)+1 then HRESNEU[i]:=y; fi;
    if i>Size(HRES)+1 then
      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;
      fi;
    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;
    i:=i+1;
    until 2^(i-1)=Size(D)+1;
  return PermList(PHI);
  end;

FORTSETZ([1,2],4,[1,0,0,1,1,3,0]);();
FORTSETZ([1],3,[1,0,0,1,1,3,0]);(2,3)(4,5);
FORTSETZ([], 4,[1,0,0,1,1,3,0]);(1,4,5)(2,3,7);

LRESAUSHRES:=function(HRES)
  local LRES,i,j;
  LRES:=[];
  for i in [1..Size(HRES)] do
    LRES[2^(i-1)]:=HRES[i];
    for j in [1..Size(LRES)-1] do
      LRES[2^(i-1)+j]:=XORMAT[LRES[j]+1][HRES[i]+1]-1;
      od;
    od;
  return LRES;
  end;
LRESAUSHRES([1,2,27]);[ 1, 2, 3, 27, 26, 25, 24 ];
  
STABERZ:=function(MENGE,HRES,STAB,D)
  local MENGENEU,STABNEU,x,y,i,DRIN,PHI,DK,PHI0;
  #1
  x:=MENGE[1];STABNEU:=STAB;
  LRES:=LRESAUSHRES(HRES);
  #2
  MENGENEU:=[];
  for y in MENGE do
    DRIN:=true;
    ##Print("\ny=",y," ",D[y]," ",D[x]);
    if D[y]<>D[x] then DRIN:=false; fi;
    for i in [1..Size(LRES)] do
     ##Print(" i=",i," ",D[XORMAT[HRES[i]+1][y+1]-1]," ",D[XORMAT[HRES[i]+1][x+1]-1]);
      if D[XORMAT[LRES[i]+1][y+1]-1]<>D[XORMAT[LRES[i]+1][x+1]-1] then DRIN:=false; fi;
      od;
    if DRIN then Add(MENGENEU,y); fi;
    od;
  ##Print("\nMENGENEU=",MENGENEU,"\n\c");
  #3
  repeat
    y:=MENGENEU[1];
    #4
    DK:=List(D);Remove(DK,1);
    ##Print("\n",MENGENEU,HRES,y,D,"\n\c");
    PHI:=FORTSETZ(HRES,y,D);
    #5
    if not PHI in STABNEU then Add(STABNEU,PHI); fi;
    ##Print("\n",PHI,STABNEU,"\n\c");
    #6
    MENGENEU:=Difference(MENGENEU,Orbit(Group(STABNEU),x));
  #7
    until MENGENEU=[];
  #8
  return STABNEU;
  end;

COMPDIAGSTABERZ:=function(D)#aus COMPDIAG4 mit geändertem RETURN
  local RET,i,j,k,l,jkl,jkli,dj,dk,dl,RET2,reti,SD,DD;
  SD:=Size(D);DD:=[];
  for i in [1..SD] do DD[i]:=D[i]+2; od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    if dj=1 and dk=dl then DD[j]:=1; fi;
    if dj=0 and dk<>dl then DD[j]:=0; fi;
    if dk=1 and dj=dl then DD[k]:=1; fi;
    if dk=0 and dj<>dl then DD[k]:=0; fi;
    if dl=1 and dk=dj then DD[l]:=1; fi;
    if dl=0 and dk<>dj then DD[l]:=0; fi;
    od;
#Print("\n",DD);
  return DD;
  end;

STABMACH:=function(dd,D)
  local STAB,ddd;
  STAB:=[];
  for ddd in [dd,dd-1..1] do 
    STAB:=STABERZ([2^(ddd-1)..2^dd-1],List([1..ddd-1],i->2^(i-1)),STAB,D);
    od;
  return STAB;
  end;

SCHNUCK:=function(dd,CMPD)
  local i,imax,R1R2;
  imax:=Size(ERGS2[dd]);
  Exec("date");
  GESAMTDILIST[dd]:=[];WOHINDAMIT[dd]:=[];
  for i in [1..imax] do R1R2:=ERGS2[dd][i];
    Print("\n",i," von ",imax," ***R1R2=",R1R2);
    R:=R1R2[1]+2*R1R2[2];
    D:=DIAG(R);
    ID:=CMPD(dd,D,false);
    if not ID in GESAMTDILIST[dd] then
      Add(GESAMTDILIST[dd],ID);WOHINDAMIT[dd][i]:=Size(GESAMTDILIST[dd]);
      Print("*\c");
      else 
        WOHINDAMIT[dd][i]:=Position(GESAMTDILIST[dd],ID);
        Print(".\c"); 
        fi;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)));
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],"\n");
  Exec("date");
  end;

COMPDIAG5D:=function(dd,D,flag)#neu
  local i,j,k,l,jkl,jkli,SD,DD,DDD,D0,D1,D2,Dji,Dki,Dli,
    DA,DB,SDA,SDB,SDAB,ORBAB,ORBAB1,OSIZE,
    D0Z,D1Z,D2Z,DDZ,ORBZU,
    MARK,MARKI,MARKJ,MINMARK,
    MARK123,MARK132,MARK213,MARK231,MARK312,MARK321,NMARK;
  SD:=Size(D);DD:=[];DDD:=[];D0:=[];D1:=[];D2:=[];
  for i in [1..SD] do 
    DD[i]:=List(BITLIST2[D[i]+1]);
    DDD[i]:=List(BITLIST0[D[i]+1]);
    od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    for i in [1..3] do
      Dji:=DDD[j][i];
      Dki:=DDD[k][i];
      Dli:=DDD[l][i];
      if Dji=1 and Dki=Dli then DD[j][i]:=1; fi;
      if Dji=0 and Dki<>Dli then DD[j][i]:=0; fi;
      if Dki=1 and Dji=Dli then DD[k][i]:=1; fi;
      if Dki=0 and Dji<>Dli then DD[k][i]:=0; fi;
      if Dli=1 and Dki=Dji then DD[l][i]:=1; fi;
      if Dli=0 and Dki<>Dji then DD[l][i]:=0; fi;
      od;
    od;
  GLOBDD:=DD;
  #Print("\n--",DD);
  for i in [1..SD] do 
    D0[i]:=DD[i][1];
    D1[i]:=DD[i][2];
    D2[i]:=DD[i][3];
    od;
  if flag=1 then
    Print("\n  ",D0);
    Print("\n  ",D1);
    Print("\n  ",D2);
    fi;
  ###neu Einschub für Orbits(Aut(G),[1..2^dd-1]);
  DA:=List(D0);Remove(DA,1);
  DB:=List(D1);Remove(DB,1);
  SDA:=STABMACH(dd,DA);
  SDB:=STABMACH(dd,DB);
  SDAB:=Intersection(Group(SDA),Group(SDB));
  ORBAB:=Orbits(SDAB,[1..Size(DA)]);
  OSIZE:=Size(ORBAB);
  Print(OSIZE);
  ORBAB1:=List(ORBAB,i->i[1]);
  ORBZU:=[1];
  for i in [1..OSIZE] do for j in [1..Size(ORBAB[i])] do
    ORBZU[ORBAB[i][j]+1]:=ORBAB1[i]+1;
    od; od;
  MARK:=[];NMARK:=[];
  for i in [1..OSIZE] do
    MARK[i]:=[];
    for j in [1..SD] do
      MARKI:=ORBZU[XORMAT[j][ORBAB1[i]+1]];#das +1 wg. Beginn bei Index 1
      MARKJ:=ORBZU[j];
      MARK[i][j]:=[ORBZU[ORBAB1[i]+1],MARKI,MARKJ];
      od;
    MARK[i]:=Collected(MARK[i]);
    for j in [1..Size(MARK[i])] do
      MARK[i][j][1][1]:=DDD[MARK[i][j][1][1]];
      MARK[i][j][1][2]:=DDD[MARK[i][j][1][2]];
      MARK[i][j][1][3]:=DDD[MARK[i][j][1][3]];
      if MARK[i][j][1][2]=[0,0,0] then MARK[i][j][2]:=MARK[i][j][2]+1000; fi;
      if MARK[i][j][1][3]=[0,0,0] then MARK[i][j][2]:=MARK[i][j][2]+2000; fi;
      if MARK[i][j][1][1]=MARK[i][j][1][2] then MARK[i][j][2]:=MARK[i][j][2]+4000; fi;
      if MARK[i][j][1][1]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+8000; fi;
      od;
    MARK[i]:=SortedList(MARK[i]);
    NMARK[i]:=[[MARK[i][1][1],[MARK[i][1][2]]]];
    for j in [2..Size(MARK[i])] do
      if MARK[i][j][1]=NMARK[i][Size(NMARK[i])][1] then
        Add(NMARK[i][Size(NMARK[i])][2],MARK[i][j][2]); else
          Add(NMARK[i],[MARK[i][j][1],[MARK[i][j][2]]]); fi; od;
    NMARK[i]:=Collected(List(NMARK[i],j->SortedList(j[2])));
    od;
  NMARK:=Collected(NMARK);
  return ORBAB;#OSIZE;#NMARK;
  end;

BITLIST8:=[
  [0,0,0,0,0,0,0],
  [1,0,1,0,1,0,1],
  [0,1,1,0,0,1,1],
  [1,1,0,0,1,1,0],
  [0,0,0,1,1,1,1],
  [1,0,1,1,0,1,0],
  [0,1,1,1,1,0,0],
  [1,1,0,1,0,0,1]];

Diagonale:=function(G,flag)
  local HRES,i,j,D,DD,DDD,RET;
  RA:=RankPGroup(G);
  PC:=Pcgs(G);
  HRES:=Reversed(PC{[1..RA]});#Print(RA,PC,HRES);
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,HRES[i]*D[j]);
      od;
    od;
  DDD:=List(D);
  DD:=List(D,i->i^2);
  HRES:=MinimalGeneratingSet(Group(DD));
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,D[j]*HRES[i]);
      od;
    od;
  Add(D,D[1]^0,1); Add(DDD,D[1]^0,1);
  RET:=List(DD,i->Position(D,i)-1);
  if flag=1 then RET:=DDD; fi;
  return RET;
  end;

Diagonale(SmallGroup(4,1),0);
Diagonale(SmallGroup(8,2),0);
Diagonale(SmallGroup(16,3),0);
Diagonale(SmallGroup(256,55750),1);

EGL:=List(ElementaryAbelianGroup(256));
EXTRAORBZUMACH:=function(D)
  local i,j,POS,GRP,RET;
  RET:=List(D,i->[]);
  for i in Set(D) do
    POS:=Positions(D,i);
    if POS>[] then
      GRP:=Group(EGL{POS});
      for j in GRP do
        k:=Position(EGL,j);
        Add(RET[k],i);
        od;
      fi;
    od;
  return RET;
  end;
EXTRAORBZU:=EXTRAORBZUMACH([0,0,4,5,5,6,5,7,0,0,6,7,4,7,6,4]);
  
COMPDIAG5E:=function(dd,D,flag)#neu
  local i,j,k,l,SD,ORBZU,ORBZU3,ORBZUMERK,MARK,NMARK,NMARK1,NMARK2,NMARK3,NMARK4,UMARK,
  HRES,LRES,MRES,PHI0,up,MRET,NMA,ORBZU1,ORBZU2,STUFE,UMARK2,UMARK3,STUFE1,ORBZU4,UMARKS,NMARK2A,NMARK5,ORBZU5,NMARK4A,NMARK5A;
  if flag=88 then Print("\n  ",D); fi;
  NMARK2:=0; NMARK3:=0; NMARK4:=0;
  SD:=Size(D);

  ORBZU:=[];STUFE:=1;
  ORBZU[STUFE]:=List(D);
  ORBZU[STUFE][1]:=-1;
  #ORBZU[STUFE]:=List(ORBZU[STUFE],i->[String(i)]);
  NMARK:=List([1..SD],i->List([1..SD],j->[]));
  repeat #zB bei [ 256, 56030 ]
    if flag=88 then Print("\n",ORBZU); fi;
    Print("#",Size(Collected(ORBZU[STUFE])),"\c");
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[-1];
      for j in [1..SD] do 
        MARK[i][j]:=[
          ORBZU[STUFE][i],
          ORBZU[STUFE][j],
          ORBZU[STUFE][XORMAT[j][i]]];
        Add(NMARK[i][j],MARK[i][j]);
        od;
      #Print("\nMARK[",i,"]=",MARK[i]{[1..SD]});
      MARK[i]:=Collected(MARK[i]{[1..SD]});
      #Print("\nMARK[",i,"]=",D[i],MARK[i]);
      #Add(NMARK[i],MARK[i]);
      #Print("\nNMARK[",i,"]=",D[i],NMARK[i]);
      od;
    STUFE:=STUFE+1;
    ORBZU[STUFE]:=[-2];
    for i in [2..SD] do for j in [i,i-1..1] do
      if MARK[i]=MARK[j] and ORBZU[STUFE-1][i]=ORBZU[STUFE-1][j] then ORBZU[STUFE][i]:=j; fi; od; od;
    until ORBZU[STUFE]=ORBZU[STUFE-1];
  NMARK1:=StructuralCopy(NMARK);
  ORBZU1:=StructuralCopy(ORBZU);STUFE1:=STUFE;
  
  ORBZU:=[];STUFE:=1;
  ORBZU[STUFE]:=List(D);
  ORBZU[STUFE][1]:=-1;
  #ORBZU[STUFE]:=List(ORBZU[STUFE],i->[String(i)]);
  NMARK:=List([1..SD],i->List([1..SD],j->[]));
  repeat #zB bei [ 256, 56030 ]
    if flag=88 then Print("\n",ORBZU); fi;
    Print("$",Size(Collected(ORBZU[STUFE])),"\c");
    #EXTRAORBZU:=EXTRAORBZUMACH(ORBZU1[STUFE]);
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[-1];
      for j in [1..SD] do
        k:=XORMAT[j][i];
        NMA:=[
          ORBZU[STUFE][i],
          ORBZU[STUFE][j],
          ORBZU[STUFE][k]];
        #if EXTRAORBZU[j]=EXTRAORBZU[k] then NMA[5]:="Y=Z"; fi;
        #if EXTRAORBZU[i]=EXTRAORBZU[j] then NMA[6]:="X=Y"; fi;
        #if j in EXTRAORBZU[k] then NMA[7]:="yinZ"; fi;
        #if i in EXTRAORBZU[j] then NMA[8]:="xinY"; fi;
        if STUFE=1 then
          NMA[4]:=(D[i]+1=XORMAT[D[j]+1][D[k]+1]);
          fi;
        if NMA[3]>0 then
          if NMA[3]=NMA[2] then NMA[3]:="y=z"; else
            if NMA[3]=NMA[1] then NMA[3]:="x=z"; else
               NMA[3]:="z"; fi; fi;
          fi;
        if NMA[2]>0 then
          if NMA[2]=NMA[1] then NMA[2]:="x=y"; else NMA[2]:="y"; fi;
          fi;
        if NMA[1]>0 then NMA[1]:="x"; fi;
        MARK[i][j]:=NMA;
        Add(NMARK[i][j],MARK[i][j]);
        od;
      #Print("\nMARK[",i,"]=",MARK[i]{[1..SD]});
      MARK[i]:=Collected(MARK[i]{[1..SD]});
      #Print("\nMARK[",i,"]=",D[i],MARK[i]);
      #Add(NMARK[i],MARK[i]);
      #Print("\nNMARK[",i,"]=",D[i],NMARK[i]);
      od;
    STUFE:=STUFE+1;
    ORBZU[STUFE]:=[-3];
    for i in [2..SD] do for j in [i,i-1..1] do
      if MARK[i]=MARK[j] and ORBZU[STUFE-1][i]=ORBZU[STUFE-1][j] then ORBZU[STUFE][i]:=j; fi; od; od;
    until ORBZU[STUFE]=ORBZU[STUFE-1];
  NMARK2A:=StructuralCopy(NMARK);
  for i in [1..SD] do NMARK[i]:=Collected(NMARK[i]); od;
  NMARK2:=StructuralCopy(NMARK);
  ORBZU2:=StructuralCopy(ORBZU);

repeat
  ORBZU4:=[-4];
  for i in [2..SD] do
    for j in [i,i-1..2] do
      if NMARK[i]=NMARK[j] then ORBZU4[i]:=j; fi; 
      od; od;
  UMARK:=[];
  for i in [1..SD] do 
    if not IsBound(UMARK[D[i]+1]) then UMARK[D[i]+1]:=[]; fi;
    Add(UMARK[D[i]+1],StructuralCopy(NMARK[i])); od;
  for i in [1..2^(LogInt(Size(UMARK)-1,2)+1)] do 
    if IsBound(UMARK[i]) then UMARK[i]:=Collected(UMARK[i]); 
      else UMARK[i]:=0; fi; od;
  UMARKS:=StructuralCopy(UMARK);Sort(UMARKS);
  UMARK2:=[-3];
  for i in [1..Size(UMARK)] do
    for j in [i,i-1..1] do
      if UMARK[i]=UMARK[j] then UMARK2[i]:=j; fi; 
      od; od;
  NMARK:=StructuralCopy(NMARK1);
  for i in [1..SD] do 
    for j in [1..SD] do 
      for k in [1,Size(NMARK[i][j])] do
        NMA:=NMARK[i][j][k];
        for l in [1..3] do
          if k=1 then if NMA[l]>0 then NMA[l]:=UMARK2[NMA[l]+1]; fi; else
            if NMA[l]>0 then NMA[l]:=ORBZU4[NMA[l]];#NMARK3[NMA[l]]; 
              fi;
            fi;
          od;
        od;
      NMARK[i][j]:=[NMARK2A[i][j],NMARK[i][j][Size(NMARK[i][j])]];
      od;
    od;
  NMARKSC:=StructuralCopy(NMARK);
  for i in [1..SD] do NMARK[i]:=Collected(NMARK[i]); od;
  ORBZUMERK:=List(ORBZU4);
  for i in [2..SD] do
    for j in [i,i-1..2] do
      if NMARK[i]=NMARK[j] then ORBZU4[i]:=j; fi; 
      od; od;
  until ORBZU4=ORBZUMERK;

  return [ORBZU1[Size(ORBZU1)],NMARK,UMARKS,ORBZU4,NMARK2,NMARKSC,UMARK,UMARK2,NMARK2];
          #CE1                 CE2   CE3    CE4    CE5    CE6     CE7   CE8
  end;

DDDDMACH:=function()
    A:=AutomorphismGroup(G);
    G2:=Group(List(G,i->i^2));
    GD:=Difference(G,G2);
    ORBS:=Orbits(A,GD);
DDD:=Diagonale(G,1);
for i in [1..Size(ORBS)] do for j in [1..Size(ORBS[i])] do
  POS:=Position(DDD,ORBS[i][j]);
  if POS<>fail then DDD[POS]:=i; fi;
  od; od;
DDDD:=[-9];
for i in [2..Size(DDD)] do for j in [i,i-1..2] do
  if DDD[i]=DDD[j] then DDDD[i]:=j; fi;
  od; od;
  return DDDD;
  end;

---------------  
DDDD:=DDDDMACH();
Size(Collected(DDDD));
---------
mit zweitem repeat:
Id=[ 128, 1574 ]
Id=[ 128, 1598 ] Rank=4 #9#16$9$16 15 3 3 3 3 true Error, Doppelte Markierung be
Id=[ 256, 27166 ] Rank=5 #8#12$8$10$11 11 7 7 7 Error, MA<>S bei [ 256, 27166 ] 
Id=[ 256, 27167 ] Rank=5 #9#12$9$11 11 7 7 7 Error, MA<>S bei [ 256, 27167 ] cal
27168 geht jetzt schon, dann erst wieder
Id=[ 256, 28545 ] Rank=5 #8#18$8$16 17 10 11 11 Error, MA<>S bei [ 256, 28545 ] 

vorher war:
Id=[ 128, 1598 ] Rank=4 #9#16$9$1615 3 3 3 3 true Error, Doppelte Markierung bei
Id=[ 256, 27166 ] Rank=5 #7#10$7$89 5 5 5 Error, MA<>S bei [ 256, 27040 ] called
Id=[ 256, 27167 ] Rank=5 #7#10$7$89 5 5 5 Error, MA<>S bei [ 256, 27040 ] called
Id=[ 256, 27168 ] Rank=5 #7#10$7$89 5 5 5 Error, MA<>S bei [ 256, 27040 ] called

Id:=[128,1115];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[4];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);


Id:=[128,1597];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
#9#16$9$16gap> D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
[ 0, 1, 3, 2, 6, 7, 5, 4, 0, 5, 1, 4, 7, 2, 6, 3 ]
[ -3, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ -4, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ -9, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 1 ], [ 3 ], [ 2 ], [ 6 ], [ 7 ], [ 5 ], [ 4 ], [ 0 ], [ 5, 7 ],
  [ 1, 6 ], [ 1, 4 ], [ 4, 7 ], [ 2, 3 ], [ 2, 6 ], [ 3, 5 ] ]
Id:=[128,1598];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
#9#16$9$16gap> D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
[ 0, 1, 3, 2, 7, 6, 4, 5, 0, 5, 1, 4, 6, 3, 7, 2 ]
[ -3, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ -4, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ -9, 2, 2, 2, 2, 2, 2, 2, 9, 10, 10, 10, 10, 10, 10, 10 ]
[ [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 1 ], [ 3 ], [ 2 ], [ 7 ], [ 6 ], [ 4 ], [ 5 ], [ 0 ], [ 5, 6 ],
  [ 1, 7 ], [ 1, 4 ], [ 2, 6 ], [ 3, 4 ], [ 5, 7 ], [ 2, 3 ] ]
#hier war doppelte Markierung!!!

Id:=[256,27166];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
[ 0, 0, 1, 1, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 5, 5, 4, 6, 7, 7, 6, 7, 6, 7, 6, 5, 4, 5, 4 ]
gap> CE[8];
[ -3, 2, 3, 3, 5, 5, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 ]
gap> CE[11];
[ -4, 2, 3, 3, 5, 5, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 ]
gap> DDDD:=DDDDMACH();
[ -5, 2, 3, 3, 5, 6, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17 ]
brk>EXTRAORBZUMACH(D);
[ [ 1, 2, 4, 5, 6, 7 ], [ 0, 1, 2 ], [ 0, 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ], [ 2, 4, 5, 6, 7 ], [ 2, 4, 5, 6, 7 ], [ 2, 4, 5, 6, 7 ],
 [ 2, 4, 5, 6, 7 ], [ 4, 5 ], [ 4, 5 ], [ 4, 5 ], [ 4, 5 ], [ 6, 7 ], [ 6, 7 ],
 [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 4, 5 ], [ 4, 5 ],
 [ 4, 5 ], [ 4, 5 ] ]
Id:=[256,27167];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
#9#12$9$11gap> D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
[ 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 3, 3, 3, 3, 4, 5, 5, 4, 7, 6, 6, 7, 7, 6, 7, 6, 4,
  5, 4, 5 ]
[ -3, 2, 3, 3, 5, 5, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17,
  17, 17, 17, 17, 17, 17, 17, 17 ]
[ -4, 2, 3, 3, 5, 5, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17,
  17, 17, 17, 17, 17, 17, 17, 17 ]
[ -9, 2, 3, 3, 5, 6, 7, 7, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17,
  17, 17, 17, 17, 17, 17, 17, 17 ]
[ [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 1, 2, 3, 4, 5, 6, 7 ],
  [ 1, 2, 3, 4, 5, 6, 7 ], [ 1 ], [ 1 ], [ 0, 1 ], [ 0, 1 ], [ 2 ], [ 2 ], [ 2 ], [ 2 ],
  [ 3, 4, 5, 6, 7 ], [ 3, 4, 5, 6, 7 ], [ 3, 4, 5, 6, 7 ], [ 3, 4, 5, 6, 7 ], [ 4, 5 ],
  [ 4, 5 ], [ 4, 5 ], [ 4, 5 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 6, 7 ],
  [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], [ 4, 5 ], [ 4, 5 ], [ 4, 5 ], [ 4, 5 ] ]
Id:=[256,27168];G:=SmallGroup(Id);D:=Diagonale(G,0);Add(D,0,1);CE:=COMPDIAG5E(RankPGroup(G),D,0);;
D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
#9#18$9$17gap> D;CE[8];CE[11];DDDD:=DDDDMACH();EXTRAORBZUMACH(D);
[ 0, 1, 0, 1, 0, 1, 0, 1, 2, 3, 3, 2, 2, 3, 3, 2, 4, 4, 4, 4, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 4, 4 ]
[ -3, 2, 3, 2, 5, 6, 7, 8, 9, 9, 9, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 25, 25, 27,
  27, 25, 25, 27, 27 ]
[ -4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 13, 13, 13, 13, 17, 17, 17, 17, 17, 17, 17, 17, 25, 25,
  27, 27, 25, 25, 27, 27 ]
[ -9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 13, 14, 14, 13, 17, 17, 17, 17, 17, 17, 17, 17, 25, 25,
  27, 27, 25, 25, 27, 27 ]
[ [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 1, 4, 5, 6, 7 ], [ 0, 1, 4, 6 ], [ 1, 2, 3, 4, 6 ],
  [ 0, 1, 2, 3 ], [ 1 ], [ 0, 1 ], [ 1, 2, 3 ], [ 2 ], [ 3 ], [ 3 ], [ 2 ], [ 2, 4, 6 ],
  [ 3, 4, 6 ], [ 3, 4, 6 ], [ 2, 4, 6 ], [ 4 ], [ 4 ], [ 4 ], [ 4 ], [ 6 ], [ 6 ], [ 6 ], [ 6 ],
  [ 6, 7 ], [ 6, 7 ], [ 6 ], [ 6 ], [ 4, 5 ], [ 4, 5 ], [ 4 ], [ 4 ] ]




GESAMTDILIST:=[[1]];WOHINDAMIT:=[[1]];
SCHNUCK(2,COMPDIAG5E);#n=16#6#9
#SCHNUCK(3,COMPDIAG5E);time;#n=32#19#34
#SCHNUCK(4,COMPDIAG5E);time;#n=64#60#122
#SCHNUCK(5,COMPDIAG5E);time;#n=128#158#343
#SCHNUCK(6,COMPDIAG5E);time;#n=256#442#999
#SCHNUCK(7,COMPDIAG5E);time/60000.;#n=512#1122#21xx#3 min!
#SCHNUCK(8,COMPDIAG5E);time/60000.;#n=1024#2945##76xx#38 min!

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]=ERGS2[i][j-1][1] then ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      else Add(ANZ[i],1); fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  2,  3 ], 
#  [  7,  6, 11,  10 ], 
#  [ 11, 13, 23,  32,  18,  25 ], 
#  [ 14, 19, 36,  70,  58,  77,  69 ], 
#  [ 18, 27, 49, 114, 127, 174, 252, 114,  124 ], 
#  [ 21, 33, 62, 160, 204, 278, 565, 412,  460,  426 ], 
#  [ 25, 41, 75, 205, 292, 401, 985, 947, 1057, 1613, 669, 715 ] ]
#    3/4 6/8 13 46/45

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];AMAX:=0;
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]<>ERGS2[i][j-1][1] then Add(ANZ[i],0); fi;
    if WOHINDAMIT[i][j]>AMAX then 
      AMAX:=WOHINDAMIT[i][j];
      ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  1,  1 ], #
#  [  7,  4,  6,   2 ], 
#  [ 11, 11, 17,  14,   4,   3 ], #
#  [ 14, 17, 30,  50,  24,  19,   4 ], 
#  [ 18, 25, 43,  94,  85,  92,  74,   7,  4 ], #
#  [ 21, 31, 56, 140, 161, 191, 326, 117, 67, 12 ], 
#  [ 25, 39, 69, 185, 249, 313, 733, 526, 413, 343, 36, 14 ] ]#

Liste_der_Markierungen:=[];Liste_der_Id:=[];
for m in [2..8] do n:=2^m;
  for Id in IdsOfAllSmallGroups(Size,n,PClassPGroup,2,RankPGroup,m-3) do #,RankPGroup,m-1,m-2,m-3
  #m:=9;n:=512;for i in [10493062..10494173] do Id:=[512,i];
    Print("\nId=",Id," \c");
    G:=SmallGroup(Id);
    RANK:=RankPGroup(G);
    Print("Rank=",RANK," \c");
    D:=Diagonale(G,0);
    Add(D,0,1);
    CE:=COMPDIAG5E(RANK,D,0);
    M:=Size(Collected(CE[1]))-1;#e weg
    Print(" ",M," \c");
    M5:=Size(Collected(CE[5]))-1;#e weg
    Print(M5," \c");
    M4:=Size(Collected(CE[4]))-1;#e weg
    Print(M4," \c");
    MA:=Size(Collected(CE[2]))-1;#e weg
    Print(MA," \c");
    #if MA<>M5 then Error("MA<>M5 bei ",Id); fi;
    #if MA<>M4 then Error("MA<>M4 bei ",Id); fi;
    A:=AutomorphismGroup(G);
    G2:=Group(List(G,i->i^2));
    GD:=Difference(G,G2);
    ORBS:=Orbits(A,GD);
    S:=Size(ORBS);
    if MA<>S then Error("MA<>S bei ",Id); fi;
    Print(S," ",MA=S ," \c");
    if [CE[2],CE[3]] in Liste_der_Markierungen then Error("Doppelte Markierung bei ",Id," und ",Liste_der_Id[Position(Liste_der_Markierungen,[CE[2],CE[3]])]); fi;
    Add(Liste_der_Markierungen,[CE[2],CE[3]]);
    Add(Liste_der_Id,Id);
    #STAB:=Stabilizer(BG[3],CE[7],Permuted);
    #Print(" ",Size(A)/8^(m-3)/Size(STAB)/Size(Stabilizer(BG[m-3],CE[1],Permuted)),CE[1]);
    od;
  od;

SmallGroupsInformation(256);
Remove(IdsOfAllSmallGroups(Size,256,PClassPGroup,2,RankPGroup,m-5),1);  
     #m-2                        #m-3           #m-4
#16  #2-4 (3)
#32  #21-35 (15)                 #2
#64  #192 - 245 (54)             #55-82 (28)
#128 #2150 - 2300 (151)          #997-1600
#256 #55626 - 56058 (433)        #26973-53037  #6732-10297    
#512 #10493062 - 10494173 (1112)
