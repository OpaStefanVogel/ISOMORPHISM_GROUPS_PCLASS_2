#Read("ENDE_IN_SICHT.txt");
Read("ERGS2PrintToTxt.txt");

ERWIND:=[];
j:=1;k:=1;S:=12;
for i in IteratorOfTuples( [0,1], S ) do
   Print(".");
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,GM,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=GM[RET[XP]+1][RET[YP]+1];
        PROD:=GM[PROD+1][RET[ZP]+1];
        PROD:=GM[PROD+1][RET[XPYP]+1];
        PROD:=GM[PROD+1][RET[XPZP]+1];
        PROD:=GM[PROD+1][RET[YPZP]+1];
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=[[0],[0,0],[1,1,1],[1,1,1,0],[0,0,0,2,3],[2,2,2,3,1,1]];
DIAG(R);


dmax:=10;
#dmax:=12;

XORMAT:=[[1]];
for i in [1..dmax] do
  n2:=2^(i-1);
  for j in [1..n2] do
    XORMAT[j+n2]:=[];
    for k in [1..n2] do
      XORMAT[j][k+n2]:=XORMAT[j][k]+n2;
      XORMAT[j+n2][k+n2]:=XORMAT[j][k];
      XORMAT[j+n2][k]:=XORMAT[j][k]+n2;
      od; od; od;

JKLLISTE:=[ [ 2, 3, 4 ],#d=2
 
  [ 2, 5, 6 ], [ 2, 7, 8 ],#d=3 

  [ 3, 5, 7 ], [ 3, 6, 8 ], 
  [ 4, 5, 8 ], [ 4, 6, 7 ] ];

for d in [4..dmax] do
  for i in [(2^(d-2)-1)*(2^(d-2)-2)/6+1..(2^(d-1)-1)*(2^(d-1)-2)/6] do
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-2),JKLLISTE[i][3]+2^(d-2)]);
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-1),JKLLISTE[i][3]+2^(d-1)]);
    od;
  for j in [1..2^(d-2)] do for k in [1..2^(d-2)] do
    Add(JKLLISTE,[j+2^(d-2),k+2^(d-1),XORMAT[j][k+2^(d-2)+2^(d-1)]]);
    od; od; 
  od;

BITLIST0:=[[0,0,0],[1,0,1],[0,1,1],[1,1,0]];
BITLIST2:=[[2,2,2],[3,2,3],[2,3,3],[3,3,2]];

###aus Stabilisator.txt:
FORTSETZ:=function(HRES,y,D) #setzt HRES,y zu einem gültigen pcgs fort und macht ein PHI daraus
  local PHI,i,j,k,HRESNEU,nochnichtgefunden;
  PHI:=[];HRESNEU:=[];
  i:=1;
  repeat
    if i<=Size(HRES) then HRESNEU[i]:=HRES[i]; fi;
    if i=Size(HRES)+1 then HRESNEU[i]:=y; fi;
    if i>Size(HRES)+1 then
      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;
      fi;
    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;
    i:=i+1;
    until 2^(i-1)=Size(D)+1;
  return PermList(PHI);
  end;

FORTSETZ([1,2],4,[1,0,0,1,1,3,0]);();
FORTSETZ([1],3,[1,0,0,1,1,3,0]);(2,3)(4,5);
FORTSETZ([], 4,[1,0,0,1,1,3,0]);(1,4,5)(2,3,7);

LRESAUSHRES:=function(HRES)
  local LRES,i,j;
  LRES:=[];
  for i in [1..Size(HRES)] do
    LRES[2^(i-1)]:=HRES[i];
    for j in [1..Size(LRES)-1] do
      LRES[2^(i-1)+j]:=XORMAT[LRES[j]+1][HRES[i]+1]-1;
      od;
    od;
  return LRES;
  end;
LRESAUSHRES([1,2,27]);[ 1, 2, 3, 27, 26, 25, 24 ];
  
STABERZ:=function(MENGE,HRES,STAB,D)
  local MENGENEU,STABNEU,x,y,i,DRIN,PHI,DK,PHI0;
  #1
  x:=MENGE[1];STABNEU:=STAB;
  LRES:=LRESAUSHRES(HRES);
  #2
  MENGENEU:=[];
  for y in MENGE do
    DRIN:=true;
    ##Print("\ny=",y," ",D[y]," ",D[x]);
    if D[y]<>D[x] then DRIN:=false; fi;
    for i in [1..Size(LRES)] do
     ##Print(" i=",i," ",D[XORMAT[HRES[i]+1][y+1]-1]," ",D[XORMAT[HRES[i]+1][x+1]-1]);
      if D[XORMAT[LRES[i]+1][y+1]-1]<>D[XORMAT[LRES[i]+1][x+1]-1] then DRIN:=false; fi;
      od;
    if DRIN then Add(MENGENEU,y); fi;
    od;
  ##Print("\nMENGENEU=",MENGENEU,"\n\c");
  #3
  repeat
    y:=MENGENEU[1];
    #4
    DK:=List(D);Remove(DK,1);
    ##Print("\n",MENGENEU,HRES,y,D,"\n\c");
    PHI:=FORTSETZ(HRES,y,D);
    #5
    if not PHI in STABNEU then Add(STABNEU,PHI); fi;
    ##Print("\n",PHI,STABNEU,"\n\c");
    #6
    MENGENEU:=Difference(MENGENEU,Orbit(Group(STABNEU),x));
  #7
    until MENGENEU=[];
  #8
  return STABNEU;
  end;

COMPDIAGSTABERZ:=function(D)#aus COMPDIAG4 mit geändertem RETURN
  local RET,i,j,k,l,jkl,jkli,dj,dk,dl,RET2,reti,SD,DD;
  SD:=Size(D);DD:=[];
  for i in [1..SD] do DD[i]:=D[i]+2; od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    if dj=1 and dk=dl then DD[j]:=1; fi;
    if dj=0 and dk<>dl then DD[j]:=0; fi;
    if dk=1 and dj=dl then DD[k]:=1; fi;
    if dk=0 and dj<>dl then DD[k]:=0; fi;
    if dl=1 and dk=dj then DD[l]:=1; fi;
    if dl=0 and dk<>dj then DD[l]:=0; fi;
    od;
#Print("\n",DD);
  return DD;
  end;

STABMACH:=function(dd,D)
  local STAB,ddd;
  STAB:=[];
  for ddd in [dd,dd-1..1] do 
    STAB:=STABERZ([2^(ddd-1)..2^dd-1],List([1..ddd-1],i->2^(i-1)),STAB,D);
    od;
  return STAB;
  end;

SCHNUCK:=function(dd,CMPD)
  local i,imax,R1R2;
  imax:=Size(ERGS2[dd]);
  Exec("date");
  GESAMTDILIST[dd]:=[];WOHINDAMIT[dd]:=[];
  for i in [1..imax] do R1R2:=ERGS2[dd][i];
    Print("\n",i," von ",imax," ***R1R2=",R1R2);
    R:=R1R2[1]+2*R1R2[2];
    D:=DIAG(R);
    ID:=CMPD(dd,D,false);
    if not ID in GESAMTDILIST[dd] then
      Add(GESAMTDILIST[dd],ID);WOHINDAMIT[dd][i]:=Size(GESAMTDILIST[dd]);
      Print("*\c");
      else 
        WOHINDAMIT[dd][i]:=Position(GESAMTDILIST[dd],ID);
        Print(".\c"); 
        fi;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)));
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],"\n");
  Exec("date");
  end;

COMPDIAG5D:=function(dd,D,flag)#neu
  local i,j,k,l,jkl,jkli,SD,DD,DDD,D0,D1,D2,Dji,Dki,Dli,
    DA,DB,SDA,SDB,SDAB,ORBAB,ORBAB1,OSIZE,
    D0Z,D1Z,D2Z,DDZ,ORBZU,
    MARK,MARKI,MARKJ,MINMARK,
    MARK123,MARK132,MARK213,MARK231,MARK312,MARK321,NMARK;
  SD:=Size(D);DD:=[];DDD:=[];D0:=[];D1:=[];D2:=[];
  for i in [1..SD] do 
    DD[i]:=List(BITLIST2[D[i]+1]);
    DDD[i]:=List(BITLIST0[D[i]+1]);
    od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    for i in [1..3] do
      Dji:=DDD[j][i];
      Dki:=DDD[k][i];
      Dli:=DDD[l][i];
      if Dji=1 and Dki=Dli then DD[j][i]:=1; fi;
      if Dji=0 and Dki<>Dli then DD[j][i]:=0; fi;
      if Dki=1 and Dji=Dli then DD[k][i]:=1; fi;
      if Dki=0 and Dji<>Dli then DD[k][i]:=0; fi;
      if Dli=1 and Dki=Dji then DD[l][i]:=1; fi;
      if Dli=0 and Dki<>Dji then DD[l][i]:=0; fi;
      od;
    od;
  GLOBDD:=DD;
  #Print("\n--",DD);
  for i in [1..SD] do 
    D0[i]:=DD[i][1];
    D1[i]:=DD[i][2];
    D2[i]:=DD[i][3];
    od;
  if flag=1 then
    Print("\n  ",D0);
    Print("\n  ",D1);
    Print("\n  ",D2);
    fi;
  ###neu Einschub für Orbits(Aut(G),[1..2^dd-1]);
  DA:=List(D0);Remove(DA,1);
  DB:=List(D1);Remove(DB,1);
  SDA:=STABMACH(dd,DA);
  SDB:=STABMACH(dd,DB);
  SDAB:=Intersection(Group(SDA),Group(SDB));
  ORBAB:=Orbits(SDAB,[1..Size(DA)]);
  OSIZE:=Size(ORBAB);
  Print(OSIZE);
  ORBAB1:=List(ORBAB,i->i[1]);
  ORBZU:=[1];
  for i in [1..OSIZE] do for j in [1..Size(ORBAB[i])] do
    ORBZU[ORBAB[i][j]+1]:=ORBAB1[i]+1;
    od; od;
  MARK:=[];NMARK:=[];
  for i in [1..OSIZE] do
    MARK[i]:=[];
    for j in [1..SD] do
      MARKI:=ORBZU[XORMAT[j][ORBAB1[i]+1]];#das +1 wg. Beginn bei Index 1
      MARKJ:=ORBZU[j];
      MARK[i][j]:=[ORBZU[ORBAB1[i]+1],MARKI,MARKJ];
      od;
    MARK[i]:=Collected(MARK[i]);
    for j in [1..Size(MARK[i])] do
      MARK[i][j][1][1]:=DDD[MARK[i][j][1][1]];
      MARK[i][j][1][2]:=DDD[MARK[i][j][1][2]];
      MARK[i][j][1][3]:=DDD[MARK[i][j][1][3]];
      if MARK[i][j][1][2]=[0,0,0] then MARK[i][j][2]:=MARK[i][j][2]+1000; fi;
      if MARK[i][j][1][3]=[0,0,0] then MARK[i][j][2]:=MARK[i][j][2]+2000; fi;
      if MARK[i][j][1][1]=MARK[i][j][1][2] then MARK[i][j][2]:=MARK[i][j][2]+4000; fi;
      if MARK[i][j][1][1]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+8000; fi;
      od;
    MARK[i]:=SortedList(MARK[i]);
    NMARK[i]:=[[MARK[i][1][1],[MARK[i][1][2]]]];
    for j in [2..Size(MARK[i])] do
      if MARK[i][j][1]=NMARK[i][Size(NMARK[i])][1] then
        Add(NMARK[i][Size(NMARK[i])][2],MARK[i][j][2]); else
          Add(NMARK[i],[MARK[i][j][1],[MARK[i][j][2]]]); fi; od;
    NMARK[i]:=Collected(List(NMARK[i],j->SortedList(j[2])));
    od;
  NMARK:=Collected(NMARK);
  return ORBAB;#OSIZE;#NMARK;
  end;

BITLIST8:=[
  [0,0,0,0,0,0,0],
  [1,0,1,0,1,0,1],
  [0,1,1,0,0,1,1],
  [1,1,0,0,1,1,0],
  [0,0,0,1,1,1,1],
  [1,0,1,1,0,1,0],
  [0,1,1,1,1,0,0],
  [1,1,0,1,0,0,1]];

COMPDIAG5E:=function(dd,D,flag)#neu
  local i,j,SD,ORBZU,ORBZUMERK,MARK,NMARK,UMARK,
  HRES,LRES,MRES,PHI0,up,MRET;
  if flag=88 then Print("\n  ",D); fi;
  SD:=Size(D);
  ORBZU:=[1];
  for i in [2..SD] do for j in [i,i-1..2] do
    if D[i]=D[j] then ORBZU[i]:=j; fi; od; od;
  ORBZU:=List(GLOBDD);
  NMARK:=List([1..SD],i->[]);
  repeat
    #Print("\n",ORBZU);
    Print("#",Size(Collected(ORBZU)),"\c");
    MARK:=[];
    for i in [1..SD] do
      MARK[i]:=[-1];
      for j in [1..SD] do MARK[i][j]:=[ORBZU[i],ORBZU[j],ORBZU[XORMAT[j][i]]]; od;
      #Print("\nMARK[",i,"]=",MARK[i]{[2..SD]});
      MARK[i]:=Collected(MARK[i]{[2..SD]});
      for j in [1..Size(MARK[i])] do
        if MARK[i][j][1][2]=ORBZU[1] then MARK[i][j][2]:=MARK[i][j][2]+1000; fi;
        if MARK[i][j][1][3]=ORBZU[1] then MARK[i][j][2]:=MARK[i][j][2]+2000; fi;
        if MARK[i][j][1][1]=MARK[i][j][1][2] then MARK[i][j][2]:=MARK[i][j][2]+4000; fi;
        if MARK[i][j][1][1]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+8000; fi;
        if MARK[i][j][1][2]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+8000; fi;
        od;
      MARK[i]:=Collected(List(MARK[i],j->j[2]));
      #Print("\nMARK[",i,"]=",D[i],MARK[i]);
      Add(NMARK[i],MARK[i]);
      #Print("\nNMARK[",i,"]=",D[i],NMARK[i]);
      od;
    ORBZUMERK:=List(ORBZU);
    ORBZU:=[1];
    for i in [2..SD] do for j in [i,i-1..2] do
      if NMARK[i]=NMARK[j] and ORBZUMERK[i]=ORBZUMERK[j] then ORBZU[i]:=j; fi; od; od;
    until ORBZU=ORBZUMERK;
  return ORBZU;#Size(Collected(ORBZU));
  end;
------
  #NMARK noch auf 0, 1, 2, 3 aufteilen dann sollte es passen
#  UMARK:=[[],[],[],[]];
#  for i in [1..SD] do Add(UMARK[D[i]+1],NMARK[i]); od;
#  for i in [1..4] do UMARK[i]:=Collected(UMARK[i]); od;
#  UMARK:=Collected(UMARK);
  UMARK:=[];
  for i in [1..SD] do#wieso nicht 2?
    if not IsBound(UMARK[D[i]+1]) then UMARK[D[i]+1]:=[]; fi;
    Add(UMARK[D[i]+1],StructuralCopy(NMARK[i])); od;
  for i in [1..Size(UMARK)] do if IsBound(UMARK[i]) then 
    UMARK[i]:=Collected(UMARK[i]);
    #Print("\nUMARK[",i-1,"]=",UMARK[i]);
    fi; od;
  UMARK[1]:=-1;
  for i in [1..SD] do 
    Add(NMARK[i],[UMARK[D[i]+1]],1);
    Add(NMARK[i],D[i]);
    od;
  #Print("\nUMARK=",UMARK);
  HRES:=[]; LRES:=[];
  Unbind(NMARK[1]);
  repeat
    i:=Position(NMARK,Minimum(NMARK));if i=5 then i:=7; fi;#Ausweg bei n=1/20.
    Print(" ",i);
    Add(HRES,i);
    Add(LRES,i);
    Unbind(NMARK[i]);
    for j in [1..Size(LRES)-1] do
      k:=XORMAT[LRES[j]][i];
      Add(LRES,k);
      Unbind(NMARK[k]);
      od;
    until Size(NMARK)=0;
  MRES:=List(LRES,i->D[i]);
  PHI0:=[0];up:=1;
  for i in [1..SD-1] do
    if not IsBound(PHI0[MRES[i]+1]) then
      PHI0[MRES[i]+1]:=up; up:=2*up;
      fi;
    for j in [1..SD-1] do if IsBound(PHI0[MRES[j]+1]) then
      PHI0[XORMAT[MRES[j]+1][MRES[i]+1]]:=XORMAT[PHI0[MRES[j]+1]+1][PHI0[MRES[i]+1]+1]-1;
      fi; od;
    #Print("\n",i," ",j,PHI0,up);
    od;
  MRET:=List(MRES,i->PHI0[i+1]);
  Print("\n",MRES);
  Print("\n",MRET);
  return MRET;#Collected(Compacted(UMARK));#MRET;#[HRES,LRES,MRES,PHI0,MRET];

dd:=3; 
nr:=7; CD:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);;
nr:=11;CE:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);;CD=CE;
nr:=2; CD:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);;
nr:=18;CE:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);;CD=CE;
nr:=1; CD:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);
nr:=20;CE:=COMPDIAG5E(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);CD=CE;
nr:=1; CD:=COMPDIAG5D(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);
nr:=20;CE:=COMPDIAG5D(dd,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),0);CD=CE;
[ 0, 3, 0, 1, 0, 1, 0, 3 ];
[ 0, 3, 0, 2, 0, 3, 0, 2 ];
R1:=[[0],[0,0],[3,3,3],[0,0,0,1],[0,0,0,1,0]];
R20:=[[0],[0,0],[3,3,3],[0,0,0,2],[0,0,0,3,0]];
G1:=PcgsOfR(R1);
   A:=AutomorphismGroup(G1);
   G2:=Group(List(G1,i->i^2));
   GD:=Difference(G1,G2); 
   ORBS:=Orbits(A,GD);#f5=1,f4=2,f3=a,f2=b.f1=c:
[ [ f1, f2, f1*f4, f1*f4*f5, f2*f4, f2*f4*f5, f1*f5, f2*f5 ], 
  [ f3, f1*f3, f1*f2*f3, f3*f4, f3*f4*f5, f2*f3, f1*f3*f4, f1*f3*f4*f5, 
      f1*f2*f3*f4, f1*f2*f3*f4*f5, f3*f5, f1*f3*f5, f2*f3*f4, f2*f3*f4*f5, 
      f1*f2*f3*f5, f2*f3*f5 ], [ f1*f2, f1*f2*f4, f1*f2*f4*f5, f1*f2*f5 ] ]
   #also f1*f2=bc ist extra Orbit gegenüber b und c!!! ein Glück
   #auch COMPDIAG5D: [ [ 1, 7 ], [ 2, 4 ], [ 3, 5 ], [ 6 ] ]
   #auch COMPDIAG5E:  [ 1, 2, 3, 4, 3, 4, 7, 2 ] mit  +1000, +2000...
   #nicht COMPDIAG5E: [ 1, 2, 3, 4, 3, 4, 3, 2 ] ohne +1000, +2000...
   #also COMPDISG5E weiter verbessern bis COMPDIAG5D erreicht ist.


GESAMTDILIST:=[[1]];WOHINDAMIT:=[[1]];
SCHNUCK(2,COMPDIAG5E);#n=16#6#9
#SCHNUCK(3,COMPDIAG5E);time;#n=32#19#34
#SCHNUCK(4,COMPDIAG5E);time;#n=64#60#122
#SCHNUCK(5,COMPDIAG5E);time;#n=128#158#343
#SCHNUCK(6,COMPDIAG5E);time;#n=256#442#999
#SCHNUCK(7,COMPDIAG5E);time/60000.;#n=512#1122#21xx#3 min!
#SCHNUCK(8,COMPDIAG5E);time/60000.;#n=1024#2945##76xx#38 min!
gap> WOHINDAMIT;
[ [ 1 ], [ 1, 2, 3, 4, 4, 5, 6, 1, 4 ], 
  [ 1, 2, 3, 4, 5, 6, 7, 8, 6, 9, 7, 10, 11, 12, 13, 14, 15, 2, 16, 1, 17, 8, 6, 9, 2, 14, 16, 
      17, 18, 19, 3, 8, 10, 7 ] ]
1 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 0 ] ] ]#3#4 2 4 6*
2 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 1 ] ] ]#4#6 8 3 4*
3 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 0, 1 ] ] ]#4#5 3 5 2*
4 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ] ]#2#3 3 5 2*
5 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 1, 0, 1 ] ] ]#4#5 3 2 5*
6 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 1, 1, 1 ] ] ]#3#4 3 5 2*
7 von 34 ***R1R2=[ [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 1, 0 ], [ 1, 0, 1 ] ] ]#4#4 2 3 5*
8 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 0 ] ] ]#3#5 5 3 4*
9 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ] ]#3#4 5 2 3.
10 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 0, 0 ] ] ]#4#5 2 5 3*
11 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 0, 1 ] ] ]#4#4 5 2 3.
12 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 1, 0 ] ] ]#4#6 5 4 2*
13 von 34 ***R1R2=[ [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ], [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ] ]#2#3 2 3 6*
14 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 0 ] ] ]#4#6 3 5 4*
15 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ] ]#2#4 2 6 3*
16 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 1, 1 ] ] ]#3#5 5 3 4*
17 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 0, 0 ] ] ]#4#5 2 5 3*
18 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 0, 1 ] ] ]#4#6 5 3 4.
19 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 0, 0, 1 ] ] ]#4#6 5 3 2*
20 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ] ]#3#4 2 4 6.
21 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 1, 0, 0 ] ] ]#4#6 3 7 2*
22 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 0, 1 ], [ 1, 1, 1 ] ] ]#3#5 3 5 4.
23 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 1, 1 ], [ 0, 1, 1 ] ] ]#3#4 5 2 3.
24 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 0, 1, 0 ] ], [ [ 1 ], [ 1, 1 ], [ 1, 0, 1 ] ] ]#4#5 2 6 3.
25 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 0 ] ] ]#4#6 7 3 4.
26 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 0, 1 ] ] ]#3#5 8 3 4.
27 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 0, 1, 1 ] ] ]#4#6 4 3 5.
28 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 1, 0 ] ] ]#4#6 3 4 7.
29 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ] ]#2#4 2 3 5*
30 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 1 ], [ 0, 0, 1 ] ] ]#4#8 3 2 5*
31 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 1 ], [ 0, 1, 0 ] ] ]#4#5 3 5 2.
32 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 0, 1 ], [ 1, 1, 1 ] ] ]#3#5 3 5 2.
33 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 1, 1 ], [ 0, 0, 0 ] ] ]#4#6 2 7 3.
34 von 34 ***R1R2=[ [ [ 1 ], [ 0, 0 ], [ 1, 1, 1 ] ], [ [ 1 ], [ 1, 1 ], [ 1, 1, 0 ] ] ]#4#4 7 2 3.

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]=ERGS2[i][j-1][1] then ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      else Add(ANZ[i],1); fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  2,  3 ], 
#  [  7,  6, 11,  10 ], 
#  [ 11, 13, 23,  32,  18,  25 ], 
#  [ 14, 19, 36,  70,  58,  77,  69 ], 
#  [ 18, 27, 49, 114, 127, 174, 252, 114,  124 ], 
#  [ 21, 33, 62, 160, 204, 278, 565, 412,  460,  426 ], 
#  [ 25, 41, 75, 205, 292, 401, 985, 947, 1057, 1613, 669, 715 ] ]
#    3/4 6/8 13 46/45

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];AMAX:=0;
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]<>ERGS2[i][j-1][1] then Add(ANZ[i],0); fi;
    if WOHINDAMIT[i][j]>AMAX then 
      AMAX:=WOHINDAMIT[i][j];
      ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  1,  1 ], #
#  [  7,  4,  6,   2 ], 
#  [ 11, 11, 17,  14,   4,   3 ], #
#  [ 14, 17, 30,  50,  24,  19,   4 ], 
#  [ 18, 25, 43,  94,  85,  92,  74,   7,  4 ], #
#  [ 21, 31, 56, 140, 161, 191, 326, 117, 67, 12 ], 
#  [ 25, 39, 69, 185, 249, 313, 733, 526, 413, 343, 36, 14 ] ]#


Diagonale:=function(G)
  local HRES,i,j,D,DD,DDD,RET;
  RA:=RankPGroup(G);
  PC:=Pcgs(G);
  HRES:=Reversed(PC{[1..RA]});#Print(RA,PC,HRES);
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,D[j]*HRES[i]);
      od;
    od;
  DD:=List(D,i->i^2);
  HRES:=MinimalGeneratingSet(Group(DD));
  D:=[];
  for i in [1..Size(HRES)] do
    Add(D,HRES[i]);
    for j in [1..Size(D)-1] do
      Add(D,D[j]*HRES[i]);
      od;
    od;
  Add(D,D[1]^0,1);
  RET:=List(DD,i->Position(D,i)-1);
  return RET;
  end;

Diagonale(SmallGroup(4,1));
Diagonale(SmallGroup(8,2));
Diagonale(SmallGroup(16,3));

Liste_der_Markierungen:=[];Liste_der_Id:=[];
for m in [2..8] do n:=2^m;
  Liste_der_Markierungen[m]:=[];
  Liste_der_Id[m]:=[];
  for Id in IdsOfAllSmallGroups(Size,n,PClassPGroup,2,RankPGroup,m-2) do #,RankPGroup,m-1,m-2,m-3
    Print("\nId=",Id," \c");
    G:=SmallGroup(Id);
    RANK:=RankPGroup(G);
    Print("Rank=",RANK," \c");
    D:=Diagonale(G);
    Add(D,0,1);
    M1:=Size(COMPDIAG5D(RANK,D,0));#ist schon ohne e
    M:=Size(Collected(COMPDIAG5E(RANK,D,0)))-1;#e weg
    Print(" OSIZE= ",M1," \c");
    Print(M," \c");
    #A:=AutomorphismGroup(G);
    #G2:=Group(List(G,i->i^2));
    #GD:=Difference(G,G2);
    #ORBS:=Orbits(A,GD);
    #S:=Size(ORBS);
    #Print(S," ",M>=S," \c");
    if M1<>M then
      M:= COMPDIAG5E(RANK,D,88);
      M1:=COMPDIAG5D(RANK,D,1);
      Print("\n  ",M,"\n",M1,"\c");
      Error("M1<>M"); fi;
    od;
  od;

Id=[ 64, 221 ] Rank=4 11#8#11 OSIZE= 11 10 
  [ 0, 1, 0, 1, 2, 3, 3, 2, 0, 0, 2, 2, 3, 3, 0, 0 ]#8#11
  [ 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0 ]
  [ 2, 2, 0, 0, 3, 3, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0 ]
  [ 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0 ]11
  [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 11, 11, 13, 13, 9, 9 ]
[ [ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ], [ 6 ], [ 7 ], [ 8, 9 ], [ 10, 11 ], 
  [ 12, 13 ], [ 14, 15 ] ]Error, M1<>M called from

Ergebnis: obwohl durch bis 2945 ist COMPDIAG5E ist nicht so gut wie COMPDIAG5D.
Id=[ 64, 210 ] Rank=4 11#4#11 OSIZE= 11 10 11 false 
Id=[ 128, 2171 ] Rank=5 12#4#12 OSIZE= 12 11 12 false 
Id=[ 128, 2224 ] Rank=5 11#4#10#11 OSIZE= 11 10 11 false 
Id=[ 128, 2225 ] Rank=5 11#4#11 OSIZE= 11 10 11 false
Id=[ 128, 2248 ] Rank=5 15#4#15 OSIZE= 15 14 15 false
usw.

    #Print(M);
    if M in Liste_der_Markierungen[m] then 
      Error(Id,Liste_der_Id[m][Position(Liste_der_Markierungen[m],M)]);
      else Print("ok"); fi;
    Add(Liste_der_Markierungen[m],StructuralCopy(M));
    Add(Liste_der_Id[m],Id);

Id=[ 128, 166 ] Rank=3 
[ 0, 1, 8, 9, 4, 7, 13, 14 ]#8#8 2 5 3
[ 1, 4, 7, 8, 9, 13, 14 ]
[ 1, 2, 4, 8, 36, 16, 32 ]ok
Id=[ 128, 175 ] Rank=3 
[ 0, 1, 3, 6, 8, 11, 10, 13 ]#8#8 2 3 5
[ 1, 3, 6, 8, 11, 10, 13 ]
Error, [ 128, 175 ][ 128, 166 ] called from
[ 1, 2, 4, 8, 36, 16, 32 ]<function "unknown">( <arguments> )#Fehler wieso 36?
-----
Id=[ 4, 1 ] Rank=1 #2#2 2ok
Id=[ 8, 2 ] Rank=2 #2#3 2 3ok
Id=[ 8, 3 ] Rank=2 #2#3 4 2ok
Id=[ 8, 4 ] Rank=2 #2#2 2 3ok
Id=[ 16, 2 ] Rank=2 #4#4 2 3ok
Id=[ 16, 3 ] Rank=2 #3#4 3 4ok
Id=[ 16, 4 ] Rank=2 #3#3 2 3ok
Id=[ 16, 10 ] Rank=3 #2#3 2 3 5ok
Id=[ 16, 11 ] Rank=3 #2#4 7 8 3ok
Id=[ 16, 12 ] Rank=3 #2#3 3 4 5ok
Id=[ 16, 13 ] Rank=3 #2#4 3 4 5ok
Id=[ 32, 2 ] Rank=2 #4#4 2 3ok
Id=[ 32, 21 ] Rank=3 #4#5 2 3 5ok
Id=[ 32, 35 ] Rank=3 #4#5 2 4 5ok
Id=[ 32, 45 ] Rank=4 #2#3 2 3 5 9ok
Id=[ 32, 50 ] Rank=4 #2#3 2 9 12 13ok
Id=[ 64, 55 ] Rank=3 #8#8 2 3 5ok
Id=[ 64, 82 ] Rank=3 #8#8 2 3 5ok
Id=[ 64, 192 ] Rank=4 #4#5 2 3 5 9ok
Id=[ 64, 245 ] Rank=4 #4#4 2 3 5 9ok
Id=[ 64, 260 ] Rank=5 #2#3 2 3 5 9 17ok
Id=[ 64, 266 ] Rank=5 #2#4 3 4 5 9 17ok
Id=[ 128, 164 ] Rank=3 #8#8 2 3 5ok
Id=[ 128, 178 ] Rank=3 #6#6 2 3 5ok
Id=[ 128, 997 ] Rank=4 #8#9 2 3 5 9ok
Id=[ 128, 1600 ] Rank=4 #8#9 2 3 6 9ok
Id=[ 128, 2150 ] Rank=5 #4#5 2 3 5 9 17ok
Id=[ 128, 2300 ] Rank=5 #4#18 3 6 11 17 10ok
Id=[ 128, 2319 ] Rank=6 #2#3 2 3 5 9 17 33ok
Id=[ 128, 2327 ] Rank=6 #2#3 2 3 17 23 27 33ok
Id=[ 256, 542 ] Rank=3 #8#8 2 3 5ok
Id=[ 256, 543 ] Rank=3 #7#8 3 4 5ok
Id=[ 256, 544 ] Rank=3 #8#8 2 3 5ok
Id=[ 256, 545 ] Rank=3 #7#7 2 3 7ok
Id=[ 256, 6732 ] Rank=4 #16#16 2 3 5 9ok
über Id=[ 256, 8097 ] Rank=4 #12#14 11 3 4 16ok
----
Error, [ 128, 1079 ][ 128, 1078 ] ist weg, aber 24 statt 19
D1:=[ 0, 1, 1, 0, 2, 2, 3, 3, 4, 5, 7, 6, 7, 7, 4, 4 ];#1078
D2:=[ 0, 1, 1, 0, 3, 3, 2, 2, 4, 5, 7, 6, 6, 6, 5, 5 ];#1079
COMPDIAG5E(4,D1,0)=COMPDIAG5E(4,D2,0);
#nach c<-->bc in D2:
R1:=[[1],[1,0],[2,2,3],[4,5,7,7]];
R2:=[[1],[1,0],[2,2,3],[4,5,7,5]];
#also doch RKAN bestimmen.


[ 0, 1, 1, 0, 2, 2, 3, 3, 4, 5, 7, 6, 7, 7, 4, 4 ]#8#12
[ 6, 6, 2, 2 ]#2#5
[ 6, 6, 2, 2 ]#2#5
[ 9, 6, 1 ]#2#3
[ 8, 8 ]#2#3
[ 6, 6, 2, 2 ]#2#5
[ 6, 6, 2, 2 ]#2#5
[ 10, 5, 1 ]#2#3
[ 0, 1, 1, 0, 3, 3, 2, 2, 4, 5, 7, 6, 6, 6, 5, 5 ]#8#12
[ 6, 6, 2, 2 ]#2#5
[ 6, 6, 2, 2 ]#2#5
[ 10, 5, 1 ]#2#3
[ 8, 8 ]#2#3
[ 6, 6, 2, 2 ]#2#5
[ 6, 6, 2, 2 ]#2#5
[ 9, 6, 1 ]#2#3true