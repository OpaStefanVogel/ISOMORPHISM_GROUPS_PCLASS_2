#Read("ENDE_IN_SICHT.txt");
Read("ERGS2PrintToTxt.txt");

ERWIND:=[];
j:=1;k:=1;S:=12;
for i in IteratorOfTuples( [0,1], S ) do
   Print(".");
#  Print("\n",i);
  if 3>Sum(i) then 
    ERWIND[k]:=j;j:=j+1;k:=k+1;
    else
      XL:=0*i;YL:=List(XL);ZL:=List(i);
      POS1:=Position(ZL,1);
      XL[POS1]:=1;ZL[POS1]:=0;XP:=2^(S-POS1);
      POS2:=Position(ZL,1);
      YL[POS2]:=1;ZL[POS2]:=0;YP:=2^(S-POS2);
      ZP:=0;ii:=1;
      for POS3 in [S,S-1..1] do 
        if ZL[POS3]=1 then ZP:=ZP+ii; fi;
        ii:=ii+ii;
        od;          
      ERWIND[k]:=[XP+1,YP+1,ZP+1,XP+YP+1,XP+ZP+1,YP+ZP+1];
      k:=k+1;
      fi;
#  Print(ERWIND[k-1]);
  od;

DIAG:=function(R)#neu
  local i,S,T,RET,RF,PROD,GM,XP,YP,ZP,XPYP,XPZP,YPZP;
#  PR:=function(X) return RET[IZUN(Reversed(X))+1]; end; 
  RET:=[];
  RF:=Flat(R);Add(RF,0,1);
#  Print("\n",RF);
  S:=Size(R);T:=2^S;RET:=EmptyPlist(T);
  GM:=[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]];
  for i in [1..T] do
    if IsInt(ERWIND[i]) then
      RET[i]:=RF[ERWIND[i]];
      else
        XP:=ERWIND[i][1];
        YP:=ERWIND[i][2];
        ZP:=ERWIND[i][3];
        XPYP:=ERWIND[i][4];
        XPZP:=ERWIND[i][5];
        YPZP:=ERWIND[i][6];
        PROD:=GM[RET[XP]+1][RET[YP]+1];
        PROD:=GM[PROD+1][RET[ZP]+1];
        PROD:=GM[PROD+1][RET[XPYP]+1];
        PROD:=GM[PROD+1][RET[XPZP]+1];
        PROD:=GM[PROD+1][RET[YPZP]+1];
        RET[i]:=PROD;
        fi;
    od;
  return RET;
  end;
R:=[[0],[0,0],[1,1,1],[1,1,1,0],[0,0,0,2,3],[2,2,2,3,1,1]];
DIAG(R);


dmax:=10;
#dmax:=12;

XORMAT:=[[1]];
for i in [1..dmax] do
  n2:=2^(i-1);
  for j in [1..n2] do
    XORMAT[j+n2]:=[];
    for k in [1..n2] do
      XORMAT[j][k+n2]:=XORMAT[j][k]+n2;
      XORMAT[j+n2][k+n2]:=XORMAT[j][k];
      XORMAT[j+n2][k]:=XORMAT[j][k]+n2;
      od; od; od;

JKLLISTE:=[ [ 2, 3, 4 ],#d=2
 
  [ 2, 5, 6 ], [ 2, 7, 8 ],#d=3 

  [ 3, 5, 7 ], [ 3, 6, 8 ], 
  [ 4, 5, 8 ], [ 4, 6, 7 ] ];

for d in [4..dmax] do
  for i in [(2^(d-2)-1)*(2^(d-2)-2)/6+1..(2^(d-1)-1)*(2^(d-1)-2)/6] do
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-2),JKLLISTE[i][3]+2^(d-2)]);
    Add(JKLLISTE,[JKLLISTE[i][1],JKLLISTE[i][2]+2^(d-1),JKLLISTE[i][3]+2^(d-1)]);
    od;
  for j in [1..2^(d-2)] do for k in [1..2^(d-2)] do
    Add(JKLLISTE,[j+2^(d-2),k+2^(d-1),XORMAT[j][k+2^(d-2)+2^(d-1)]]);
    od; od; 
  od;

BITLIST0:=[[0,0,0],[1,0,1],[0,1,1],[1,1,0]];
BITLIST2:=[[2,2,2],[3,2,3],[2,3,3],[3,3,2]];

###aus Stabilisator.txt:
FORTSETZ:=function(HRES,y,D) #setzt HRES,y zu einem gültigen pcgs fort und macht ein PHI daraus
  local PHI,i,j,k,HRESNEU,nochnichtgefunden;
  PHI:=[];HRESNEU:=[];
  i:=1;
  repeat
    if i<=Size(HRES) then HRESNEU[i]:=HRES[i]; fi;
    if i=Size(HRES)+1 then HRESNEU[i]:=y; fi;
    if i>Size(HRES)+1 then
      nochnichtgefunden:=true;
      for k in [1..Size(D)] do if nochnichtgefunden and not k in PHI then
        if D[k]=D[2^(i-1)] then 
          nochnichtgefunden:=false;
          for j in [1..Size(PHI)] do if nochnichtgefunden=false then 
            if D[XORMAT[PHI[j]+1][k+1]-1]<>D[2^(i-1)+j] then nochnichtgefunden:=true; fi;
            fi; od;
          if nochnichtgefunden=false then HRESNEU[i]:=k; fi;
          fi; fi; od;
      fi;
    PHI[2^(i-1)]:=HRESNEU[i];#ja!!!
    for j in [1..2^(i-1)-1] do
      PHI[2^(i-1)+j]:=XORMAT[PHI[j]+1][PHI[2^(i-1)]+1]-1;#ja!!!
      od;
    i:=i+1;
    until 2^(i-1)=Size(D)+1;
  return PermList(PHI);
  end;

FORTSETZ([1,2],4,[1,0,0,1,1,3,0]);();
FORTSETZ([1],3,[1,0,0,1,1,3,0]);(2,3)(4,5);
FORTSETZ([], 4,[1,0,0,1,1,3,0]);(1,4,5)(2,3,7);

LRESAUSHRES:=function(HRES)
  local LRES,i,j;
  LRES:=[];
  for i in [1..Size(HRES)] do
    LRES[2^(i-1)]:=HRES[i];
    for j in [1..Size(LRES)-1] do
      LRES[2^(i-1)+j]:=XORMAT[LRES[j]+1][HRES[i]+1]-1;
      od;
    od;
  return LRES;
  end;
LRESAUSHRES([1,2,27]);[ 1, 2, 3, 27, 26, 25, 24 ];
  
STABERZ:=function(MENGE,HRES,STAB,D)
  local MENGENEU,STABNEU,x,y,i,DRIN,PHI,DK,PHI0;
  #1
  x:=MENGE[1];STABNEU:=STAB;
  LRES:=LRESAUSHRES(HRES);
  #2
  MENGENEU:=[];
  for y in MENGE do
    DRIN:=true;
    ##Print("\ny=",y," ",D[y]," ",D[x]);
    if D[y]<>D[x] then DRIN:=false; fi;
    for i in [1..Size(LRES)] do
     ##Print(" i=",i," ",D[XORMAT[HRES[i]+1][y+1]-1]," ",D[XORMAT[HRES[i]+1][x+1]-1]);
      if D[XORMAT[LRES[i]+1][y+1]-1]<>D[XORMAT[LRES[i]+1][x+1]-1] then DRIN:=false; fi;
      od;
    if DRIN then Add(MENGENEU,y); fi;
    od;
  ##Print("\nMENGENEU=",MENGENEU,"\n\c");
  #3
  repeat
    y:=MENGENEU[1];
    #4
    DK:=List(D);Remove(DK,1);
    ##Print("\n",MENGENEU,HRES,y,D,"\n\c");
    PHI:=FORTSETZ(HRES,y,D);
    #5
    if not PHI in STABNEU then Add(STABNEU,PHI); fi;
    ##Print("\n",PHI,STABNEU,"\n\c");
    #6
    MENGENEU:=Difference(MENGENEU,Orbit(Group(STABNEU),x));
  #7
    until MENGENEU=[];
  #8
  return STABNEU;
  end;

COMPDIAGSTABERZ:=function(D)#aus COMPDIAG4 mit geändertem RETURN
  local RET,i,j,k,l,jkl,jkli,dj,dk,dl,RET2,reti,SD,DD;
  SD:=Size(D);DD:=[];
  for i in [1..SD] do DD[i]:=D[i]+2; od;
  for jkli in [1..(SD-1)*(SD-2)/6] do
    jkl:=JKLLISTE[jkli];
    j:=jkl[1];k:=jkl[2];l:=jkl[3];
    dj:=D[j];dk:=D[k];dl:=D[l];
#Print("\n",jkl," ",dj," ",dk," ",dl);
    if dj=1 and dk=dl then DD[j]:=1; fi;
    if dj=0 and dk<>dl then DD[j]:=0; fi;
    if dk=1 and dj=dl then DD[k]:=1; fi;
    if dk=0 and dj<>dl then DD[k]:=0; fi;
    if dl=1 and dk=dj then DD[l]:=1; fi;
    if dl=0 and dk<>dj then DD[l]:=0; fi;
    od;
#Print("\n",DD);
  return DD;
  end;

STABMACH:=function(dd,D)
  local STAB,ddd;
  STAB:=[];
  for ddd in [dd,dd-1..1] do 
    STAB:=STABERZ([2^(ddd-1)..2^dd-1],List([1..ddd-1],i->2^(i-1)),STAB,D);
    od;
  return STAB;
  end;

SCHNUCK:=function(dd,CMPD)
  local i,imax,R1R2;
  imax:=Size(ERGS2[dd]);
  Exec("date");
  GESAMTDILIST[dd]:=[];WOHINDAMIT[dd]:=[];
  for i in [1..imax] do R1R2:=ERGS2[dd][i];
    Print("\n",i," von ",imax," ***R1R2=",R1R2);
    R:=R1R2[1]+2*R1R2[2];
    D:=DIAG(R);
    ID:=CMPD(dd,D,false);
    if not ID in GESAMTDILIST[dd] then
      Add(GESAMTDILIST[dd],ID);WOHINDAMIT[dd][i]:=Size(GESAMTDILIST[dd]);
      Print("*\c");
      else 
        WOHINDAMIT[dd][i]:=Position(GESAMTDILIST[dd],ID);
        Print(".\c"); 
        fi;
    od;
  Print("\n",List(GESAMTDILIST,i->Size(i)));
  Print("\n",[ 1, 6, 19, 60, 158, 442, 1122, 2945],"\n");
  Exec("date");
  end;

COMPDIAG5E:=function(dd,D,flag)#neu
  local i,j,SD,ORBZU,ORBZUMERK,MARK,MARKI,MARKJ,NMARK,MARKALT;
  SD:=Size(D);
  ####neuer Versuch mit repeat
  ORBZU:=[1];
  for i in [2..SD] do for j in [i,i-1..2] do
    if D[i]=D[j] then ORBZU[i]:=j; fi; od; od;
  MARKALT:=List(ORBZU);
  repeat
    #Print("\n",ORBZU);
    Print("#",Size(Collected(ORBZU)),"\c");
    MARK:=[];NMARK:=[];
    for i in [1..SD] do
      MARK[i]:=[];if not(IsBound(GMARK[i])) then GMARK[i]:=[]; fi;
      for j in [1..SD] do
        MARKI:=ORBZU[XORMAT[j][i]];#das +1 wg. Beginn bei Index 1
        MARKJ:=ORBZU[j];
        MARK[i][j]:=[ORBZU[i],MARKI,MARKJ];
        od;
      MARK[i]:=Collected(MARK[i]);
      for j in [1..Size(MARK[i])] do
        MARK[i][j][1][1]:=[D[MARK[i][j][1][1]],ORBZU[MARK[i][j][1][1]]];
        MARK[i][j][1][2]:=[D[MARK[i][j][1][2]],ORBZU[MARK[i][j][1][2]]];
        MARK[i][j][1][3]:=[D[MARK[i][j][1][3]],ORBZU[MARK[i][j][1][3]]];
        if MARK[i][j][1][2][1]=0 then MARK[i][j][2]:=MARK[i][j][2]+1000; fi;
        if MARK[i][j][1][3][1]=0 then MARK[i][j][2]:=MARK[i][j][2]+2000; fi;
        if MARK[i][j][1][1]=MARK[i][j][1][2] then MARK[i][j][2]:=MARK[i][j][2]+4000; fi;
        if MARK[i][j][1][1]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+8000; fi;
        if MARK[i][j][1][2]=MARK[i][j][1][3] then MARK[i][j][2]:=MARK[i][j][2]+16000; fi;
        od;
      MARK[i]:=SortedList(MARK[i]);
      NMARK[i]:=[[MARK[i][1][1],[MARK[i][1][2]]]];
      for j in [2..Size(MARK[i])] do
        if MARK[i][j][1]=NMARK[i][Size(NMARK[i])][1] then
          Add(NMARK[i][Size(NMARK[i])][2],MARK[i][j][2]); else
            Add(NMARK[i],[MARK[i][j][1],[MARK[i][j][2]]]); fi; od;
      NMARK[i]:=Collected(List(NMARK[i],j->SortedList(j[2])));
      Add(GMARK[i],StructuralCopy(MARK[i]));
      od;
    MARKALT:=StructuralCopy(NMARK);
    ORBZUMERK:=List(ORBZU);
    ORBZU:=[1];
    for i in [2..SD] do for j in [i,i-1..2] do
      if MARK[i]=MARK[j] and ORBZUMERK[i]=ORBZUMERK[j] then ORBZU[i]:=j; fi; od; od;
    until ORBZU=ORBZUMERK;
  #Print("\n",D);
  #Print("\n",NMARK,ORBZU,D);
  NMARK:=Collected(NMARK);
  return Size(Collected(ORBZU));#NMARK; #Size(Collected(ORBZU));
  end;

#dd:=4; nr:=109;
#CD:=COMPDIAG5D(2,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),1);;
#CE:=COMPDIAG5E(2,DIAG(ERGS2[dd][nr][1]+2*ERGS2[dd][nr][2]),false);;
#CD;CE-1;

[ 1, 2, 3, 3, 5, 5, 2, 3, 3, 10, 3,  5, 10,  2,  3, 10 ]#5
[ 1, 2, 3, 4, 5, 6, 7, 8, 3, 10, 3, 12, 13, 14, 15, 16 ]#14
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11, 12, 13, 14, 15, 16 ]#16
[ 0, 3, 0, 0, 1, 1, 3, 0, 0,  2, 0,  1,  2,  3,  0,  2 ]

[ 2, 3, 4 ][ 3, 5, 7 ][ 3, 6, 8 ][ 3, 9, 11 ][ 3, 13, 15 ][ 3, 10, 12 ][ 3, 14, 16 ]
 .3  0  0   .0  1  3   .0  1  0   .0  0   0   .0   2   0   .0   2   1   .0   3   2
[ 2, 9, 10 ][ 3, 9, 11 ][ 4, 9, 12 ][ 5, 9, 13 ][ 6, 9, 14 ][ 7, 9, 15 ][ 8, 9, 16 ]
  3  0   2    0  0   0    0  0   1    1  0   2    1  0   3    3  0   0    0  0   2
gap> GMARK[3][2];
[ [ [ 0, 0, 0 ], 31001 ], [ [ 0, 0, 0 ], 31001 ], [ [ 0, 0, 0 ], 31002 ], 
  [ [ 0, 0, 1 ], 5001 ], [ [ 0, 0, 2 ], 5001 ], [ [ 0, 0, 3 ], 5001 ], 
  [ [ 0, 1, 0 ], 10001 ], [ [ 0, 1, 2 ], 1 ], [ [ 0, 1, 3 ], 1 ], 
  [ [ 0, 2, 0 ], 10001 ], [ [ 0, 2, 1 ], 1 ], [ [ 0, 2, 3 ], 1 ], 
  [ [ 0, 3, 0 ], 10001 ], [ [ 0, 3, 1 ], 1 ], [ [ 0, 3, 2 ], 1 ] ]

x:=3;
x:=9;
x:=11;
for jkl in JKLLISTE{[1..15*14/6]} do if x in jkl then Print(jkl); fi; od;


#  return Size(Collected(ORBZU));#NMARK; #Size(Collected(ORBZU));
#  return OSIZE;#NMARK;
dd:=7;
for i in [1..Size(ERGS2[dd])] do Print("\n",i,":");
  CD:=COMPDIAG5D(dd,DIAG(ERGS2[dd][i][1]+2*ERGS2[dd][i][2]),false);
  CE:=COMPDIAG5E(dd,DIAG(ERGS2[dd][i][1]+2*ERGS2[dd][i][2]),false);
  if CD>CE-1 then Print("\n\n****",i," ",Size(ERGS2[dd])," ",CD," ",CE-1," "); Error("7"); fi;
  if CD<CE-1 then Print("\n\n****",i," ",CD," ",CE-1," "); Error("8"); fi;
  od;
#dd=4:
#**** 109 15 13 

GESAMTDILIST:=[[1]];WOHINDAMIT:=[[1]];
SCHNUCK(2,COMPDIAG5E);#n=16#6
#SCHNUCK(3,COMPDIAG5E);time;#n=32#19
#SCHNUCK(4,COMPDIAG5E);time;#n=64#60
#SCHNUCK(5,COMPDIAG5E);time;#n=128#158
#SCHNUCK(6,COMPDIAG5E);time;#n=256#442
#SCHNUCK(7,COMPDIAG5E);time/60.;#n=512#1122#10 min
#SCHNUCK(8,COMPDIAG5E);time/60.;#n=1024#2945#100 min

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]=ERGS2[i][j-1][1] then ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      else Add(ANZ[i],1); fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  2,  3 ], 
#  [  7,  6, 11,  10 ], 
#  [ 11, 13, 23,  32,  18,  25 ], 
#  [ 14, 19, 36,  70,  58,  77,  69 ], 
#  [ 18, 27, 49, 114, 127, 174, 252, 114,  124 ], 
#  [ 21, 33, 62, 160, 204, 278, 565, 412,  460,  426 ], 
#  [ 25, 41, 75, 205, 292, 401, 985, 947, 1057, 1613, 669, 715 ] ]
#    3/4 6/8 13 46/45

ANZ:=[];
for i in [1..Size(ERGS2)] do
  ANZ[i]:=[1];AMAX:=0;
  for j in [2..Size(ERGS2[i])] do
    if ERGS2[i][j][1]<>ERGS2[i][j-1][1] then Add(ANZ[i],0); fi;
    if WOHINDAMIT[i][j]>AMAX then 
      AMAX:=WOHINDAMIT[i][j];
      ANZ[i][Size(ANZ[i])]:=ANZ[i][Size(ANZ[i])]+1;
      fi;
    od;
  od;
ANZ;
#[ [  1 ], 
#  [  4,  1,  1 ], #
#  [  7,  4,  6,   2 ], 
#  [ 11, 11, 17,  14,   4,   3 ], #
#  [ 14, 17, 30,  50,  24,  19,   4 ], 
#  [ 18, 25, 43,  94,  85,  92,  74,   7,  4 ], #
#  [ 21, 31, 56, 140, 161, 191, 326, 117, 67, 12 ], 
#  [ 25, 39, 69, 185, 249, 313, 733, 526, 413, 343, 36, 14 ] ]#
