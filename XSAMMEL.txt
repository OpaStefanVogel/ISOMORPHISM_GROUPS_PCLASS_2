#Read("Desktop/GAP/PCLASS2/XSAMMEL.txt");#Raspberry Pi
#Read("PCLASS2/XSAMMEL.txt");#asterix
#Read("Desktop/GAP/PCLASS2/PcgsOfR.txt");#macht Mat aus R.
#Read("PCLASS2/PcgsOfR.txt");#asterix
#Read("GAP/PCLASS2/MatrixOf.txt");#macht Mat aus R.
#SaveWorkspace("GAP_WORKSPACE_XSAMMEL");

#jetzt bei [1..1] n=16 nur noch:
#  count  self/ms  chld/ms  stor/kb  chld/kb  package  function                                                                                    
#    564       44        0       37        0  (oprt.)  PcElementByExponentsNC                                                                      
#    112       12       76       16       63           XMISCH                                                                                      
#    200       32       60       66       32           QY21MINI                                                                                    
#    370      160        0      212        0  GAP      Group                                                                                       
#   1506      160        0      293        0           QY09                                                                                        
#    696      396        8      424        0           QY10A                                                                                       
#   2531      532        0     1195        0  (oprt.)  Size                                                                                        
#     18       48      632       36      273           QY14                                                                                        
#    131      484      224      583      410           XFUELL                                                                                      
#    200       96      692       72      906           QY11A                                                                                       
#   2110      972        0      519        0  (oprt.)  ExponentsOfPcElement                                                                        
#    167     1000        0     1599        0  (oprt.)  RightTransversal                                                                            
#    114      240     1264      222     1904           QY12                                                                                        
#    608     1520        4     2430        0  (oprt.)  PcgsByPcSequenceNC                                                                          
#    167      360     4864      427     6549           QY13                                                                                        
#              52                32                    OTHER                                                                                       
#            6108              8169                    TOTAL                                                                                       
#von vorher
#           10072             14587                    TOTAL                                                                              
#und noch vorher
#           36903             53089                    TOTAL                                                                                           



XMERK:=[];
ZEILE:=[];SPALTE:=[];S1:=[];S2:=[];
FINBIT:=0;FIXBIT:=0;FIXFIX:=-1;PBIT:=0;
HRES0:=[];HRES:=[];STEP:=0;CLIST:=[];R:=[];
XSAMMEL:=[];
XMERKZAHL:=0;XMERKZAHLVEKTOR:=[];COUNTER:=0;
LFDNR:=0;n:=1;nmax:=2048;HRESEXT:=[];HRESANF:=[];

WEGLI:=[];WEGEZAHL:=0;WEGEARRAY:=[];
ILIST:=[];RMERKER:=[];
RMAX:=0;RMAXSUCH:=IdFunc;
inh:=0;
DDDDBIT:=0;DBIT:=0;
PARTZ:=0;XMERKZAHLZIEL:=9999999;
AUZAHL:=0;FAKT:=[];


LETZTERABZWEIG:=0;

LETZTEWEGELISTE:=[];WHALT:=0;
LETZTEWEGEZAHLVEKTOR:=[];LRES:=[];

#Schnittstellen zu GAP
Commu:=function(a,b) return Comm(a,b); end;
Commu:=function(a,b) return (b*a)^2; end;
PositionFirstComponentRepariert:=function(ZEIGER,PNEU)
  local DRINBIT,POS;
  DRINBIT:=0;POS:=1;
  while IsBound(ZEIGER[POS]) and DRINBIT=0 do
    if PNEU>ZEIGER[POS][1] then POS:=POS+1;
      else DRINBIT:=-1; fi;
    od;
#if POS<>PositionFirstComponent(ZEIGER,PNEU) then Error("778877"); fi;
  return POS;
#  return PositionFirstComponent(ZEIGER,PNEU);
  #welches bei "nicht drin" Size(ZEIGER) ausgibt statt Add-Position 
  end;
PositionFirstComponentRepariert:=function(ZEIGER,PNEU)
  return PositionSorted(ZEIGER,[PNEU]);
  end;
IZUN:=function(L) return Iterated(Reversed(L),function(a,b) return a+a+b; end); end;
NZUI:=function(n,S) return CoefficientsQadic(1024+n,2){[1..S]}; end;

#Schnittstelle zur Ausgabe
QY09:=function(PNEU)#packt PNEU[i] von [0,1,0,0] in 8.
  local RET;
  RET:=Iterated(PNEU,function(a,b) return a+a+b; end)+1;
  if RET=1 then RET:=10001; else
    if RET=2 then RET:=10002; else
      RET:=RET; fi; fi;
  return RET;
  end;

QY10:=function(HRES,S,GROUP)#ob HRES ein pcgs ist
  local RET,j;
  RET:=(HRES[1])^2 in GROUP;
  if RET=true then 
    for j in [2..S] do
      if not Commu(HRES[1],HRES[j]) in GROUP then RET:=false; #C
        fi; 
      od;
    fi;
#if S=2 and (HRES[1])^2=(HRES[1])^0 then RET:=false; fi;#wenn if, dann nur [[1],[2,2]...] in XSAMMEL rein, dafür längere Suche wenn G schon in XSAMMEL drin
#if S=3 and (HRES[1]*HRES[3])^2=(HRES[1])^0 then RET:=false; fi;
#if S=4 and (HRES[1]*HRES[2])^2=(HRES[1])^0 and (HRES[2]*HRES[3])^2<>(HRES[1])^0 then RET:=false; fi;
  return RET;
  end;

PcgsByPcSequenceNC11:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC07:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC12:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC15:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC14:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNCMI:=function(a,b) return PcgsByPcSequenceNC(a,b); end;

QY11:=function(HRES,S)#bestimmt PNEU aus HRES
  local PNEU,j,pcgs;
  pcgs:=PcgsByPcSequenceNC11(FamilyObj(HRES[1]),HRES);
  PNEU:=[QY09(ExponentsOfPcElement(pcgs,pcgs[1]^2))];#RP
  for j in [2..S] do
    Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]) )),2);#C
    od;
  return PNEU;
  end;

QY07:=function(S)
  local k,kk,W,H,i,r,ret,pcgs,MRES,HELF,NRES;
  HELF:=[1,2,4,8,16,32,64,128,256,512];
#-  Print(".\c");
  W:=WEGLI{[1..S]};
  H:=HRESEXT{[1..S]};
    WEGEVERGLEICHER([W,Reversed(H)],[W,Reversed(H)],0);
if W=WHALT then Error("halt da"); fi;
  k:=S+1;kk:=0;ret:=false;i:=0;
  if WEGEZAHL>0 then
    k:=1;
    while H[k]=LETZTEWEGELISTE[WEGEZAHL][2][k] do k:=k+1; od;
    k:=k-1;
#-    Print(k);
    i:=WEGEZAHL;
    while ret=false and i>0 and H{[1..k]}=LETZTEWEGELISTE[i][2]{[1..k]} do 
      MRES:=List([1..S],j->PcElementByExponentsNC(LRES,LETZTEWEGELISTE[i][4][j]));
#      Print("\n§ ",i," ",Size(LETZTEWEGELISTE)," ",MRES);
      kk:=1;
      while IsBound(H[kk]) and H[kk]=Reversed(MRES)[kk] and W[kk]=LETZTEWEGELISTE[i][1][kk] do kk:=kk+1; od;
      kk:=kk-1;
#-      Print(kk);
      if kk>k then ret:=true; fi;
      i:=i-1; od;
    i:=i+1;
    fi;
  if ret=false then
        pcgs:=PcgsByPcSequenceNC07(FamilyObj(LRES[1]),LRES);
        NRES:=List([1..S],i->ExponentsOfPcElement(pcgs,Reversed(H)[i]));
#    Add(LETZTEWEGELISTE,[W,H,k,NRES]); 
    WEGEZAHL:=WEGEZAHL+1;
    LETZTEWEGELISTE[WEGEZAHL]:=[W,H,k,NRES]; 
    k:=S; 
    fi;
      
#-  Print(ret,kk,k,S,i,k+2);
  return [ret,kk,k,S,i,k+2];
  end;
  

QY08:=function(ZEIGER,PNEU)#Position von PNEU in XSAMMEL
  local ISO;
  ISO:=PositionFirstComponent(ZEIGER,PNEU);
#  ISO:=PositionFirstComponentRepariert(ZEIGER,PNEU);
  if not IsBound(ZEIGER[ISO]) then ISO:=0; else
    if ZEIGER[ISO][1]<>PNEU then ISO:=0; fi; fi;
  return ISO;
  end;

RMAXSUCHREKURSIV:=function(C)#rekursiver Aufruf von RMAXSUCH
  local NMERK,XMERKMERK,HRESMERK,
        HRES0MERK,CLISTMERK,XMERKZAHLMERK,WEGPOSMERK,RM,
        WEGEZAHLMERK,WEGLIMERK,WEGEARRAYMERK,
        XMERKZAHLZIELMERK,FAKTMERK,LETZTEWEGELISTEMERK,
        HRESEXTMERK,HRESANFMERK;
  #STEP,XMERKZAHL noch offen
  NMERK:=n;
  XMERKMERK:=StructuralCopy(XMERK);
  HRESMERK:=List(HRES);
  HRES0MERK:=List(HRES0);
  CLISTMERK:=List(CLIST);
  XMERKZAHLMERK:=XMERKZAHL;
  RM:=List(R);
  WEGEZAHLMERK:=WEGEZAHL;
  WEGLIMERK:=StructuralCopy(WEGLI);
  WEGEARRAYMERK:=StructuralCopy(WEGEARRAY);
  XMERKZAHLZIELMERK:=XMERKZAHLZIEL;XMERKZAHLZIEL:=999999;
  FAKTMERK:=StructuralCopy(FAKT);
  LETZTEWEGELISTEMERK:=StructuralCopy(LETZTEWEGELISTE);
  HRESEXTMERK:=StructuralCopy(HRESEXT);
  HRESANFMERK:=StructuralCopy(HRESANF);
   RMAXSUCH(C);
  n:=NMERK;
  XMERK:=XMERKMERK;
  HRES:=HRESMERK;
  HRES0:=HRES0MERK;
  CLIST:=CLISTMERK;
  XMERKZAHL:=XMERKZAHLMERK;
  R:=RM;
  WEGEZAHL:=WEGEZAHLMERK;
  WEGLI:=WEGLIMERK;
  WEGEARRAY:=WEGEARRAYMERK;
  XMERKZAHLZIEL:=XMERKZAHLZIELMERK;
  FAKT:=FAKTMERK;
  LETZTEWEGELISTE:=LETZTEWEGELISTEMERK;
  HRESEXT:=HRESEXTMERK;
  HRESANF:=HRESANFMERK;
  end;

QY12:=function(C,S,nn) #bestimmt XMERK
  local i,j,jj,HI,ISO,elm,exp,fam,pcgs, p0,p1,PNEU,HRES1,APHI;
  if not(IsBound(XMERK[S])) then 
    XMERK[S]:=[]; ZEILE[S]:=0; S1[S]:=0; S2[S]:=1; fi;
  ZEILE[S]:=ZEILE[S]+1;SPALTE[S]:=0;
  for i in [nn+1..2*nn] do if FIXBIT=0 then
    SPALTE[S]:=SPALTE[S]+1;
    if SPALTE[S]=S2[S] then S2[S]:=2*S2[S]-1; fi;
    Add(HRES,CLIST[i],1);

    #ist QY10 mit pcgs zurueck:
    pcgs:=PcgsByPcSequenceNC12(FamilyObj(HRES[1]),HRES);
    PNEU:=[QY09(ExponentsOfPcElement(pcgs,pcgs[1]^2))];#RP
    for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]) )),2); od;#C

    ISO:=0;
    for j in XMERK[S] do if ISO=0 and PNEU=j[1] then ISO:=j; fi; od;
    if ISO=0 then
      if IsBound(XMERK[S][1]) then p0:=XMERK[S][1][2]; else
        p0:=PcgsByPcSequenceNC12(FamilyObj(HRES0[1]),HRES0{[Size(HRES0)-S+1..Size(HRES0)]});
        fi;
      APHI:=List([1..S],i->IZUN(ExponentsOfPcElement(p0,HRES[i])));
      if ZEILE[S]>1 and SPALTE[S]=1 and FIXFIX<>0 then
        FIXBIT:=FIXFIX;
        for jj in [1..Size(XMERK[S])] do
          p1:=XMERK[S][jj][2];
          HRES1:=List(APHI,i->PcElementByExponents(p1,NZUI(i,S)));

          pcgs:=PcgsByPcSequenceNC12(FamilyObj(HRES1[1]),HRES1);
          PNEU:=[QY09(ExponentsOfPcElement(pcgs,HRES1[1]^2))];
          for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]))),2); od; #C

          ISO:=[List(PNEU),pcgs];
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(pcgs,HRES0[Size(HRES0)-S+i]))));
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(p0,HRES1[i]))));
          Add(XMERK[S],ISO);
          if PBIT<>0 then Print("\n:",S," ",STEP,ISO); fi; STEP:=STEP+1;
          od;
        else 
          ISO:=[List(PNEU),pcgs];
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(pcgs,HRES0[Size(HRES0)-S+i]))));
          Add(ISO,APHI);
          Add(XMERK[S],ISO);
          if PBIT<>0 then Print("\n.",S," ",STEP,ISO,"\c"); fi; STEP:=STEP+1;
          fi;
      else if 2*nn=n and ZEILE[S]>1 and SPALTE[S]=1 then FIXBIT:=FIXFIX; fi;  
        fi;

    if 2*nn<n and ISO=XMERK[S][1] and (ZEILE[S]>1 or SPALTE[S]>=S1[S]) then
      QY12(C,S+1,2*nn);
      if FIXBIT<>0 and ZEILE[S]=1 then S1[S]:=S2[S]; FIXBIT:=0; fi;  
      fi;
    Remove(HRES,1); 
    fi; od;
  end;

QY14:=function() #bestimmt PMAX in XSAMMEL
  local S,SMAX,PMAX,P,i,imax,HRES1,PNEU,pcgs,pcgs1,p0,exp,p1,j;
  S:=Size(XMERK);
    PMAX:=[];
    for i in [1..Size(XMERK[S])] do
      if XMERK[S][i][1]>PMAX then imax:=i; PMAX:=XMERK[S][i][1]; fi;
      od;
    pcgs:=XMERK[S][imax][2];
    for i in [1..Size(XMERK[S])] do
      HRES1:=List([1..S],j->PcElementByExponents(pcgs,NZUI(XMERK[S][i][4][j],S)));
      pcgs1:=PcgsByPcSequenceNC14(FamilyObj(HRES1[1]^0),HRES1);
      PNEU:=[QY09(ExponentsOfPcElement(pcgs1,HRES1[1]^2))];
      for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs1, Commu(pcgs1[1], pcgs1[j]))),2); od; #C
      XMERK[S][i][2]:=pcgs1;
      XMERK[S][i][1]:=List(PNEU);
#W#      Unbind(XMERK[S][i][4]);
      od;
  end;

#das neue kuerzere QY15, jetzt nur letzte Stufe
QY15:=function(ZEIGER,XM) #packt XMERK in XSAMMEL rein
  local POS,i,ii,ZMERK,ZSIZE,HRES,HRES2,pcgs,pcgs2,STUFE;
  ZSIZE:=Size(ZEIGER);
  POS:=PositionFirstComponentRepariert(ZEIGER,XM[1][1]);
  Add(ZEIGER,StructuralCopy(XM[1]),POS);
  ZEIGER[POS][6]:=[];
  ZEIGER[POS][8]:=Size(XM);
        HRES2:=ZEIGER[POS][2];#alles aus XMISCH
        if HRESANF=[] then 
          HRESANF:=HRES2;
#- Print("*+*+*+*+*+* hier auf diesem Weg wird HANF gesetzt:",WEGLI); 
          fi;
        HRES:=HRESANF;STUFE:=Size(HRES);
        pcgs:=PcgsByPcSequenceNC15(FamilyObj(HRES[1]^0),List(HRES));
        pcgs2:=PcgsByPcSequenceNC15(FamilyObj(HRES2[1]^0),List(HRES2));
        ZEIGER[POS][11]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs,HRES2[j])));
        ZEIGER[POS][10]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs2,HRES[j])));
  ZEIGER[POS][14]:=ZSIZE+1;
  ZMERK:=ZEIGER[POS];
  COUNTER:=COUNTER+1;
  for i in [2..Size(XM)] do
    ii:=PositionFirstComponentRepariert(ZEIGER,XM[i][1]);
    Add(ZEIGER,StructuralCopy(XM[i]),ii);
    ZEIGER[ii][5]:=ZMERK;
    ZEIGER[ii][14]:=ZSIZE+i;
    od;
  end;
#QY16 und QY17 raus


#das neue
QY21:=function(HRESALT,S,nn,ZEIGER,PNEU) #HRES2->HRES
  local HRES,NICHDRIN,ISO,RET,RGL,INDEX1,GNR;
  HRES:=List(HRESALT);NICHDRIN:=0;RET:=ZEIGER;RGL:=[];GNR:=0;
  ISO:=QY08(ZEIGER,PNEU);
##Print("\nQY21:ISO=",ISO);
  if ISO=0 then
    if 2*nn<n then 
      Print("\nGruppe ",IdSmallGroup(Group(HRES))," fehlt noch \c");
      RMAXSUCHREKURSIV(Group(HRES));
      Print("\nGruppe ",IdSmallGroup(Group(HRES))," jetzt drin \c");
      fi;
      ISO:=QY08(ZEIGER,PNEU);
    fi;
  if ISO=0 then NICHDRIN:=-1; INDEX1:=0; else
    ISO:=ZEIGER[ISO];
    HRES:=List([1..S],i->PcElementByExponentsNC(HRES,NZUI(ISO[3][i],S)));
    INDEX1:=ISO[14];
    if IsBound(ISO[5]) then ISO:=ISO[5]; fi;
    if IsBound(ISO[12]) then #Print("\007");
      HRES:=List([1..S],i->PcElementByExponentsNC(HRES,NZUI(ISO[10][i],S)));
      ISO:=ISO[12];
      fi;
    RGL:=ISO[1];
    RET:=ISO[6];
    if IsBound(ISO[7]) then GNR:=ISO[7]; fi;
    fi;
  return [HRES,RET,NICHDRIN,RGL,INDEX1,GNR];
  end;
   
QY13:=function(C,S,nn,ZEIGER,AU)
  local i,j,ri,RC,PNEU,GR,HRESMERK,RDRIN,HRES0MERK,ZR,RBIT,ZR3MERK,rj,
  orbi,ORB,STAB,RBITNEU,WNUMB,WEGEFLAG;
#Print("?\c");
  RBIT:=0;RDRIN:=0;WNUMB:=WEGEZAHL;
  if HRES<>[] then GR:=Group(HRES); else GR:=Group(Identity(C)); fi;
  RC:=RightTransversal(C,GR);
#  RC:=CosetDecomposition(C,GR);RC:=List(RC,i->Set(i));
  if S<=AUZAHL then
    STAB:=Stabilizer(AU,Set(GR),OnSets);
    ORB:=Orbits(STAB,RC,OnSets);
    RC:=List(ORB,i->Representative(i));
#-Print("\n*****ORB*",S,ORB);
    else STAB:=0; fi;
  for rj in RC do if rj<>RC[1] and RDRIN>-1 then 
    if S<=AUZAHL then ri:=Representative(rj); else ri:=rj; fi;
    Add(HRES,ri,1);HRESEXT[S]:=ri;
#-if S<=AUZAHL and AUZAHL>0 then Print("\n*****ri**",ri," ",ri^2); fi;
    if S=1 then Print(".\c"); fi;
#W# if S=1 then Print("\n******",ri," ",ri^2); fi;
### if S=2 then Print("\n******",rj); fi;
    if QY10(HRES,S,GR) then
#-      if S=1 then Print("/",Size(RC)-Position(RC,rj)+1,"\c"); if DBIT=1 then Print("\n"); fi; fi;
#0#FAKT[S]:=Size(ORB[Position(RC,rj)]);
      PNEU:=QY11(HRES,S);
      R[S]:=List(PNEU);
      HRESMERK:=List(HRES);
      ZR:=QY21(HRES,S,nn,ZEIGER,PNEU);
      HRES:=List(ZR[1]);WEGLI[S]:=ZR[5];ZR3MERK:=ZR[3];
      if 2*nn<n then 
        RBIT:=QY13(C,S+1,2*nn,ZR[2],STAB); 
        else 
          if ZR3MERK<>0 then #RDRIN=0
            HRES0MERK:=List(HRES0);
            HRES0:=List(HRES);
            CLIST:=[Identity(C)];
            for i in Reversed(HRES0) do
              for j in [1..Size(CLIST)] do
                Add(CLIST,i*CLIST[j]);
                od; od;
            XMERK:=[];FIXBIT:=0;HRES:=[];STEP:=1;
            QY12(C,1,1);
            QY14();
            QY15(ZR[2],XMERK[S]);
            XMERKZAHL:=XMERKZAHL+1;
            ZR:=QY21(HRES0,S,nn,ZEIGER,PNEU);
            WEGLI[S]:=ZR[5];
            HRES0:=HRES0MERK;
#-            Print("*\c");
            fi;
#          if ZR3MERK=0 and WEGEZAHL=0 then RBIT:=0; else 
            RBIT:=QY07(S)[6];
#            fi;
          if DBIT=1 then
            Print("\n",Size(LETZTEWEGELISTE),RBIT<=S,HRESEXT{[1..S]}," ",ZR3MERK," ",RBIT," ",WEGLI{[1..S]}," ");
            if ZR3MERK=-1 then Print("DONNERWETTER "); fi;
            fi;
          if DDDDBIT=1 then RBIT:=999999; fi;
#0#          Print("\n^^^^",WEGLI," ",FAKT{[1..S]}," ",Size(STAB)," \c");
          fi; #(if 2*nn<n) 
      if RBIT<=S then RDRIN:=-1; fi;
      HRES:=List(HRESMERK);
      fi; #(if QY10(HRES,S,GR))
    Remove(HRES,1);
    fi; od; #(for ri in RC do if ri<>RC[1] and RDRIN>-1)
#  if WNUMBIT<>0 and WEGEZAHL>WNUMB+1 then WEGEZAHL:=WNUMB+1; fi;
#if S=1 then Print("\n****************",WEGEZAHL,WNUMB); fi;
  if S>1111 then
    for i in [WEGEZAHL,WEGEZAHL-1..WNUMB+2] do
      WEGEFLAG:=false;
      for j in [i-1,i-2..WNUMB+1] do if WEGEFLAG=false then
        if LETZTEWEGELISTE[i][1][S+1]=LETZTEWEGELISTE[j][1][S+1] then
          Remove(LETZTEWEGELISTE,i);
          WEGEZAHL:=WEGEZAHL-1;
          WEGEFLAG:=true;
          fi;
        fi; od;
      od;
    fi;
  return RBIT;
  end;

XFUELL:=function(XSAMMEL) #wenn [6] gleich <=== dann fuellt [7], falls [2] nicht int
  local i,S,POS;
  S:=Size(XSAMMEL);
  for i in [1..S] do 
    if IsBound(XSAMMEL[i][6]) then 
      POS:=i;
      if not(IsInt(XSAMMEL[POS][2])) then
        if Size(Group(XSAMMEL[POS][2]))<512 then
          XSAMMEL[POS][7]:=IdSmallGroup(Group(XSAMMEL[POS][2]));
          else
#Error("Wie kam inh=56092 hier rein? Weil f 2^Size(XSAMMEL[POS][1])<n gefehlt hat!");
#Error("Wie kam inh=56092 hier rein? Jetzt ist inh=",inh);
            XSAMMEL[POS][7]:=[512,inh];
            fi;
        else XFUELL(XSAMMEL[i][6]); fi;
#      Print(XSAMMEL[POS][7],"\c");
#      XSAMMEL[POS][8]:=0;
      fi;
#    XSAMMEL[POS][8]:=XSAMMEL[POS][8]+1;
    od;
  end;
#XFUELL(XSAMMEL);
XMISCH:=function(XSAMMEL,POSITION,STUFE)
  local i,ii,S,LEER,HRES,HRES2,pcgs,pcgs2;
  S:=Size(XSAMMEL);
  if not IsBound(RMERKER[STUFE]) then RMERKER[STUFE]:=[]; fi;

if n=nmax and 2^STUFE=n then
  for ii in [1..S] do 
    if 2^STUFE<=n then 
      i:=XSAMMEL[S-ii+1]; 
      if IsBound(i[6]) then
        if not IsBound(RMERKER[STUFE][i[7][2]]) then 
          RMERKER[STUFE][i[7][2]]:=i; 
          else Remove(XSAMMEL,S-ii+1); fi; 
        else Remove(XSAMMEL,S-ii+1); fi;
      fi;
    od;


else

  for ii in [1..S] do if 2^STUFE<=n then i:=XSAMMEL[S-ii+1]; if IsBound(i[6]) then
    if not IsBound(RMERKER[STUFE][i[7][2]]) then #nicht gleich [1] setzen!!!
      RMERKER[STUFE][i[7][2]]:=i; 
      i[10]:=List([1..STUFE],j->2^(j-1)); 
      i[11]:=List([1..STUFE],j->2^(j-1));
      else if not IsBound(i[12]) then
        i[12]:=RMERKER[STUFE][i[7][2]];
        HRES2:=i[2];
        HRES:=i[12][2];
        pcgs:=PcgsByPcSequenceNCMI(FamilyObj(HRES[1]^0),List(HRES));
        pcgs2:=PcgsByPcSequenceNCMI(FamilyObj(HRES2[1]^0),List(HRES2));
        i[11]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs,HRES2[j])));
        i[10]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs2,HRES[j])));
        fi; fi;
#    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ",
#      i[1]," ",i[8]," [",ii,"..",ii+i[5]-1,"] ",i[7][2]);
    if IsBound(i[12]) then 
#      Print(" *"); 
      else
        XMISCH(i[6],1,STUFE+1);
        fi;
    fi; fi; od;
fi;
  end;

XLEER:=function(XSAMMEL) #fuellt [7][8]
  local i,S;
  S:=Size(XSAMMEL);
  for i in [1..S] do if 2^Size(XSAMMEL[1][1])<=n then 
    if not(IsInt(XSAMMEL[i][2])) then LFDNR:=LFDNR+1; fi; 
    XSAMMEL[i][2]:=i;
    if IsBound(XSAMMEL[i][6]) then XLEER(XSAMMEL[i][6]); fi;
    fi; od;
  end;

RMAXSUCH:=function(C)
  local AU;
  n:=Size(C);
  if AUZAHL>0 then AU:=AutomorphismGroup(C); else AU:=0; fi;
  XMERK:=[];HRES:=[];STEP:=1;R:=[];WEGLI:=[];FAKT:=[];
  #  XSAMMEL:=[];
  XMERKZAHL:=0;WEGEZAHL:=0;
  WEGEARRAY:=[];LETZTEWEGELISTE:=[];HRESANF:=[];
  QY13(C,1,1,XSAMMEL,AU);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XFUELL***");
   XFUELL(XSAMMEL);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XMISCH***");
   RMERKER:=[];XMISCH(XSAMMEL,[],1);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XLEER***");
   XLEER(XSAMMEL);
#XSAMMELVIEWER0(XSAMMEL);
Print(" <",WEGEZAHL,"> ",XMERKZAHL);
  end;

ILIST:=[1,1];
QQQY:=function(n)
  local C;
  XMERKZAHLVEKTOR:=[];LETZTEWEGEZAHLVEKTOR:=[];
  if ILIST[1]=1 then ILIST:=[1..NumberSmallGroups(n)]; fi;
  for inh in ILIST do
Print("\n\ninh=",inh," \c");
    C:=SmallGroup(n,inh);RMAXSUCH(C);
Print("\n[",WEGEZAHL,"] ",XMERKZAHL);
    XMERKZAHLVEKTOR[inh]:=XMERKZAHL;
    LETZTEWEGEZAHLVEKTOR[inh]:=WEGEZAHL;
    od;
  Print("\n",Compacted(XMERKZAHLVEKTOR),COUNTER);
  Print("\n",Compacted(LETZTEWEGEZAHLVEKTOR));
  Print("\n");
  end;


#POS (nur bei)        Inhalt
#1                    PNEU
#2                    erst HRES dann ???Positionsindex???
#3                    klein phi
#4                    erst klein phi dann Unbound
#5   not IsBound(6)   kleiner Tunnel oder Unbound
#6                    Fortsetzung XSAMMEL
#7   IsBound([6])     IdSmallGroup
#8    "               Anzahl klein Phi hierher
#9    "               groß Phi
#10   "               Unbound, war mal [1,2,8,1] als Weg zu 
#11   "               groß Phi
#12   "               Unbound, Platz für groß Phi
#13   "               großer Tunnel
#14                   anstelle Index in XSAMMEL für WEGEBAUM[.]

UMKEHRLIST:=function(PNEU)
  return List(PNEU,function(i)
    if i=10002 then return 2; else
      if i=10001 then return 1; else 
        return i; fi; fi;
    end);#XSAMMELVIEWER3(XSAMMEL);

  end;


XSAMMELVIEWER:=function(XSAMMEL)
  local i;
  for i in XSAMMEL do if IsBound(i[6]) then 
#    Print(i[1],IdSmallGroup(Group(i[2])));
#    Print(IdSmallGroup(Group(i[2])));
    Print(i[7]);
    XSAMMELVIEWER(i[6]);
    fi; od;
  end;
#XSAMMELVIEWER(XSAMMEL);

XSAMMELVIEWER0:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  for i in XSAMMEL do  
    Print("\n",LEER{[1..2*Size(i[1])-2]});#die Einrückung
    Print("(",i[14],") ");#steht in Wegebaum dann
    Print(Size(i[1])," ");
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      if IsBound(i[5][7]) then 
        Print(i[5][7]," ::::");
        else Print("= ??????? ",i[5][10],i[5][11]);
        fi;
      Print(i[3],i[4]);
      else
      Print(i[3],i[4]);
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," "); 
            else Print("==-> ",i[12][2]," ");
            fi;
          else 
            if IsBound(i[7]) then 
              Print("= ",i[7]," "); 
Print("///",i[10],i[11]);
              else Print("= ??? ",i[10],i[11]);
              fi;
            fi;
        XSAMMELVIEWER0(i[6]);
        fi;
    od;
  end;

XSAMMELVIEWER1:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  if Size(XSAMMEL)>0 then for i in XSAMMEL{[Size(XSAMMEL)]} do  
    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die Einrückung
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," "); 
            else Print("===> ???");
            fi;
          else 
            if IsBound(i[7]) then 
              Print("<=== ",i[7]," "); 
              else Print("<=== ???");
              fi;
            fi;
        Print("(",i[14],") ");#steht in Wegebaum dann
        XSAMMELVIEWER1(i[6]);
        fi;
    od; fi;
  end;

XSAMMELVIEWER2:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  for i in XSAMMEL do  
    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die Einrückung
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," "); 
            else Print("===> ???");
            fi;
          else 
            if IsBound(i[7]) then 
              Print("<=== ",i[7]," "); 
              else Print("<=== ???");
              fi;
            fi;
        Print("(",i[14],") ");#steht in Wegebaum dann
        XSAMMELVIEWER2(i[6]);
        fi;
    od;
  end;

XSAMMELVIEWER3:=function(XSAMMEL)
  local i,ii,S,LEER,STUFE;
  S:=Size(XSAMMEL);LEER:="                  ";
  STUFE:=Size(XSAMMEL[1][1]);
  for ii in [1..S] do i:=XSAMMEL[ii]; if IsBound(i[6]) then
    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ");
    View(UMKEHRLIST(i[1]));
    Print(" ",i[8]," [",ii,"] ",Size(i[6])," ",i[7]);
    if IsBound(i[12]) then 
      Print(" *"); 
      else
        if IsBound(i[6][1]) then XSAMMELVIEWER3(i[6]); fi;
        fi;
    fi; od;
  end;
#RMERKER:=[];XSAMMELVIEWER3(XSAMMEL,1);Print("\n");PMERKER;

XSAMMELVIEWER4:=function(XSAMMEL)#neu aus 3 ohne *
  local i,ii,S,LEER,STUFE;
  S:=Size(XSAMMEL);LEER:="                  ";
  STUFE:=Size(XSAMMEL[1][1]);
  for ii in [1..S] do i:=XSAMMEL[ii]; if IsBound(i[6]) and not IsBound(i[12]) then 
    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ");
    View(UMKEHRLIST(i[1]));
    Print(" ",i[8]," [",ii,"] ",Size(i[6])," ",i[7]);
    if IsBound(i[12]) then 
      Print(" *"); 
      else
        if IsBound(i[6][1]) then LETZTERABZWEIG:=i[6]; XSAMMELVIEWER4(i[6]); fi;
        fi;
    fi; od;
  end;
#XSAMMELVIEWER4(XSAMMEL,[],1);Print("\n");

PARTFIND:=function(XSAMMEL,PART)
  local i,S,LEER,RBIT;
  S:=Size(XSAMMEL);RBIT:=0;
  for i in XSAMMEL do if RBIT=0 then
    if IsIdenticalObj(i,PART) then RBIT:=-1; fi;
#    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die Einrückung
#    Print(UMKEHRLIST(i[1])," ");#PNEU
#    Print(i[2]," ");
    if IsBound(i[5]) then 
#      Print(i[5][2]," "); 
#      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
#            Print("===> ",i[12][7]," "); 
#            else Print("===> ???");
            fi;
          else 
            if IsBound(i[7]) then 
#              Print("<=== ",i[7]," "); 
#              else Print("<=== ???");
              fi;
            fi;
#        Print("(",i[14],") ");#steht in Wegebaum dann
        if Size(i[1])<Size(PART[1]) then RBIT:=PARTFIND(i[6],PART); fi;
        if RBIT=-1 then Add(RMAX,UMKEHRLIST(i[1]),1); fi;
        fi;
    fi; od;
  return RBIT;
  end;

PARTZAHL:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);
  for i in XSAMMEL do
    PARTZ:=PARTZ+1;
    if IsBound(i[5]) then 
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            fi;
          else 
            if IsBound(i[7]) then 
              fi;
            fi;
        PARTZAHL(i[6]);
        fi;
    od;
  end;
#PARTZ:=0;PARTZAHL(XSAMMEL);PARTZ;

WEGEDISP:=function(WEG,ZEIGER,S)
  local PART,ZEIG;
  for PART in ZEIGER do if PART[14]=WEG[S] then
#-    Print("\n",UMKEHRLIST(PART[1]),PART[14]);
    ZEIG:=PART;
    if IsBound(ZEIG[5]) then ZEIG:=ZEIG[5]; fi;
#-    Print("-->",UMKEHRLIST(ZEIG[1]));
    if IsBound(ZEIG[12]) then ZEIG:=ZEIG[12]; fi;
#-    Print("==>",UMKEHRLIST(ZEIG[1]));
    if S<Size(WEG) then ZEIG:=WEGEDISP(WEG,ZEIG[6],S+1); fi;
    fi; od;
  return ZEIG;
  end;

T:=function(n)
  DisplayProfile();ClearProfile();
  XSAMMEL:=[];COUNTER:=0;LFDNR:=0;
  ILIST:=[1..1];QQQY(2);#1#
  ILIST:=[1..2];QQQY(4);#2#
  ILIST:=[2..5];QQQY(8);#3
  if n>8 then
   ILIST:=[2..4];QQQY(16);#4
   ILIST:=[10..14];QQQY(16);#4
   DisplayProfile();ClearProfile();
   if n>16 then
     ILIST:=[21..35];QQQY(32);#5
     ILIST:=[45..51];QQQY(32);#5
     DisplayProfile();ClearProfile();
     if n>32 then
       ILIST:=[192..245];QQQY(64);Print("\007");#6
       ILIST:=[260..267];QQQY(64);Print("\007");#6
       DisplayProfile();ClearProfile();
       fi;
     fi;
   fi;
 end;
 
#  RMAXSUCH(G);
#  PART:=WEGEDISP(WEGLI,XSAMMEL,1);;
ALLEWEGEDISP:=function(PART,ZEIGER,S)
  local ZEIG;
  for PART in ZEIGER do
    Print("\n",UMKEHRLIST(PART[1]),PART[14]);
    ZEIG:=PART;
    if IsBound(ZEIG[5]) then ZEIG:=ZEIG[5]; fi;
    Print("-->",UMKEHRLIST(ZEIG[1]));
    if IsBound(ZEIG[12]) then ZEIG:=ZEIG[12]; fi;
    Print("==>",UMKEHRLIST(ZEIG[1]));
    ZEIG:=ALLEWEGEDISP(PART,ZEIG[6],S+1);;
    od;
  return ZEIG;
  end;
  
GANZLOS:=function()
  local G;
  Exec("date");
  XSAMMEL:=[];#nur anfangs einmal
  XMERKZAHLZIEL:=99999;#45,24,77,5
  ILIST:=[56082..56092];QQQY(256);Print("\007");
  Exec("date");inh:=4444;Print("inh=",inh);XMERKZAHLZIEL:=5;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[ 256, 256, 256, 256, 256, 256, 256, 256, 255 ]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4442;Print("inh=",inh);XMERKZAHLZIEL:=77;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,2,1,256,256]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4432;Print("inh=",inh);XMERKZAHLZIEL:=24;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,256,255]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4431;Print("inh=",inh);XMERKZAHLZIEL:=45;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,1,1,256,255]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");
  SaveWorkspace("GAP_WORKSPACE_4431");
  end;
#AUZAHL:=4;GANZLOS();

WEGEVERGLEICHER:=function(WEG1,WEG2,PBIT)
  local S,HRES,T,PART,ZEIGER,LETZTELISTE,PHI,APP;
  S:=Size(WEG1[1]);
  LETZTELISTE:=[];
  ZEIGER:=XSAMMEL;LRES:=StructuralCopy(WEG1[2]);
  for T in [1..S] do for PART in ZEIGER do if PART[14]=WEG1[1][T] then
#    Add(LETZTELISTE,StructuralCopy(PART[3]));
LRES{[S-T+1..S]}:=List([1..T],i->PcElementByExponentsNC(LRES{[S-T+1..S]},NZUI(PART[3][i],T)));
    if IsBound(PART[5]) then 
      PART:=PART[5]; 
      fi;
#    Add(LETZTELISTE,StructuralCopy(PART[10]));
LRES{[S-T+1..S]}:=List([1..T],i->PcElementByExponentsNC(LRES{[S-T+1..S]},NZUI(PART[10][i],T)));
    if IsBound(PART[12]) then
      PART:=PART[12];
      fi;
    if IsBound(PART[6]) then ZEIGER:=PART[6]; fi;
    fi; od; od;
  return LRES;
  end;

SEPARATOR:=function()
  
  end;
  


ProfileFunctions([QY07,PositionSorted,PositionFirstComponent,
PositionFirstComponentRepariert,QY12,Size,Group,
StructuralCopy,PcElementByExponentsNC,PcgsByPcSequenceNC,
PcgsByPcSequenceNC11,
PcgsByPcSequenceNC07,
PcgsByPcSequenceNC12,
PcgsByPcSequenceNC15,
PcgsByPcSequenceNC14,
PcgsByPcSequenceNCMI,
ExponentsOfPcElement,RightTransversal,RightCosetsNC,
QY10,QY11,QY08,QY21,QY15,QY14,QY13,QY09,
XFUELL,XMISCH,XLEER,Commu,Stabilizer,Orbits,IZUN,NZUI,QY07,WEGEVERGLEICHER]);


#T(16);XSAMMELVIEWER2(XSAMMEL);
#1 [ 1 ] 1 <=== [ 2, 1 ] (1) 
#  2 [ 1, 1 ] 1 <=== [ 4, 2 ] (2) 
#    3 [ 3, 3, 3 ] 1 3 (2) 
#    3 [ 3, 1, 3 ] 2 6 (7) 
#    3 [ 4, 4, 4 ] 3 ===> [ 8, 2 ] (1) 
#    3 [ 4, 1, 1 ] 4 6 (5) 
#    3 [ 1, 3, 1 ] 5 6 (6) 
#    3 [ 1, 4, 4 ] 6 ===> [ 8, 3 ] (4) 
#    3 [ 1, 1, 1 ] 7 <=== [ 8, 5 ] (10) 
#      4 [ 3, 3, 3, 3 ] 1 12 (48) 
#      4 [ 3, 3, 3, 4 ] 2 11 (30) 
#      4 [ 3, 3, 3, 1 ] 3 78 (85) 
#      4 [ 3, 3, 3, 2 ] 4 90 (42) 
#      4 [ 3, 5, 3, 3 ] 5 52 (24) 
#      4 [ 3, 6, 3, 6 ] 6 52 (22) 
#      4 [ 3, 7, 3, 3 ] 7 52 (18) 
#      4 [ 3, 8, 3, 8 ] 8 52 (20) 
#      4 [ 3, 1, 3, 3 ] 9 64 (71) 
#      4 [ 3, 1, 3, 1 ] 10 64 (73) 
#      4 [ 4, 4, 4, 3 ] 11 ===> [ 16, 3 ] (29) 
#      4 [ 4, 4, 4, 4 ] 12 ===> [ 16, 10 ] (47) 
#      4 [ 4, 4, 4, 1 ] 13 78 (83) 
#      4 [ 4, 4, 4, 2 ] 14 90 (40) 
#      4 [ 4, 5, 5, 4 ] 15 52 (16) 
#      4 [ 4, 6, 6, 6 ] 16 52 (14) 
#      4 [ 4, 7, 7, 7 ] 17 52 (12) 
#      4 [ 4, 8, 8, 4 ] 18 52 (10) 
#      4 [ 4, 1, 1, 4 ] 19 64 (67) 
#      4 [ 4, 1, 1, 1 ] 20 64 (69) 
#      4 [ 5, 3, 5, 5 ] 21 52 (23) 
#      4 [ 5, 4, 4, 5 ] 22 52 (15) 
#      4 [ 5, 5, 5, 5 ] 23 56 (46) 
#      4 [ 5, 5, 6, 5 ] 24 55 (28) 
#      4 [ 5, 5, 1, 5 ] 25 76 (81) 
#      4 [ 5, 5, 2, 5 ] 26 86 (38) 
#      4 [ 5, 7, 5, 5 ] 27 54 (4) 
#      4 [ 5, 8, 8, 5 ] 28 54 (8) 
#      4 [ 5, 1, 5, 5 ] 29 72 (57) 
#      4 [ 5, 1, 1, 5 ] 30 72 (65) 
#      4 [ 6, 3, 6, 3 ] 31 52 (21) 
#      4 [ 6, 4, 4, 4 ] 32 52 (13) 
#      4 [ 6, 6, 5, 6 ] 33 55 (27) 
#      4 [ 6, 6, 6, 6 ] 34 56 (45) 
#      4 [ 6, 6, 1, 6 ] 35 76 (79) 
#      4 [ 6, 6, 2, 6 ] 36 86 (36) 
#      4 [ 6, 7, 7, 7 ] 37 54 (6) 
#      4 [ 6, 8, 6, 8 ] 38 54 (2) 
#      4 [ 6, 1, 6, 1 ] 39 72 (55) 
#      4 [ 6, 1, 1, 1 ] 40 72 (63) 
#      4 [ 7, 3, 7, 7 ] 41 52 (17) 
#      4 [ 7, 4, 4, 4 ] 42 52 (11) 
#      4 [ 7, 5, 7, 7 ] 43 54 (3) 
#      4 [ 7, 6, 6, 6 ] 44 54 (5) 
#      4 [ 7, 7, 7, 7 ] 45 56 (44) 
#      4 [ 7, 7, 8, 8 ] 46 55 (26) 
#      4 [ 7, 7, 1, 1 ] 47 76 (77) 
#      4 [ 7, 7, 2, 2 ] 48 86 (34) 
#      4 [ 7, 1, 7, 7 ] 49 72 (53) 
#      4 [ 7, 1, 1, 1 ] 50 72 (59) 
#      4 [ 8, 3, 8, 3 ] 51 52 (19) 
#      4 [ 8, 4, 4, 8 ] 52 ===> [ 16, 3 ] (9) 
#      4 [ 8, 5, 5, 8 ] 53 54 (7) 
#      4 [ 8, 6, 8, 6 ] 54 ===> [ 16, 3 ] (1) 
#      4 [ 8, 8, 7, 7 ] 55 ===> [ 16, 3 ] (25) 
#      4 [ 8, 8, 8, 8 ] 56 ===> [ 16, 10 ] (43) 
#      4 [ 8, 8, 1, 1 ] 57 76 (75) 
#      4 [ 8, 8, 2, 2 ] 58 86 (32) 
#      4 [ 8, 1, 8, 1 ] 59 72 (51) 
#      4 [ 8, 1, 1, 8 ] 60 72 (61) 
#      4 [ 1, 3, 1, 3 ] 61 64 (72) 
#      4 [ 1, 3, 1, 1 ] 62 64 (70) 
#      4 [ 1, 4, 4, 4 ] 63 64 (68) 
#      4 [ 1, 4, 4, 1 ] 64 ===> [ 16, 11 ] (66) 
#      4 [ 1, 5, 5, 1 ] 65 72 (64) 
#      4 [ 1, 5, 1, 1 ] 66 72 (56) 
#      4 [ 1, 6, 6, 6 ] 67 72 (62) 
#      4 [ 1, 6, 1, 6 ] 68 72 (54) 
#      4 [ 1, 7, 7, 7 ] 69 72 (58) 
#      4 [ 1, 7, 1, 1 ] 70 72 (52) 
#      4 [ 1, 8, 8, 1 ] 71 72 (60) 
#      4 [ 1, 8, 1, 8 ] 72 ===> [ 16, 11 ] (50) 
#      4 [ 1, 1, 5, 1 ] 73 76 (80) 
#      4 [ 1, 1, 6, 1 ] 74 76 (78) 
#      4 [ 1, 1, 7, 7 ] 75 76 (76) 
#      4 [ 1, 1, 8, 8 ] 76 ===> [ 16, 11 ] (74) 
#      4 [ 1, 1, 1, 3 ] 77 78 (84) 
#      4 [ 1, 1, 1, 4 ] 78 ===> [ 16, 11 ] (82) 
#      4 [ 1, 1, 1, 1 ] 79 <=== [ 16, 14 ] (92) 
#      4 [ 1, 1, 1, 2 ] 80 91 (91) 
#      4 [ 1, 1, 2, 1 ] 81 88 (87) 
#      4 [ 1, 1, 2, 2 ] 82 88 (89) 
#      4 [ 2, 2, 5, 2 ] 83 86 (37) 
#      4 [ 2, 2, 6, 2 ] 84 86 (35) 
#      4 [ 2, 2, 7, 7 ] 85 86 (33) 
#      4 [ 2, 2, 8, 8 ] 86 ===> [ 16, 3 ] (31) 
#      4 [ 2, 2, 1, 1 ] 87 88 (88) 
#      4 [ 2, 2, 1, 2 ] 88 ===> [ 16, 11 ] (86) 
#      4 [ 2, 2, 2, 3 ] 89 90 (41) 
#      4 [ 2, 2, 2, 4 ] 90 ===> [ 16, 3 ] (39) 
#      4 [ 2, 2, 2, 1 ] 91 ===> [ 16, 11 ] (90) 
#      4 [ 2, 2, 2, 2 ] 92 ===> [ 16, 10 ] (49) 
#    3 [ 1, 1, 2 ] 8 9 (9) 
#    3 [ 2, 2, 1 ] 9 ===> [ 8, 3 ] (8) 
#    3 [ 2, 2, 2 ] 10 ===> [ 8, 2 ] (3) 
#  2 [ 2, 2 ] 2 <=== [ 4, 1 ] (1) 
#    3 [ 1, 1, 1 ] 1 <=== [ 8, 3 ] (3) 
#      4 [ 1, 1, 1, 1 ] 1 5 (4) 
#      4 [ 1, 1, 1, 2 ] 2 5 (3) 
#      4 [ 1, 1, 2, 1 ] 3 5 (2) 
#      4 [ 1, 1, 2, 2 ] 4 8 (8) 
#      4 [ 2, 2, 1, 1 ] 5 ===> [ 16, 11 ] (1) 
#      4 [ 2, 2, 1, 2 ] 6 8 (7) 
#      4 [ 2, 2, 2, 1 ] 7 8 (6) 
#      4 [ 2, 2, 2, 2 ] 8 ===> [ 16, 13 ] (5) 
#    3 [ 1, 1, 2 ] 2 3 (2) 
#    3 [ 2, 2, 1 ] 3 <=== [ 8, 2 ] (1) 
#      4 [ 7, 7, 7, 7 ] 1 6 (8) 
#      4 [ 7, 7, 8, 8 ] 2 5 (2) 
#      4 [ 7, 7, 1, 1 ] 3 10 (6) 
#      4 [ 7, 7, 2, 2 ] 4 16 (12) 
#      4 [ 8, 8, 7, 7 ] 5 <=== [ 16, 2 ] (1) 
#      4 [ 8, 8, 8, 8 ] 6 ===> [ 16, 4 ] (7) 
#      4 [ 8, 8, 1, 1 ] 7 10 (4) 
#      4 [ 8, 8, 2, 2 ] 8 16 (10) 
#      4 [ 1, 1, 7, 7 ] 9 10 (5) 
#      4 [ 1, 1, 8, 8 ] 10 <=== [ 16, 3 ] (3) 
#      4 [ 1, 1, 1, 1 ] 11 <=== [ 16, 11 ] (15) 
#      4 [ 1, 1, 1, 2 ] 12 19 (20) 
#      4 [ 1, 1, 2, 1 ] 13 18 (18) 
#      4 [ 1, 1, 2, 2 ] 14 17 (14) 
#      4 [ 2, 2, 7, 7 ] 15 16 (11) 
#      4 [ 2, 2, 8, 8 ] 16 <=== [ 16, 4 ] (9) 
#      4 [ 2, 2, 1, 1 ] 17 <=== [ 16, 10 ] (13) 
#      4 [ 2, 2, 1, 2 ] 18 ===> [ 16, 13 ] (17) 
#      4 [ 2, 2, 2, 1 ] 19 ===> [ 16, 13 ] (19) 
#      4 [ 2, 2, 2, 2 ] 20 ===> [ 16, 12 ] (16) 
#    3 [ 2, 2, 2 ] 4 <=== [ 8, 4 ] (4) 
#      4 [ 1, 1, 1, 1 ] 1 5 (8) 
#      4 [ 1, 1, 1, 2 ] 2 5 (7) 
#      4 [ 1, 1, 2, 1 ] 3 5 (6) 
#      4 [ 1, 1, 2, 2 ] 4 8 (4) 
#      4 [ 2, 2, 1, 1 ] 5 <=== [ 16, 13 ] (5) 
#      4 [ 2, 2, 1, 2 ] 6 8 (3) 
#      4 [ 2, 2, 2, 1 ] 7 8 (2) 
#      4 [ 2, 2, 2, 2 ] 8 <=== [ 16, 12 ] (1) 

#T(32);XSAMMELVIEWER3(XSAMMEL);
# 1 [ 1 ] 1 [1] 2 [ 2, 1 ]
#   2 [ 1, 1 ] 1 [1] 10 [ 4, 2 ]
#     3 [ 4, 4, 4 ] 2 [3] 0 [ 8, 2 ] *
#     3 [ 1, 4, 4 ] 4 [6] 0 [ 8, 3 ] *
#     3 [ 1, 1, 1 ] 1 [7] 92 [ 8, 5 ]
#       4 [ 4, 4, 4, 3 ] 2 [11] 0 [ 16, 3 ] *
#       4 [ 4, 4, 4, 4 ] 2 [12] 0 [ 16, 10 ] *
#       4 [ 8, 4, 4, 8 ] 16 [52] 0 [ 16, 3 ] *
#       4 [ 8, 6, 8, 6 ] 8 [54] 0 [ 16, 3 ] *
#       4 [ 8, 8, 7, 7 ] 4 [55] 0 [ 16, 3 ] *
#       4 [ 8, 8, 8, 8 ] 4 [56] 0 [ 16, 10 ] *
#       4 [ 1, 4, 4, 1 ] 8 [64] 0 [ 16, 11 ] *
#       4 [ 1, 8, 1, 8 ] 16 [72] 0 [ 16, 11 ] *
#       4 [ 1, 1, 8, 8 ] 8 [76] 0 [ 16, 11 ] *
#       4 [ 1, 1, 1, 4 ] 4 [78] 0 [ 16, 11 ] *
#       4 [ 1, 1, 1, 1 ] 1 [79] 1696 [ 16, 14 ]
#         5 [ 4, 4, 4, 3, 4 ] 4 [94] 0 [ 32, 22 ] *
#         5 [ 4, 4, 4, 4, 3 ] 2 [97] 0 [ 32, 22 ] *
#         5 [ 4, 4, 4, 4, 4 ] 2 [98] 0 [ 32, 45 ] *
#         5 [ 8, 4, 4, 8, 8 ] 32 [467] 0 [ 32, 22 ] *
#         5 [ 8, 6, 8, 6, 8 ] 16 [475] 0 [ 32, 22 ] *
#         5 [ 8, 8, 7, 7, 8 ] 8 [478] 0 [ 32, 22 ] *
#         5 [ 8, 8, 8, 8, 4 ] 16 [482] 0 [ 32, 22 ] *
#         5 [ 8, 8, 8, 8, 6 ] 8 [484] 0 [ 32, 22 ] *
#         5 [ 8, 8, 8, 8, 7 ] 4 [485] 0 [ 32, 22 ] *
#         5 [ 8, 8, 8, 8, 8 ] 4 [486] 0 [ 32, 45 ] *
#         5 [ 16, 4, 4, 16, 16 ] 64 [1203] 0 [ 32, 22 ] *
#         5 [ 16, 8, 16, 8, 16 ] 128 [1219] 0 [ 32, 22 ] *
#         5 [ 16, 12, 16, 16, 12 ] 64 [1235] 0 [ 32, 22 ] *
#         5 [ 16, 14, 16, 16, 14 ] 32 [1243] 0 [ 32, 22 ] *
#         5 [ 16, 16, 8, 8, 16 ] 64 [1248] 0 [ 32, 22 ] *
#         5 [ 16, 16, 12, 16, 12 ] 32 [1252] 0 [ 32, 22 ] *
#         5 [ 16, 16, 15, 16, 15 ] 16 [1254] 0 [ 32, 22 ] *
#         5 [ 16, 16, 16, 4, 4 ] 32 [1258] 0 [ 32, 22 ] *
#         5 [ 16, 16, 16, 14, 14 ] 16 [1260] 0 [ 32, 22 ] *
#         5 [ 16, 16, 16, 15, 15 ] 8 [1261] 0 [ 32, 22 ] *
#         5 [ 16, 16, 16, 16, 16 ] 8 [1262] 0 [ 32, 45 ] *
#         5 [ 1, 4, 4, 16, 16 ] 64 [1316] 0 [ 32, 27 ] *
#         5 [ 1, 4, 4, 1, 8 ] 32 [1319] 0 [ 32, 27 ] *
#         5 [ 1, 4, 4, 1, 1 ] 16 [1320] 0 [ 32, 46 ] *
#         5 [ 1, 8, 16, 9, 1 ] 128 [1380] 0 [ 32, 27 ] *
#         5 [ 1, 8, 1, 8, 6 ] 64 [1382] 0 [ 32, 27 ] *
#         5 [ 1, 8, 1, 8, 1 ] 32 [1384] 0 [ 32, 46 ] *
#         5 [ 1, 16, 12, 1, 5 ] 256 [1504] 0 [ 32, 27 ] *
#         5 [ 1, 16, 1, 14, 3 ] 128 [1510] 0 [ 32, 27 ] *
#         5 [ 1, 16, 1, 1, 16 ] 64 [1512] 0 [ 32, 46 ] *
#         5 [ 1, 1, 8, 8, 1 ] 16 [1527] 0 [ 32, 46 ] *
#         5 [ 1, 1, 16, 1, 16 ] 32 [1559] 0 [ 32, 46 ] *
#         5 [ 1, 1, 1, 4, 1 ] 8 [1567] 0 [ 32, 46 ] *
#         5 [ 1, 1, 1, 16, 16 ] 16 [1576] 0 [ 32, 46 ] *
#         5 [ 1, 1, 1, 1, 4 ] 4 [1578] 0 [ 32, 46 ] *
#         5 [ 1, 1, 1, 1, 8 ] 8 [1582] 0 [ 32, 46 ] *
#         5 [ 1, 1, 1, 1, 1 ] 1 [1583] 0 [ 32, 51 ]
#         5 [ 2, 2, 8, 8, 1 ] 32 [1619] 0 [ 32, 27 ] *
#         5 [ 2, 2, 8, 8, 2 ] 16 [1620] 0 [ 32, 22 ] *
#         5 [ 2, 2, 16, 1, 15 ] 64 [1651] 0 [ 32, 27 ] *
#         5 [ 2, 2, 16, 2, 16 ] 32 [1652] 0 [ 32, 22 ] *
#         5 [ 2, 2, 1, 16, 15 ] 32 [1660] 0 [ 32, 27 ] *
#         5 [ 2, 2, 1, 2, 6 ] 16 [1666] 0 [ 32, 27 ] *
#         5 [ 2, 2, 1, 2, 2 ] 8 [1668] 0 [ 32, 46 ] *
#         5 [ 2, 2, 2, 4, 1 ] 16 [1675] 0 [ 32, 27 ] *
#         5 [ 2, 2, 2, 4, 2 ] 8 [1676] 0 [ 32, 22 ] *
#         5 [ 2, 2, 2, 16, 16 ] 16 [1684] 0 [ 32, 22 ] *
#         5 [ 2, 2, 2, 1, 4 ] 8 [1686] 0 [ 32, 27 ] *
#         5 [ 2, 2, 2, 1, 2 ] 4 [1688] 0 [ 32, 46 ] *
#         5 [ 2, 2, 2, 2, 4 ] 4 [1690] 0 [ 32, 22 ] *
#         5 [ 2, 2, 2, 2, 8 ] 8 [1694] 0 [ 32, 22 ] *
#         5 [ 2, 2, 2, 2, 1 ] 2 [1695] 0 [ 32, 46 ] *
#         5 [ 2, 2, 2, 2, 2 ] 1 [1696] 0 [ 32, 45 ] *
#       4 [ 2, 2, 8, 8 ] 8 [86] 0 [ 16, 3 ] *
#       4 [ 2, 2, 1, 2 ] 4 [88] 0 [ 16, 11 ] *
#       4 [ 2, 2, 2, 4 ] 4 [90] 0 [ 16, 3 ] *
#       4 [ 2, 2, 2, 1 ] 2 [91] 0 [ 16, 11 ] *
#       4 [ 2, 2, 2, 2 ] 1 [92] 0 [ 16, 10 ] *
#     3 [ 2, 2, 1 ] 2 [9] 0 [ 8, 3 ] *
#     3 [ 2, 2, 2 ] 1 [10] 0 [ 8, 2 ] *
#   2 [ 2, 2 ] 1 [2] 4 [ 4, 1 ]
#     3 [ 1, 1, 1 ] 1 [1] 8 [ 8, 3 ]
#       4 [ 2, 2, 1, 1 ] 4 [5] 0 [ 16, 11 ] *
#       4 [ 2, 2, 2, 2 ] 4 [8] 0 [ 16, 13 ] *
#     3 [ 2, 2, 1 ] 2 [3] 20 [ 8, 2 ]
#       4 [ 8, 8, 7, 7 ] 2 [5] 64 [ 16, 2 ]
#         5 [ 8, 8, 7, 7, 8 ] 4 [18] 0 [ 32, 26 ] *
#         5 [ 8, 8, 8, 8, 7 ] 2 [21] 0 [ 32, 32 ] *
#         5 [ 8, 8, 8, 8, 8 ] 2 [22] 0 [ 32, 35 ] *
#         5 [ 1, 1, 8, 8, 8 ] 4 [38] 0 [ 32, 25 ] *
#         5 [ 1, 1, 8, 8, 1 ] 4 [39] 0 [ 32, 31 ] *
#         5 [ 1, 1, 1, 1, 8 ] 4 [42] 0 [ 32, 25 ] *
#         5 [ 1, 1, 1, 1, 1 ] 1 [43] 0 [ 32, 34 ] *
#         5 [ 2, 2, 8, 8, 7 ] 8 [53] 0 [ 32, 24 ] *
#         5 [ 2, 2, 8, 8, 8 ] 4 [54] 0 [ 32, 32 ] *
#         5 [ 2, 2, 8, 8, 1 ] 8 [55] 0 [ 32, 33 ] *
#         5 [ 2, 2, 8, 8, 2 ] 4 [56] 0 [ 32, 26 ] *
#         5 [ 2, 2, 1, 1, 7 ] 4 [57] 0 [ 32, 21 ] *
#         5 [ 2, 2, 1, 1, 8 ] 4 [58] 0 [ 32, 24 ] *
#         5 [ 2, 2, 1, 1, 2 ] 4 [60] 0 [ 32, 25 ] *
#         5 [ 2, 2, 2, 2, 8 ] 4 [62] 0 [ 32, 26 ] *
#         5 [ 2, 2, 2, 2, 1 ] 2 [63] 0 [ 32, 31 ] *
#         5 [ 2, 2, 2, 2, 2 ] 1 [64] 0 [ 32, 35 ] *
#       4 [ 8, 8, 8, 8 ] 2 [6] 0 [ 16, 4 ] *
#       4 [ 1, 1, 8, 8 ] 4 [10] 64 [ 16, 3 ]
#         5 [ 1, 1, 7, 7, 7 ] 4 [33] 0 [ 32, 30 ] *
#         5 [ 1, 1, 7, 7, 8 ] 4 [34] 0 [ 32, 30 ] *
#         5 [ 1, 1, 8, 8, 7 ] 4 [37] 0 [ 32, 25 ] *
#         5 [ 1, 1, 8, 8, 8 ] 4 [38] 0 [ 32, 31 ] *
#         5 [ 1, 1, 1, 1, 1 ] 4 [43] 0 [ 32, 27 ] *
#         5 [ 2, 2, 7, 7, 7 ] 4 [49] 0 [ 32, 33 ] *
#         5 [ 2, 2, 7, 7, 8 ] 4 [50] 0 [ 32, 24 ] *
#         5 [ 2, 2, 8, 8, 7 ] 4 [53] 0 [ 32, 33 ] *
#         5 [ 2, 2, 8, 8, 8 ] 4 [54] 0 [ 32, 29 ] *
#         5 [ 2, 2, 8, 8, 1 ] 4 [55] 0 [ 32, 28 ] *
#         5 [ 2, 2, 1, 1, 7 ] 4 [57] 0 [ 32, 30 ] *
#         5 [ 2, 2, 1, 1, 8 ] 4 [58] 0 [ 32, 22 ] *
#         5 [ 2, 2, 1, 1, 1 ] 4 [59] 0 [ 32, 28 ] *
#         5 [ 2, 2, 1, 1, 2 ] 4 [60] 0 [ 32, 25 ] *
#         5 [ 2, 2, 2, 2, 1 ] 4 [63] 0 [ 32, 31 ] *
#         5 [ 2, 2, 2, 2, 2 ] 4 [64] 0 [ 32, 29 ] *
#       4 [ 1, 1, 1, 1 ] 1 [11] 72 [ 16, 11 ]
#         5 [ 8, 8, 8, 8, 8 ] 8 [22] 0 [ 32, 25 ] *
#         5 [ 1, 1, 8, 8, 1 ] 8 [39] 0 [ 32, 27 ]
#         5 [ 1, 1, 1, 1, 8 ] 4 [42] 0 [ 32, 34 ]
#         5 [ 2, 2, 8, 8, 1 ] 16 [59] 0 [ 32, 28 ] *
#         5 [ 2, 2, 8, 8, 2 ] 8 [60] 0 [ 32, 30 ] *
#         5 [ 2, 2, 1, 1, 8 ] 8 [62] 0 [ 32, 28 ] *
#         5 [ 2, 2, 1, 1, 1 ] 4 [63] 0 [ 32, 46 ] *
#         5 [ 2, 2, 2, 1, 2 ] 8 [68] 0 [ 32, 49 ] *
#         5 [ 2, 2, 2, 2, 8 ] 4 [70] 0 [ 32, 31 ] *
#         5 [ 2, 2, 2, 2, 2 ] 4 [72] 0 [ 32, 48 ] *
#       4 [ 2, 2, 8, 8 ] 4 [16] 64 [ 16, 4 ]
#         5 [ 1, 1, 7, 7, 7 ] 4 [33] 0 [ 32, 24 ] *
#         5 [ 1, 1, 7, 7, 8 ] 4 [34] 0 [ 32, 33 ] *
#         5 [ 1, 1, 8, 8, 7 ] 4 [37] 0 [ 32, 33 ]
#         5 [ 1, 1, 8, 8, 8 ] 4 [38] 0 [ 32, 29 ] *
#         5 [ 1, 1, 1, 1, 1 ] 4 [43] 0 [ 32, 28 ] *
#         5 [ 2, 2, 7, 7, 7 ] 4 [49] 0 [ 32, 32 ] *
#         5 [ 2, 2, 7, 7, 8 ] 4 [50] 0 [ 32, 32 ] *
#         5 [ 2, 2, 7, 7, 1 ] 4 [51] 0 [ 32, 30 ] *
#         5 [ 2, 2, 8, 8, 7 ] 4 [53] 0 [ 32, 32 ]
#         5 [ 2, 2, 8, 8, 8 ] 4 [54] 0 [ 32, 26 ] *
#         5 [ 2, 2, 1, 1, 7 ] 4 [57] 0 [ 32, 30 ] *
#         5 [ 2, 2, 1, 1, 8 ] 4 [58] 0 [ 32, 23 ] *
#         5 [ 2, 2, 1, 1, 1 ] 4 [59] 0 [ 32, 25 ] *
#         5 [ 2, 2, 1, 1, 2 ] 4 [60] 0 [ 32, 29 ] *
#         5 [ 2, 2, 2, 2, 1 ] 4 [63] 0 [ 32, 29 ] *
#         5 [ 2, 2, 2, 2, 2 ] 4 [64] 0 [ 32, 35 ] *
#       4 [ 2, 2, 1, 1 ] 2 [17] 184 [ 16, 10 ]
#         5 [ 8, 8, 7, 7, 7 ] 2 [17] 0 [ 32, 21 ] *
#         5 [ 8, 8, 7, 7, 8 ] 2 [18] 0 [ 32, 24 ] *
#         5 [ 8, 8, 8, 8, 7 ] 2 [21] 0 [ 32, 24 ] *
#         5 [ 8, 8, 8, 8, 8 ] 2 [22] 0 [ 32, 23 ] *
#         5 [ 14, 14, 13, 13, 13 ] 4 [81] 0 [ 32, 21 ]
#         5 [ 14, 14, 13, 14, 14 ] 4 [82] 0 [ 32, 24 ] *
#         5 [ 14, 14, 14, 13, 13 ] 4 [85] 0 [ 32, 24 ]
#         5 [ 14, 14, 14, 14, 14 ] 4 [86] 0 [ 32, 23 ] *
#         5 [ 1, 1, 8, 8, 8 ] 4 [102] 0 [ 32, 22 ] *
#         5 [ 1, 1, 8, 8, 1 ] 4 [103] 0 [ 32, 28 ] *
#         5 [ 1, 1, 14, 14, 14 ] 8 [118] 0 [ 32, 22 ]
#         5 [ 1, 1, 14, 1, 1 ] 8 [119] 0 [ 32, 28 ] *
#         5 [ 1, 1, 1, 14, 14 ] 8 [124] 0 [ 32, 28 ] *
#         5 [ 1, 1, 1, 1, 8 ] 4 [126] 0 [ 32, 28 ]
#         5 [ 1, 1, 1, 1, 1 ] 1 [127] 0 [ 32, 46 ]
#         5 [ 2, 2, 8, 8, 7 ] 8 [145] 0 [ 32, 30 ] *
#         5 [ 2, 2, 8, 8, 8 ] 4 [146] 0 [ 32, 23 ] *
#         5 [ 2, 2, 8, 8, 1 ] 8 [147] 0 [ 32, 25 ] *
#         5 [ 2, 2, 8, 8, 2 ] 4 [148] 0 [ 32, 29 ] *
#         5 [ 2, 2, 14, 13, 13 ] 16 [161] 0 [ 32, 30 ]
#         5 [ 2, 2, 14, 14, 14 ] 8 [162] 0 [ 32, 23 ]
#         5 [ 2, 2, 14, 1, 1 ] 16 [163] 0 [ 32, 25 ] *
#         5 [ 2, 2, 14, 2, 2 ] 8 [164] 0 [ 32, 29 ] *
#         5 [ 2, 2, 1, 14, 14 ] 16 [168] 0 [ 32, 25 ] *
#         5 [ 2, 2, 1, 1, 8 ] 8 [170] 0 [ 32, 25 ]
#         5 [ 2, 2, 1, 1, 1 ] 2 [171] 0 [ 32, 45 ]
#         5 [ 2, 2, 1, 1, 2 ] 2 [172] 0 [ 32, 48 ] *
#         5 [ 2, 2, 1, 2, 2 ] 4 [174] 0 [ 32, 48 ] *
#         5 [ 2, 2, 2, 14, 14 ] 8 [178] 0 [ 32, 29 ] *
#         5 [ 2, 2, 2, 1, 2 ] 4 [180] 0 [ 32, 48 ] *
#         5 [ 2, 2, 2, 2, 8 ] 4 [182] 0 [ 32, 29 ] *
#         5 [ 2, 2, 2, 2, 1 ] 2 [183] 0 [ 32, 48 ] *
#         5 [ 2, 2, 2, 2, 2 ] 1 [184] 0 [ 32, 47 ] *
#       4 [ 2, 2, 1, 2 ] 2 [18] 0 [ 16, 13 ] *
#       4 [ 2, 2, 2, 1 ] 2 [19] 0 [ 16, 13 ] *
#       4 [ 2, 2, 2, 2 ] 1 [20] 0 [ 16, 12 ] *
#     3 [ 2, 2, 2 ] 1 [4] 8 [ 8, 4 ]
#       4 [ 2, 2, 1, 1 ] 4 [5] 16 [ 16, 13 ]
#         5 [ 2, 2, 1, 1, 2 ] 4 [10] 0 [ 32, 49 ]
#         5 [ 2, 2, 2, 2, 1 ] 8 [15] 0 [ 32, 48 ] *
#         5 [ 2, 2, 2, 2, 2 ] 4 [16] 0 [ 32, 50 ] *
#       4 [ 2, 2, 2, 2 ] 4 [8] 72 [ 16, 12 ]
#         5 [ 16, 16, 16, 16, 15 ] 8 [22] 0 [ 32, 26 ]
#         5 [ 1, 1, 16, 1, 15 ] 8 [39] 0 [ 32, 31 ] *
#         5 [ 1, 1, 1, 16, 15 ] 4 [42] 0 [ 32, 31 ]
#         5 [ 2, 2, 16, 1, 16 ] 16 [59] 0 [ 32, 29 ] *
#         5 [ 2, 2, 16, 2, 15 ] 8 [60] 0 [ 32, 35 ] *
#         5 [ 2, 2, 1, 16, 16 ] 8 [62] 0 [ 32, 29 ]
#         5 [ 2, 2, 1, 1, 1 ] 4 [63] 0 [ 32, 48 ]
#         5 [ 2, 2, 2, 16, 15 ] 4 [68] 0 [ 32, 35 ]
#         5 [ 2, 2, 2, 2, 1 ] 4 [71] 0 [ 32, 47 ]
#         5 [ 2, 2, 2, 2, 2 ] 8 [72] 0 [ 32, 50 ]

#T(64);XSAMMELVIEWER4(XSAMMEL);
# 1 [ 1 ] 1 [1] 2 [ 2, 1 ]
#   2 [ 1, 1 ] 1 [1] 10 [ 4, 2 ]
#     3 [ 1, 1, 1 ] 1 [7] 92 [ 8, 5 ]
#       4 [ 1, 1, 1, 1 ] 1 [79] 1696 [ 16, 14 ]
#         5 [ 1, 1, 1, 1, 1 ] 1 [1583] 33512 [ 32, 51 ]
#           6 [ 1, 1, 1, 1, 1, 1 ] 1 [32431] 0 [ 64, 267 ]
#   2 [ 2, 2 ] 1 [2] 4 [ 4, 1 ]
#     3 [ 1, 1, 1 ] 1 [1] 8 [ 8, 3 ]
#     3 [ 2, 2, 1 ] 2 [3] 20 [ 8, 2 ]
#       4 [ 8, 8, 7, 7 ] 2 [5] 64 [ 16, 2 ]
#       4 [ 1, 1, 8, 8 ] 4 [10] 64 [ 16, 3 ]
#       4 [ 1, 1, 1, 1 ] 1 [11] 72 [ 16, 11 ]
#         5 [ 1, 1, 8, 8, 1 ] 8 [39] 256 [ 32, 27 ]
#         5 [ 1, 1, 1, 1, 8 ] 4 [42] 256 [ 32, 34 ]
#       4 [ 2, 2, 8, 8 ] 4 [16] 64 [ 16, 4 ]
#         5 [ 1, 1, 8, 8, 7 ] 4 [37] 256 [ 32, 33 ]
#         5 [ 2, 2, 8, 8, 7 ] 4 [53] 256 [ 32, 32 ]
#           6 [ 2, 2, 7, 7, 8, 7 ] 8 [197] 0 [ 64, 245 ]
#       4 [ 2, 2, 1, 1 ] 2 [17] 184 [ 16, 10 ]
#         5 [ 14, 14, 13, 13, 13 ] 4 [81] 256 [ 32, 21 ]
#         5 [ 14, 14, 14, 13, 13 ] 4 [85] 256 [ 32, 24 ]
#         5 [ 1, 1, 14, 14, 14 ] 8 [118] 256 [ 32, 22 ]
#         5 [ 1, 1, 1, 1, 8 ] 4 [126] 256 [ 32, 28 ]
#         5 [ 1, 1, 1, 1, 1 ] 1 [127] 752 [ 32, 46 ]
#           6 [ 1, 1, 14, 14, 14, 1 ] 16 [471] 0 [ 64, 202 ]
#           6 [ 1, 1, 1, 1, 1, 14 ] 8 [510] 0 [ 64, 211 ]
#         5 [ 2, 2, 14, 13, 13 ] 16 [161] 256 [ 32, 30 ]
#           6 [ 1, 1, 1, 13, 13, 1 ] 8 [163] 0 [ 64, 241 ]
#           6 [ 2, 2, 13, 14, 14, 1 ] 8 [199] 0 [ 64, 215 ]
#         5 [ 2, 2, 14, 14, 14 ] 8 [162] 256 [ 32, 23 ]
#           6 [ 1, 1, 14, 14, 14, 13 ] 4 [149] 0 [ 64, 209 ]
#           6 [ 2, 2, 14, 14, 14, 13 ] 4 [213] 0 [ 64, 208 ]
#         5 [ 2, 2, 1, 1, 8 ] 8 [170] 256 [ 32, 25 ]
#           6 [ 1, 1, 1, 1, 1, 1 ] 4 [171] 0 [ 64, 226 ]
#           6 [ 2, 2, 7, 7, 1, 8 ] 8 [202] 0 [ 64, 234 ]
#           6 [ 2, 2, 8, 8, 7, 7 ] 8 [209] 0 [ 64, 221 ]
#           6 [ 2, 2, 8, 8, 1, 1 ] 8 [219] 0 [ 64, 199 ]
#         5 [ 2, 2, 1, 1, 1 ] 2 [171] 1712 [ 32, 45 ]
#           6 [ 32, 32, 31, 31, 31, 31 ] 8 [833] 0 [ 64, 192 ]
#           6 [ 32, 32, 32, 32, 31, 31 ] 8 [853] 0 [ 64, 195 ]
#           6 [ 1, 1, 32, 32, 32, 32 ] 16 [1110] 0 [ 64, 193 ]
#           6 [ 1, 1, 1, 1, 1, 14 ] 8 [1190] 0 [ 64, 203 ]
#           6 [ 1, 1, 1, 1, 1, 1 ] 1 [1191] 0 [ 64, 261 ]
#           6 [ 2, 2, 32, 32, 31, 31 ] 32 [1517] 0 [ 64, 205 ]
#           6 [ 2, 2, 32, 32, 32, 32 ] 16 [1518] 0 [ 64, 194 ]
#           6 [ 2, 2, 1, 1, 1, 14 ] 16 [1598] 0 [ 64, 196 ]
#           6 [ 2, 2, 1, 1, 1, 1 ] 2 [1599] 0 [ 64, 260 ]
#     3 [ 2, 2, 2 ] 1 [4] 8 [ 8, 4 ]
#       4 [ 2, 2, 1, 1 ] 4 [5] 16 [ 16, 13 ]
#         5 [ 2, 2, 1, 1, 2 ] 4 [10] 32 [ 32, 49 ]
#       4 [ 2, 2, 2, 2 ] 4 [8] 72 [ 16, 12 ]
#         5 [ 16, 16, 16, 16, 15 ] 8 [22] 256 [ 32, 26 ]
#         5 [ 1, 1, 1, 16, 15 ] 4 [42] 256 [ 32, 31 ]
#           6 [ 1, 1, 16, 1, 15, 15 ] 8 [153] 0 [ 64, 242 ]
#           6 [ 1, 1, 1, 16, 15, 16 ] 16 [166] 0 [ 64, 240 ]
#         5 [ 2, 2, 1, 16, 16 ] 8 [62] 256 [ 32, 29 ]
#           6 [ 1, 1, 16, 1, 15, 16 ] 8 [154] 0 [ 64, 219 ]
#           6 [ 1, 1, 1, 16, 15, 15 ] 8 [165] 0 [ 64, 210 ]
#           6 [ 2, 2, 15, 1, 15, 1 ] 16 [203] 0 [ 64, 232 ]
#           6 [ 2, 2, 16, 1, 16, 15 ] 16 [217] 0 [ 64, 243 ]
#           6 [ 2, 2, 16, 1, 16, 1 ] 16 [219] 0 [ 64, 220 ]
#           6 [ 2, 2, 16, 1, 16, 2 ] 8 [220] 0 [ 64, 224 ]
#           6 [ 2, 2, 1, 15, 15, 16 ] 8 [226] 0 [ 64, 233 ]
#         5 [ 2, 2, 1, 1, 1 ] 4 [63] 272 [ 32, 48 ]
#           6 [ 16, 16, 16, 16, 15, 15 ] 8 [85] 0 [ 64, 198 ]
#           6 [ 16, 16, 16, 16, 15, 16 ] 8 [86] 0 [ 64, 201 ]
#           6 [ 1, 1, 1, 16, 15, 1 ] 4 [167] 0 [ 64, 216 ]
#           6 [ 2, 2, 1, 16, 16, 15 ] 16 [237] 0 [ 64, 227 ]
#           6 [ 2, 2, 1, 16, 16, 1 ] 8 [239] 0 [ 64, 206 ]
#           6 [ 2, 2, 1, 16, 16, 2 ] 8 [240] 0 [ 64, 218 ]
#           6 [ 2, 2, 1, 1, 1, 16 ] 16 [242] 0 [ 64, 231 ]
#           6 [ 2, 2, 1, 1, 1, 2 ] 4 [244] 0 [ 64, 264 ]
#         5 [ 2, 2, 2, 16, 15 ] 4 [68] 256 [ 32, 35 ]
#           6 [ 1, 1, 16, 1, 15, 1 ] 8 [155] 0 [ 64, 236 ]
#           6 [ 1, 1, 1, 16, 15, 16 ] 16 [166] 0 [ 64, 237 ]
#           6 [ 2, 2, 16, 1, 16, 16 ] 16 [218] 0 [ 64, 235 ]
#           6 [ 2, 2, 16, 1, 16, 1 ] 32 [219] 0 [ 64, 223 ]
#           6 [ 2, 2, 16, 2, 15, 15 ] 8 [221] 0 [ 64, 239 ]
#           6 [ 2, 2, 16, 2, 15, 16 ] 16 [222] 0 [ 64, 244 ]
#           6 [ 2, 2, 16, 2, 15, 2 ] 32 [224] 0 [ 64, 225 ]
#           6 [ 2, 2, 1, 16, 16, 15 ] 16 [229] 0 [ 64, 222 ]
#           6 [ 2, 2, 1, 16, 16, 16 ] 16 [230] 0 [ 64, 214 ]
#           6 [ 2, 2, 1, 1, 1, 16 ] 16 [234] 0 [ 64, 228 ]
#           6 [ 2, 2, 1, 1, 1, 1 ] 8 [235] 0 [ 64, 213 ]
#           6 [ 2, 2, 2, 16, 15, 16 ] 16 [246] 0 [ 64, 238 ]
#         5 [ 2, 2, 2, 2, 1 ] 4 [71] 752 [ 32, 47 ]
#           6 [ 26, 26, 26, 26, 25, 25 ] 16 [341] 0 [ 64, 197 ]
#           6 [ 26, 26, 26, 26, 26, 26 ] 16 [342] 0 [ 64, 200 ]
#           6 [ 1, 1, 1, 26, 25, 25 ] 8 [501] 0 [ 64, 207 ]
#           6 [ 2, 2, 1, 26, 26, 26 ] 16 [686] 0 [ 64, 204 ]
#           6 [ 2, 2, 1, 1, 1, 16 ] 16 [694] 0 [ 64, 229 ]
#           6 [ 2, 2, 1, 1, 1, 1 ] 4 [695] 0 [ 64, 263 ]
#           6 [ 2, 2, 2, 26, 25, 25 ] 8 [729] 0 [ 64, 212 ]
#           6 [ 2, 2, 2, 26, 26, 26 ] 16 [730] 0 [ 64, 217 ]
#           6 [ 2, 2, 2, 2, 1, 16 ] 16 [748] 0 [ 64, 230 ]
#           6 [ 2, 2, 2, 2, 1, 1 ] 4 [749] 0 [ 64, 262 ]
#         5 [ 2, 2, 2, 2, 2 ] 8 [72] 32 [ 32, 50 ]
#           6 [ 2, 2, 2, 2, 2, 1 ] 16 [31] 0 [ 64, 265 ]
#           6 [ 2, 2, 2, 2, 2, 2 ] 16 [32] 0 [ 64, 266 ]




#DisplayProfile();ClearProfile();
#XSAMMEL:=[];COUNTER:=0;LFDNR:=0;
#ILIST:=[1..1];QQQY(2);#1#
#ILIST:=[1..2];QQQY(4);#2#
#ILIST:=[2..5];QQQY(8);#3
#[ , 1, 1, 1, 0 ]5
#ILIST:=[2..4];QQQY(16);#4
#[ , 1, 1, 2 ]9
#ILIST:=[10..14];QQQY(16);#4
#,,,,, 1, 2, 2, 4, 0 ]18
#XSAMMELVIEWER4(XSAMMEL);
#ILIST:=[21..35];QQQY(32);Print("\007");#5
#,,,,,,,,,,,,, 3, 3, 5, 8, 11, 5, 2, 9, 11, 8, 7, 5, 5, 2, 5 ]107
#ILIST:=[45..51];QQQY(32);Print("\007");#5
#,,,,,,,,,,,,, 1, 2, 2, 7, 2, 2, 0 ]123
#XSAMMELVIEWER4(XSAMMEL);
#DisplayProfile();ClearProfile();
#XSAMMELMERK_36:=StructuralCopy(XSAMMEL);;
#SaveWorkspace("WORKSPACE_36");#FEHLERSUCH
#XSAMMEL:=StructuralCopy(XSAMMELMERK_36);;
##ILIST:=[204,213,217,218];QQQY(64);Print("\007");#6
##ILIST:=[219..219];QQQY(64);Print("\007");#6
##XSAMMELMERK_36:=StructuralCopy(XSAMMEL);;
##XSAMMEL:=StructuralCopy(XSAMMELMERK_36);;
#ILIST:=[192..245];QQQY(64);Print("\007");#6
#  ,,,,,, 4, 4, 7, 17, 21, 
#  ,,,,,, 4, 64, 7, 17, 21 (jeweils die untere Zeile mit R=[[1],[1,1]...
#  7, 8, 5, 4, 5, 4,  20, 22, 14, 31, 11, 6, 6, 22, 4, 8, 12, 10, 7, 14, 16, 6, 17, 19, 9, 13, 15, 2, 6, 10, 22, 
#  7, 8, 5, 4, 5, 64, 20, 22, 14, 31, 11, 6, 6, 22, 4, 8, 12, 10, 7, 14, 16, 6, 17, 19, 9, 13, 15, 2, 6, 10, 22, 
#  11, 13, 10, 7, 17, 21, 18, 11, 5, 12, 7, 2, 7, 7, 2, 6, 10, 1 ]715
#  11, 13, 10, 7, 17, 21, 18, 11, 5, 12, 7, 2, 7, 7, 2, 6, 10, 1 ]893
#ILIST:=[260..267];QQQY(64);Print("\007");#6
#  ,,,,,,,, 1, 2,  2, 9, 4, 4, 3, 0 ]740
#  ,,,,,,,, 6, 22, 2, 9, 4, 4, 3, 1 ]944
#XSAMMELVIEWER4(XSAMMEL);
#DisplayProfile();ClearProfile();
##R:=[[1],[2,2],[2,2,1],[2,2,1,1],[2,2,1,1,1],[2,2,1,2,2,14]];
##G:=AsGroup(MagmaByMultiplicationTable(MatrixOf(R)));time;IdSmallGroup(G);
##inh:=206;RMAXSUCH(G);
#XSAMMELMERK_64:=StructuralCopy(XSAMMEL);;
#SaveWorkspace("WORKSPACE_36");#FEHLERSUCH
#XSAMMEL:=StructuralCopy(XSAMMELMERK_64);;
##ILIST:=[2167..2167];QQQY(128);Print("\007");
##inh=2167 ......
##G  FULL 1545662/ 108273kb live   10550K/ 507281kb dead    17956$
##G  FULL 1688464/ 114182kb live   10626K/ 513702kb dead    19177/ 177152kb free
##G  FULL 1857749/ 121232kb live  8167056/ 379309kb dead    20185/ 189440kb free
##G  FULL 2027078/ 128323kb live  6830807/ 312917kb dead    21630/ 202240kb free
##...............................................................................$
##[1125] 97
#ILIST:=[2150..2300];QQQY(128);Print("\007");
#ILIST:=[2319..2328];QQQY(128);Print("\007");
#  ,,,,,,,,, 5, 5, 9, 29, 34, 8, 14, 11, 9, 8, 8, 7, 5, 5, 34, 36, 21, 97, 14, 6, 6, 29, 5, 10, 19, 15, 13, 13, 25, 
#  35, 10, 15, 21, 23, 10, 14, 16, 12, 4, 8, 4, 12, 14, 16, 19, 37, 16, 27, 23, 9, 18, 22, 24, 21, 14, 6, 13, 23, 8, 
#  3, 10, 8, 15, 13, 15, 5, 27, 18, 28, 12, 24, 26, 20, 15, 17, 12, 26, 28, 16, 10, 14, 14, 20, 17, 9, 14, 9, 33, 
#  19, 22, 17, 18, 22, 20, 16, 44, 32, 28, 22, 14, 15, 31, 26, 44, 15, 20, 21, 8, 3, 7, 11, 12, 2, 7, 19, 37, 50, 
#  45, 28, 19, 17, 28, 24, 41, 50, 23, 21, 26, 28, 29, 10, 6, 14, 25, 33, 31, 34, 36, 10, 22, 30, 25, 36, 32, 50, 
#  58, 42, 41, 65, 22, 11 ]3826
#,,,, 1, 2, 2, 11, 5, 5, 5, 2, 2, 0 ]3861
#XSAMMELVIEWER4(XSAMMEL);
#DisplayProfile();ClearProfile();
#SaveWorkspace("WORKSPACE_36");#FEHLERSUCH
####PrintTo("RF.txt",XSAMMEL);nee, nich mehr mach
####in RF.txt XSAMMEL:= ...; ergaenzen
##Read("RF.txt");
##ILIST:=[55637..55637];QQQY(256);Print("\007");
##ILIST:=[55638..55638];QQQY(256);Print("\007");
###Read("RF.txt");#nich mit neuem XSAMMEL
###ILIST:=[55644..55644];QQQY(256);Print("\007");
###ILIST:=[55647..55647];QQQY(256);Print("\007");
### XFUELL(XSAMMEL);XSAMMELVIEWER2(XSAMMEL);RMERKER:=[];XSAMMELVIEWER3(XSAMMEL,1);
### SaveWorkspace("WORKSPACE_36");#FEHLERSUCH
#ILIST:=[55626..56058];QQQY(256);Print("\007");
#SaveWorkspace("WORKSPACE_36");#fast fertig
#ILIST:=[56082..56092];QQQY(256);Print("\007");
#SaveWorkspace("WORKSPACE_36");#ganz fertig
#DisplayProfile();ClearProfile();
#XSAMMELVIEWER4(XSAMMEL);
#  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, 6, 6, 11, 45, 51, 9,
#  19, 18, 15, 10, 15, 11, 8, 5, 5, 6, 5, 6, 52, 54, 30, 225, 17, 6, 6, 35,
#  6, 12, 25, 19, 28, 20, 5, 24, 26, 17, 39, 13, 9, 10, 16, 17, 61, 14, 19,
#  33, 6, 14, 10, 8, 3, 7, 11, 13, 2, 8, 3, 31, 41, 55, 46, 20, 10, 33, 16,
#  26, 26, 23, 13, 6, 28, 8, 8, 19, 3, 14, 16, 19, 6, 12, 24, 53, 45, 57, 53,
#  33, 22, 20, 40, 29, 25, 40, 33, 35, 30, 63, 46, 40, 12, 23, 23, 26, 51,
#  42, 66, 73, 28, 37, 35, 29, 44, 25, 30, 37, 65, 30, 34, 30, 11, 7, 15, 36,
#  11, 37, 40, 70, 25, 22, 35, 42, 30, 22, 51, 36, 32, 39, 33, 19, 14, 27,
#  36, 33, 51, 30, 87, 16, 11, 26, 19, 24, 31, 21, 15, 16, 22, 22, 43, 23,
#  17, 31, 22, 23, 31, 48, 24, 33, 21, 36, 34, 12, 25, 19, 45, 42, 21, 12,
#  23, 28, 35, 5, 23, 30, 21, 32, 20, 23, 20, 19, 11, 55, 55, 31, 47, 51, 10,
#  18, 21, 42, 38, 26, 28, 15, 11, 10, 14, 4, 10, 12, 31, 25, 21, 3, 20, 17,
#  34, 19, 12, 17, 21, 40, 22, 52, 26, 27, 17, 13, 16, 19, 11, 80, 81, 43,
#  45, 10, 35, 43, 25, 36, 29, 36, 39, 49, 22, 25, 87, 45, 89, 45, 27, 30,
#  24, 37, 65, 56, 40, 26, 20, 9, 54, 32, 64, 34, 52, 33, 32, 32, 22, 11, 88,
#  56, 52, 89, 45, 52, 51, 32, 26, 29, 15, 19, 58, 36, 66, 72, 43, 39, 77,
#  47, 50, 42, 46, 26, 21, 26, 32, 79, 56, 44, 65, 61, 63, 66, 103, 104, 59,
#  28, 27, 27, 14, 25, 59, 34, 97, 65, 36, 42, 75, 49, 69, 35, 40, 30, 25,
#  29, 30, 80, 59, 51, 60, 78, 63, 65, 84, 94, 5, 51, 62, 62, 23, 75, 72, 35,
#  3, 15, 7, 29, 18, 26, 17, 24, 14, 10, 38, 27, 26, 44, 25, 30, 31, 5, 25,
#  12, 29, 18, 40, 12, 12, 32, 19, 24, 38, 29, 34, 12, 34, 48, 25, 42, 18,
#  63, 59, 40, 31, 26, 15, 79, 29, 46, 27, 95, 30, 63, 38, 41, 33, 40, 24,
#  17, 18, 11, 14, 15, 3, 61, 80, 87, 40, 23, 24, 28, 10, 60, 92, 49, 33, 63,
#  31, 35, 59, 25, 65, 82, 61, 39, 79, 43, 54, 56, 21, 19, 20, 17, 5 ]18316
#  ,,,,,,,,,,,,,,,,,,,,,,,,,,,  1, 2, 2, 13, 6, 6, 6, 4, 4, 4, 0 ]18364
## ,,,,,,,,,,,,,,,,,,,,,,,,,,, 8, 44, 2, 13, 6, 6, 6, 4, 4, 4, 1 ]284
#ILIST:=[10493062..10494173];QQQY(512);Print("\007");
#ILIST:=[10494201..10494213];QQQY(512);Print("\007");
#XFUELL(XSAMMEL);;XSAMMELVIEWER2(XSAMMEL);;RMERKER:=[];;;XSAMMELVIEWER3(XSAMMEL,1);;XLEER(XSAMMEL);;XSAMMELVIEWER4(XSAMMEL,[],1);Print("\n");LFDNR;
#erstmal bis n=64, ist aber nicht brauchbar wegen der 15
#FEHLERSUCH wegen der Sortierung 6 [

Print ("     XSAMMEL.txt geladen\n");
