#Read("XSAMMEL.txt");
#Read("PcgsOfR.txt");#macht aus R ein Pcgs
#Read("MatrixOf.txt");#macht aus R eine Mat
#SaveWorkspace("GAP_WORKSPACE_XSAMMEL");

XMERK:=[];
ZEILE:=[];SPALTE:=[];S1:=[];S2:=[];
FINBIT:=0;FIXBIT:=0;FIXFIX:=-1;PBIT:=0;
HRES0:=[];HRES:=[];STEP:=0;CLIST:=[];R:=[];
XSAMMEL:=[];
XMERKZAHL:=0;XMERKZAHLVEKTOR:=[];COUNTER:=0;
LFDNR:=0;n:=1;nmax:=2048;HRESEXT:=[];HRESANF:=[];

WEGLI:=[];WEGEZAHL:=0;WEGEARRAY:=[];
ILIST:=[];RMERKER:=[];
RMAX:=0;RMAXSUCH:=IdFunc;
inh:=0;
DDDDBIT:=0;DBIT:=0;
PARTZ:=0;XMERKZAHLZIEL:=9999999;
AUZAHL:=0;FAKT:=[];


LETZTERABZWEIG:=0;

LETZTEWEGELISTE:=[];WHALT:=0;
LETZTEWEGEZAHLVEKTOR:=[];
HRES0SIZE:=0;
EINMALBIT:=0;
NZUITAB:=[];
QUADRATTYP:=4;

#Schnittstellen zu GAP
Commu:=function(a,b) return Comm(a,b); end;
Commu:=function(a,b) return (b*a)^2; end;

PositionFirstComponentRepariert:=function(ZEIGER,PNEU)
  return PositionSorted(ZEIGER,[PNEU]);
  end;

IZUN:=function(L) return Iterated(Reversed(L),function(a,b) return a+a+b; end); end;
PZUN:=function(L,S) return Iterated(L{[Minimum(3,S)..S]},function(a,b) return 4*a+b; end); end;
NZUI:=function(n,S) return CoefficientsQadic(1024+n,2){[1..S]}; end;
NZUI:=function(n,S) return NZUITAB[n+1]{[1..S]}; end;
for i in [0..1023] do NZUITAB[i+1]:=CoefficientsQadic(1024+i,2); od;

#
QY09:=function(PNEU)#packt PNEU[i] von [0,1,0,0] in 8.
  local RET;
  RET:=Iterated(PNEU,function(a,b) return a+a+b; end)+1;
  return RET;
  end;

QY10:=function(HRES,S,GROUP)#ob HRES ein pcgs ist
  local RET,j,e;
  e:=HRES[1]^0;
  RET:=(HRES[1])^2 in GROUP;
  if RET=true then 
    for j in [2..S] do
      if not Commu(HRES[1],HRES[j]) in GROUP then RET:=false; #C
        fi; 
      od;
    fi;
  if RET=true then
    if S=2 and HRES[1]^2<>e then RET:=false; fi;
    if S=3 and (HRES[1]^2<>(HRES[3]*HRES[1])^2 or HRES[1]^2<>(HRES[2]*HRES[1])^2 or HRES[1]^2=e) then RET:=false; fi;
    if S=4 and (HRES[1]^2=e or HRES[1]^2=HRES[2]^2) and ((HRES[2]*HRES[1])^2=e or (HRES[2]*HRES[1])^2=HRES[2]^2) then RET:=false; fi;
    fi;
  return RET;
  end;

PcgsByPcSequenceNC11:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC07:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC12:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC15:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNC14:=function(a,b) return PcgsByPcSequenceNC(a,b); end;
PcgsByPcSequenceNCMI:=function(a,b) return PcgsByPcSequenceNC(a,b); end;

QY11:=function(HRES,S)#bestimmt PNEU aus HRES
  local PNEU,j,pcgs;
  pcgs:=PcgsByPcSequenceNC11(FamilyObj(HRES[1]),HRES);
  PNEU:=[QY09(ExponentsOfPcElement(pcgs,pcgs[1]^2))];#RP
  for j in [2..S] do
    Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]) )),2);#C
    od;
  return PNEU;
  end;

WEGEVERGLEICHER:=function(WEG1)
  local S,HRES,T,PART,ZEIGER,LETZTELISTE,PHI,APP,LRES;
  S:=HRES0SIZE;
  LETZTELISTE:=[];
  ZEIGER:=XSAMMEL;LRES:=StructuralCopy(WEG1[2]);
  for T in [1..S] do 
    PART:=ZEIGER[WEG1[1][T]];
    LRES{[S-T+1..S]}:=List([1..T],i->PcElementByExponentsNC(LRES{[S-T+1..S]},NZUI(PART[3][i],T)));
    if IsBound(PART[5]) then 
      PART:=PART[5]; 
      fi;
    LRES{[S-T+1..S]}:=List([1..T],i->PcElementByExponentsNC(LRES{[S-T+1..S]},NZUI(PART[10][i],T)));
    if IsBound(PART[12]) then
      PART:=PART[12];
      fi;
    ZEIGER:=PART[6];
    od;
  return LRES;
  end;

QY07:=function(S)
  local k,kk,W,H,i,r,ret,pcgs,LRES,MRES,NRES;
  W:=WEGLI{[1..S]};
  H:=HRESEXT{[1..S]};
  LRES:=WEGEVERGLEICHER([W,Reversed(H)]);
if W=WHALT then Error("halt da"); fi;
  k:=S+1;kk:=0;ret:=false;i:=0;
  if WEGEZAHL>0 then
    k:=1;
    while H[k]=LETZTEWEGELISTE[WEGEZAHL][2][k] do k:=k+1; od;
    k:=k-1;
#-    Print(k);
    i:=WEGEZAHL;
    while ret=false and i>0 and H{[1..k]}=LETZTEWEGELISTE[i][2]{[1..k]} do 
      MRES:=List([1..S],j->PcElementByExponentsNC(LRES,LETZTEWEGELISTE[i][4][j]));
#      Print("\nÂ§ ",i," ",Size(LETZTEWEGELISTE)," ",MRES);
      kk:=1;
      while IsBound(H[kk]) and H[kk]=Reversed(MRES)[kk] and W[kk]=LETZTEWEGELISTE[i][1][kk] do kk:=kk+1; od;
      kk:=kk-1;
#-      Print(kk);
      if kk>k then ret:=true; fi;
      i:=i-1; od;
    i:=i+1;
    fi;
  if ret=false then
    pcgs:=PcgsByPcSequenceNC07(FamilyObj(LRES[1]),LRES);
    NRES:=List([1..S],i->ExponentsOfPcElement(pcgs,Reversed(H)[i]));
    WEGEZAHL:=WEGEZAHL+1;
    LETZTEWEGELISTE[WEGEZAHL]:=[W,H,k,NRES]; 
    k:=S; 
    fi;
      
#-  Print(ret,kk,k,S,i,k+2);
  return [ret,kk,k,S,i];
  end;

QY08:=function(ZEIGER,PNEU,S)#Position von PNEU in XSAMMEL
  local ISO;
  ISO:=PZUN(UMKEHRLIST(PNEU),S)+1;
  if not IsBound(ZEIGER[ISO]) then ISO:=0; fi;
  return ISO;
  end;

RMAXSUCHREKURSIV:=function(C)#rekursiver Aufruf von RMAXSUCH
  local NMERK,XMERKMERK,HRESMERK,
        HRES0MERK,HRES0SIZEMERK,CLISTMERK,XMERKZAHLMERK,WEGPOSMERK,RM,
        WEGEZAHLMERK,WEGLIMERK,WEGEARRAYMERK,
        XMERKZAHLZIELMERK,FAKTMERK,LETZTEWEGELISTEMERK,
        HRESEXTMERK,HRESANFMERK,EINMALBITMERK;
  #STEP,XMERKZAHL noch offen
  NMERK:=n;
  XMERKMERK:=StructuralCopy(XMERK);
  HRESMERK:=List(HRES);
  HRES0MERK:=List(HRES0);
  HRES0SIZEMERK:=HRES0SIZE;
  CLISTMERK:=List(CLIST);
  XMERKZAHLMERK:=XMERKZAHL;
  RM:=List(R);
  WEGEZAHLMERK:=WEGEZAHL;
  WEGLIMERK:=StructuralCopy(WEGLI);
  WEGEARRAYMERK:=StructuralCopy(WEGEARRAY);
  XMERKZAHLZIELMERK:=XMERKZAHLZIEL;XMERKZAHLZIEL:=999999;
  FAKTMERK:=StructuralCopy(FAKT);
  LETZTEWEGELISTEMERK:=StructuralCopy(LETZTEWEGELISTE);
  HRESEXTMERK:=StructuralCopy(HRESEXT);
  HRESANFMERK:=StructuralCopy(HRESANF);
  EINMALBITMERK:=EINMALBIT;
   RMAXSUCH(C);
  n:=NMERK;
  XMERK:=XMERKMERK;
  HRES:=HRESMERK;
  HRES0:=HRES0MERK;
  HRES0SIZE:=HRES0SIZEMERK;
  CLIST:=CLISTMERK;
  XMERKZAHL:=XMERKZAHLMERK;
  R:=RM;
  WEGEZAHL:=WEGEZAHLMERK;
  WEGLI:=WEGLIMERK;
  WEGEARRAY:=WEGEARRAYMERK;
  XMERKZAHLZIEL:=XMERKZAHLZIELMERK;
  FAKT:=FAKTMERK;
  LETZTEWEGELISTE:=LETZTEWEGELISTEMERK;
  HRESEXT:=HRESEXTMERK;
  HRESANF:=HRESANFMERK;
  EINMALBIT:=EINMALBITMERK;
  end;

QY12:=function(C,S,nn) #bestimmt XMERK
  local i,j,jj,HI,ISO,elm,exp,fam,pcgs, p0,p1,PNEU,HRES1,APHI;
  if not(IsBound(XMERK[S])) then 
    XMERK[S]:=[]; ZEILE[S]:=0; S1[S]:=0; S2[S]:=1; fi;
  ZEILE[S]:=ZEILE[S]+1;SPALTE[S]:=0;
  for i in [nn+1..2*nn] do if FIXBIT=0 then
    SPALTE[S]:=SPALTE[S]+1;
    if SPALTE[S]=S2[S] then S2[S]:=2*S2[S]-1; fi;
    Add(HRES,CLIST[i],1);

    #ist QY10 mit pcgs zurueck:
    pcgs:=PcgsByPcSequenceNC12(FamilyObj(HRES[1]),HRES);
    PNEU:=[QY09(ExponentsOfPcElement(pcgs,pcgs[1]^2))];#RP
    for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]) )),2); od;#C

    ISO:=0;
    for j in XMERK[S] do if ISO=0 and PNEU=j[1] then ISO:=j; fi; od;
    if ISO=0 then
      if IsBound(XMERK[S][1]) then p0:=XMERK[S][1][2]; else
        p0:=PcgsByPcSequenceNC12(FamilyObj(HRES0[1]),HRES0{[HRES0SIZE-S+1..HRES0SIZE]});
        fi;
      APHI:=List([1..S],i->IZUN(ExponentsOfPcElement(p0,HRES[i])));
      if ZEILE[S]>1 and SPALTE[S]=1 and FIXFIX<>0 then
        FIXBIT:=FIXFIX;
        for jj in [1..Size(XMERK[S])] do
          p1:=XMERK[S][jj][2];
          HRES1:=List(APHI,i->PcElementByExponents(p1,NZUI(i,S)));

          pcgs:=PcgsByPcSequenceNC12(FamilyObj(HRES1[1]),HRES1);
          PNEU:=[QY09(ExponentsOfPcElement(pcgs,HRES1[1]^2))];
          for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs, Commu(pcgs[1], pcgs[j]))),2); od; #C

          ISO:=[List(PNEU),pcgs];
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(pcgs,HRES0[HRES0SIZE-S+i]))));
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(p0,HRES1[i]))));
          Add(XMERK[S],ISO);
          if PBIT<>0 then Print("\n:",S," ",STEP,ISO); fi; STEP:=STEP+1;
          od;
        else 
          ISO:=[List(PNEU),pcgs];
          Add(ISO,List([1..S],i->IZUN(ExponentsOfPcElement(pcgs,HRES0[HRES0SIZE-S+i]))));
          Add(ISO,APHI);
          Add(XMERK[S],ISO);
          if PBIT<>0 then Print("\n.",S," ",STEP,ISO,"\c"); fi; STEP:=STEP+1;
          fi;
      else if 2*nn=n and ZEILE[S]>1 and SPALTE[S]=1 then FIXBIT:=FIXFIX; fi;  
        fi;

    if 2*nn<n and ISO=XMERK[S][1] and (ZEILE[S]>1 or SPALTE[S]>=S1[S]) then
      QY12(C,S+1,2*nn);
      if FIXBIT<>0 and ZEILE[S]=1 then S1[S]:=S2[S]; FIXBIT:=0; fi;  
      fi;
    Remove(HRES,1); 
    fi; od;
  end;

QY14:=function() #bestimmt PMAX in XMERK
  local S,SMAX,PMAX,P,i,imax,HRES1,PNEU,pcgs,pcgs1,p0,exp,p1,j;
  S:=Size(XMERK);SMAX:=Size(XMERK[S]);
  PMAX:=[];
  for i in [1..SMAX] do
    if -XMERK[S][i][1]>-PMAX then imax:=i; PMAX:=XMERK[S][i][1]; fi;
    od;
  pcgs:=XMERK[S][imax][2];
    for i in [1..SMAX] do
      HRES1:=List([1..S],j->PcElementByExponents(pcgs,NZUI(XMERK[S][i][4][j],S)));
      pcgs1:=PcgsByPcSequenceNC14(FamilyObj(HRES1[1]^0),HRES1);
      PNEU:=[QY09(ExponentsOfPcElement(pcgs1,HRES1[1]^2))];
      for j in [2..S] do Add(PNEU,QY09(ExponentsOfPcElement( pcgs1, Commu(pcgs1[1], pcgs1[j]))),2); od; #C
      XMERK[S][i][2]:=pcgs1;
      XMERK[S][i][1]:=List(PNEU);
#W#      Unbind(XMERK[S][i][4]);
      od;
  imax:=1;#ist so nach der letzten Umformung
  return imax;
  end;

#das noch neuere QY15, jetzt mit PZUN()
QY15:=function(ZEIGER,XM,IPMIN,S) #packt XMERK in XSAMMEL rein
  local POS,i,ZMERK,HRES,HRES2,pcgs,pcgs2,STUFE;
  Print(StringNumbers([LogInt(Size(XM),2)+11],128),"\c");
  POS:=PZUN(UMKEHRLIST(XM[IPMIN][1]),S)+1;
  if ZEIGER=[] and S>3 then #ZEIGER:=[];#ZEIGER:=EmptyPlist(QUADRATTYP^(S-2));
#Print("\n?????????????????? neue Emptylist mit ", QUADRATTYP^(S-2),"\n");
    fi;
  ZEIGER[POS]:=XM[IPMIN];
  ZEIGER[POS][6]:=EmptyPlist(QUADRATTYP^(S-1));#[];
  ZEIGER[POS][8]:=Size(XM);
        HRES2:=ZEIGER[POS][2];#alles aus XMISCH
        if HRESANF=[] then 
          HRESANF:=HRES2;
          fi;
        HRES:=HRESANF;STUFE:=Size(HRES);
        pcgs:=PcgsByPcSequenceNC15(FamilyObj(HRES[1]^0),List(HRES));
        pcgs2:=PcgsByPcSequenceNC15(FamilyObj(HRES2[1]^0),List(HRES2));
        ZEIGER[POS][11]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs,HRES2[j])));
        ZEIGER[POS][10]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs2,HRES[j])));
  ZEIGER[POS][14]:=POS;
  ZMERK:=ZEIGER[POS];
  COUNTER:=COUNTER+1;
  for i in [1..Size(XM)] do if i<>IPMIN then
    POS:=PZUN(UMKEHRLIST(XM[i][1]),S)+1;
    ZEIGER[POS]:=XM[i];
    ZEIGER[POS][5]:=ZMERK;
    ZEIGER[POS][14]:=POS;
    fi; od;
  end;


#das neue
QY21:=function(HRESALT,S,nn,ZEIGER,PNEU) #HRES2->HRES
  local HRES,NICHDRIN,ISO,RET,RGL,INDEX1,GNR;
  HRES:=List(HRESALT);NICHDRIN:=0;RET:=ZEIGER;RGL:=[];GNR:=0;
  ISO:=QY08(ZEIGER,PNEU,S);
##Print("\nQY21:ISO=",ISO);
  if ISO=0 then
    if 2*nn<n then inh:=inh+1;
      Print("\nGruppe ",IdSmallGroup(Group(HRES))," fehlt noch \c");
      RMAXSUCHREKURSIV(Group(HRES));
      Print("\nGruppe ",IdSmallGroup(Group(HRES))," jetzt drin \c");
      fi;
      ISO:=QY08(ZEIGER,PNEU,S);
    fi;
  if ISO=0 then NICHDRIN:=-1; INDEX1:=0; else
    ISO:=ZEIGER[ISO];
    HRES:=List([1..S],i->PcElementByExponentsNC(HRES,NZUI(ISO[3][i],S)));
    INDEX1:=ISO[14];
    if IsBound(ISO[5]) then ISO:=ISO[5]; fi;
    if IsBound(ISO[12]) then #Print("\007");
      HRES:=List([1..S],i->PcElementByExponentsNC(HRES,NZUI(ISO[10][i],S)));
      ISO:=ISO[12];
      fi;
    RGL:=ISO[1];
    RET:=ISO[6];
    if IsBound(ISO[7]) then GNR:=ISO[7]; fi;
    fi;
  return [HRES,RET,NICHDRIN,RGL,INDEX1,GNR];
  end;
   
QY13:=function(C,S,nn,ZEIGER,AU)
  local i,j,ri,RC,PNEU,GR,HRESMERK,RDRIN,HRES0MERK,ZR,RBIT,ZR3MERK,rj,
  orbi,ORB,STAB,RBITNEU,WNUMB,WEGEFLAG,CLISTSIZE,IPMIN;
#Print("?\c");
  RBIT:=0;RDRIN:=0;WNUMB:=WEGEZAHL;
  if HRES<>[] then GR:=Group(HRES); else GR:=Group(Identity(C)); fi;
  RC:=RightTransversal(C,GR);
#  RC:=CosetDecomposition(C,GR);RC:=List(RC,i->Set(i));
  if S<=AUZAHL then
    STAB:=Stabilizer(AU,Set(GR),OnSets);
    ORB:=Orbits(STAB,RC,OnSets);
    RC:=List(ORB,i->Representative(i));
#-Print("\n*****ORB*",S,ORB);
    else STAB:=0; fi;
  for rj in RC do if rj<>RC[1] and RDRIN>-1 then 
    if S<=AUZAHL then ri:=Representative(rj); else ri:=rj; fi;
    Add(HRES,ri,1);HRESEXT[S]:=ri;
#-if S<=AUZAHL and AUZAHL>0 then Print("\n*****ri**",ri," ",ri^2); fi;
    if S=1 then Print(".\c"); fi;
#W# if S=1 then Print("\n******",ri," ",ri^2); fi;
### if S=2 then Print("\n******",rj); fi;
    if QY10(HRES,S,GR) then
#X#Print("\n",S," ");
#-      if S=1 then Print("/",Size(RC)-Position(RC,rj)+1,"\c"); if DBIT=1 then Print("\n"); fi; fi;
#0#FAKT[S]:=Size(ORB[Position(RC,rj)]);
      PNEU:=QY11(HRES,S);
      R[S]:=List(PNEU);
      HRESMERK:=List(HRES);
      ZR:=QY21(HRES,S,nn,ZEIGER,PNEU);
      HRES:=List(ZR[1]);WEGLI[S]:=ZR[5];ZR3MERK:=ZR[3];
      if 2*nn<n then 
        RBIT:=QY13(C,S+1,2*nn,ZR[2],STAB); 
        else #Print("\n",ZR3MERK);
          if EINMALBIT=-1 then if ZR3MERK=0 then EINMALBIT:=-2; else EINMALBIT:=-3; fi; else EINMALBIT:=-4; fi;
          if ZR3MERK<>0 then #RDRIN=0
            HRES0MERK:=List(HRES0);
            HRES0:=List(HRES);HRES0SIZE:=S;
            CLIST:=[Identity(C)];CLISTSIZE:=1;
            for i in Reversed(HRES0) do
              for j in [1..CLISTSIZE] do
                Add(CLIST,i*CLIST[j]);CLISTSIZE:=CLISTSIZE+1;
                od; od;
            XMERK:=[];FIXBIT:=0;HRES:=[];STEP:=1;
            QY12(C,1,1);
            IPMIN:=QY14();
            QY15(ZR[2],XMERK[S],IPMIN,S);
            XMERKZAHL:=XMERKZAHL+1;
            ZR:=QY21(HRES0,S,nn,ZEIGER,PNEU);
            WEGLI[S]:=ZR[5];
            HRES0:=HRES0MERK;
#-            Print("*\c");
            fi;
#          if ZR3MERK=0 and WEGEZAHL=0 then RBIT:=0; else 
            RBIT:=QY07(S)[3]+2;
#            fi;
          if DBIT=1 then
            Print("\n",Size(LETZTEWEGELISTE),RBIT<=S,HRESEXT{[1..S]}," ",ZR3MERK," ",RBIT," ",WEGLI{[1..S]}," ");
            if ZR3MERK=-1 then Print("DONNERWETTER "); fi;
            fi;
          if DDDDBIT=1 then RBIT:=999999; fi;
#0#          Print("\n^^^^",WEGLI," ",FAKT{[1..S]}," ",Size(STAB)," \c");
          fi; #(if 2*nn<n)
#X#Print("RBIT=",RBIT);
      if EINMALBIT<>-2 and RBIT>0 and RBIT<=S then RDRIN:=-1; fi;
      if EINMALBIT=-2 then RDRIN:=-1; fi;
      HRES:=List(HRESMERK);
      fi; #(if QY10(HRES,S,GR))
    Remove(HRES,1);
    fi; od; #(for ri in RC do if ri<>RC[1] and RDRIN>-1)
  return RBIT;
  end;

XFUELL:=function(XSAMMEL) #wenn [6] gleich <=== dann fuellt [7], falls [2] nicht int
  local i,S,POS,GRP;
  S:=Size(XSAMMEL);
  for i in [1..S] do
    if IsBound(XSAMMEL[i]) and IsBound(XSAMMEL[i][6]) then
      POS:=i;
      if not(IsInt(XSAMMEL[POS][2])) then
        GRP:=Group(XSAMMEL[POS][2]);
        if Size(GRP)<512 then
          XSAMMEL[POS][7]:=IdSmallGroup(GRP);
          else
#Error("Wie kam inh=56092 hier rein? Weil f 2^Size(XSAMMEL[POS][1])<n gefehlt hat!");
#Error("Wie kam inh=56092 hier rein? Jetzt ist inh=",inh);
            XSAMMEL[POS][7]:=[512,inh];
            fi;
        else XFUELL(XSAMMEL[i][6]); fi;
#      Print(XSAMMEL[POS][7],"\c");
#      XSAMMEL[POS][8]:=0;
      fi;
#    XSAMMEL[POS][8]:=XSAMMEL[POS][8]+1;
    od;
  end;
#XFUELL(XSAMMEL);
XMISCH:=function(XSAMMEL,POSITION,STUFE)
  local i,ii,S,LEER,HRES,HRES2,pcgs,pcgs2;
  S:=Size(XSAMMEL);#Error(XSAMMEL);
  if not IsBound(RMERKER[STUFE]) then RMERKER[STUFE]:=[]; fi;

if n=nmax and 2^STUFE=n then
  for ii in [1..S] do 
    if 2^STUFE<=n then 
      i:=XSAMMEL[S-ii+1]; 
      if IsBound(i[6]) then
        if not IsBound(RMERKER[STUFE][i[7][2]]) then 
          RMERKER[STUFE][i[7][2]]:=i; 
          else Remove(XSAMMEL,S-ii+1); fi; 
        else Remove(XSAMMEL,S-ii+1); fi;
      fi;
    od;


else
  for ii in [1..S] do if IsBound(XSAMMEL[ii]) and 2^STUFE<=n then i:=XSAMMEL[ii]; if IsBound(i[6]) then
#Error("\n\n\n***********",i);
    if not IsBound(RMERKER[STUFE][i[7][2]]) then #nicht gleich [1] setzen!!!
      RMERKER[STUFE][i[7][2]]:=i; 
      i[10]:=List([1..STUFE],j->2^(j-1)); 
      i[11]:=List([1..STUFE],j->2^(j-1));
      else if not IsBound(i[12]) then
        i[12]:=RMERKER[STUFE][i[7][2]];
        HRES2:=i[2];
        HRES:=i[12][2];#Error("22222");
        pcgs:=PcgsByPcSequenceNCMI(FamilyObj(HRES[1]^0),List(HRES));
        pcgs2:=PcgsByPcSequenceNCMI(FamilyObj(HRES2[1]^0),List(HRES2));
        i[11]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs,HRES2[j])));
        i[10]:=List([1..STUFE],j->IZUN(ExponentsOfPcElement(pcgs2,HRES[j])));
        Unbind(i[6]);
        fi; fi;
#    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ",
#      i[1]," ",i[8]," [",ii,"..",ii+i[5]-1,"] ",i[7][2]);
    if IsBound(i[12]) then 
#      Print(" *"); 
      else
        XMISCH(i[6],1,STUFE+1);
        fi;
    fi; fi; od;
fi;
  end;

XLEER:=function(XSAMMEL) #fuellt [7][8]
  local i,S;
  S:=Size(XSAMMEL);
  if S>0 then if 2^Size(XSAMMEL[S][1])<=n then for i in [1..S] do
    if IsBound(XSAMMEL[i]) then
      if not(IsInt(XSAMMEL[i][2])) then LFDNR:=LFDNR+1; fi; 
      XSAMMEL[i][2]:=i;
      if IsBound(XSAMMEL[i][6]) then XLEER(XSAMMEL[i][6]); fi;
      fi;
    od; fi; fi;
  end;

RMAXSUCH:=function(C)
  local AU;
  n:=Size(C);
  if AUZAHL>0 then AU:=AutomorphismGroup(C); else AU:=0; fi;
  XMERK:=[];HRES:=[];STEP:=1;R:=[];WEGLI:=[];FAKT:=[];
  #  XSAMMEL:=[];
  XMERKZAHL:=0;WEGEZAHL:=0;
  WEGEARRAY:=[];LETZTEWEGELISTE:=[];HRESANF:=[];
  QY13(C,1,1,XSAMMEL,AU);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XFUELL***");
   XFUELL(XSAMMEL);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XMISCH***");
   RMERKER:=[];XMISCH(XSAMMEL,[],1);
#XSAMMELVIEWER0(XSAMMEL);
#Print("\n***XLEER***");
   XLEER(XSAMMEL);
#XSAMMELVIEWER0(XSAMMEL);
Print(" <",WEGEZAHL,"> ",XMERKZAHL);
  return XMERKZAHL;
  end;

ILIST:=[1,1];
QQQY:=function(n)
  local C;
  XMERKZAHLVEKTOR:=[];LETZTEWEGEZAHLVEKTOR:=[];
  if ILIST[1]=1 then ILIST:=[1..NumberSmallGroups(n)]; fi;
  for inh in ILIST do
Print("\n\ninh=",inh," \c");
    C:=SmallGroup(n,inh);RMAXSUCH(C);
Print("\n[",WEGEZAHL,"] ",XMERKZAHL);
    XMERKZAHLVEKTOR[inh]:=XMERKZAHL;
    LETZTEWEGEZAHLVEKTOR[inh]:=WEGEZAHL;
    od;
  Print("\n",Compacted(XMERKZAHLVEKTOR),COUNTER);
  Print("\n",Compacted(LETZTEWEGEZAHLVEKTOR));
  Print("\n");
  end;


#POS (nur bei)        Inhalt
#1                    PNEU
#2                    erst HRES dann ???Positionsindex???
#3                    klein phi
#4                    erst klein phi dann Unbound
#5   not IsBound(6)   kleiner Tunnel oder Unbound
#6                    Fortsetzung XSAMMEL
#7   IsBound([6])     IdSmallGroup
#8    "               Anzahl klein Phi hierher
#9    "               groÃ Phi
#10   "               Unbound, war mal [1,2,8,1] als Weg zu 
#11   "               groÃ Phi
#12   "               Unbound, Platz fÃ¼r groÃ Phi
#13   "               groÃer Tunnel
#14                   anstelle Index in XSAMMEL fÃ¼r WEGEBAUM[.]

UMKEHRLIST:=function(PNEU)
  return List(PNEU,function(i) return i-1; end);#-i-1;
  end;


XSAMMELVIEWER:=function(XSAMMEL)
  local i;
  for i in XSAMMEL do if IsBound(i[6]) then 
#    Print(i[1],IdSmallGroup(Group(i[2])));
#    Print(IdSmallGroup(Group(i[2])));
    Print(i[7]);
    XSAMMELVIEWER(i[6]);
    fi; od;
  end;
#XSAMMELVIEWER(XSAMMEL);

XSAMMELVIEWER0:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  for i in XSAMMEL do  
    Print("\n",LEER{[1..2*Size(i[1])-2]});#die EinrÃ¼ckung
    Print("(",i[14],") ");#steht in Wegebaum dann
    Print(Size(i[1])," ");
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      if IsBound(i[5][7]) then 
        Print(i[5][7]," : ");
        else Print("= ??????? ",i[5][10],i[5][11]);
        fi;
      Print(i[3],i[4]);
      else
        Print(i[3],i[4]);
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," ; ",i[10],i[11]);
            else Print("==-> ",i[12][2]," ");
            fi;
          else 
            if IsBound(i[7]) then 
              Print("= ",i[7]," "); 
              else Print("= ??? ",i[10],i[11]);
              fi;
            fi;
        XSAMMELVIEWER0(i[6]);
        fi;
    od;
  end;

XSAMMELVIEWER1:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  if Size(XSAMMEL)>0 then for i in XSAMMEL{[Size(XSAMMEL)]} do  
    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die EinrÃ¼ckung
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," "); 
            else Print("===> ???");
            fi;
          else 
            if IsBound(i[7]) then 
              Print("<=== ",i[7]," "); 
              else Print("<=== ???");
              fi;
            fi;
        Print("(",i[14],") ");#steht in Wegebaum dann
        XSAMMELVIEWER1(i[6]);
        fi;
    od; fi;
  end;

XSAMMELVIEWER2:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);LEER:="                  ";
  for i in XSAMMEL do  
    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die EinrÃ¼ckung
    Print(UMKEHRLIST(i[1])," ");#PNEU
    Print(i[2]," ");
    if IsBound(i[5]) then 
      Print(i[5][2]," "); 
      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            Print("===> ",i[12][7]," "); 
            else Print("===> ???");
            fi;
          Print("(",i[14],") ");
          else 
            if IsBound(i[7]) then 
              Print("<=== ",i[7]," "); 
              else Print("<=== ???");
              fi;
            Print("(",i[14],") ");#steht in Wegebaum dann
            XSAMMELVIEWER2(i[6]);
            fi;
        fi;
    od;
  end;

XSAMMELVIEWER3:=function(XSAMMEL)
  local i,ii,S,LEER,STUFE;
  S:=Size(XSAMMEL);LEER:="                  ";
  STUFE:=Size(XSAMMEL[1][1]);
  for ii in [1..S] do i:=XSAMMEL[ii]; if IsBound(i[6]) then
    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ");
    View(UMKEHRLIST(i[1]));
    Print(" ",i[8]," [",ii,"] ",Size(i[6])," ",i[7]);
    if IsBound(i[12]) then 
      Print(" *"); 
      else
        if IsBound(i[6][1]) then XSAMMELVIEWER3(i[6]); fi;
        fi;
    fi; od;
  end;
#RMERKER:=[];XSAMMELVIEWER3(XSAMMEL,1);Print("\n");PMERKER;

XSAMMELVIEWER4:=function(XSAMMEL)#neu aus 3 ohne *
  local i,ii,S,LEER,STUFE;
  S:=Size(XSAMMEL);LEER:="                  ";
  STUFE:=Size(XSAMMEL[S][1]);
  for ii in [1..S] do if IsBound(XSAMMEL[ii]) then i:=XSAMMEL[ii]; if IsBound(i[6]) and not IsBound(i[12]) then 
    Print("\n",LEER{[1..2*Size(i[1])-2]}," ",STUFE," ");
    View(UMKEHRLIST(i[1]));
    Print(" ",i[8]," [",ii,"] ",Size(i[6])," ",i[7]);
    if IsBound(i[12]) then 
      Print(" *"); 
      else
        if IsBound(i[6]) and i[6]<>[] then LETZTERABZWEIG:=i[6]; XSAMMELVIEWER4(i[6]); fi;
        fi;
    fi; fi; od;
  end;
#XSAMMELVIEWER4(XSAMMEL,[],1);Print("\n");

PARTFIND:=function(XSAMMEL,PART)
  local i,S,LEER,RBIT;
  S:=Size(XSAMMEL);RBIT:=0;
  for i in XSAMMEL do if RBIT=0 then
    if IsIdenticalObj(i,PART) then RBIT:=-1; fi;
#    Print("\n",LEER{[1..2*Size(i[1])-2]},Size(i[1])," ");#die EinrÃ¼ckung
#    Print(UMKEHRLIST(i[1])," ");#PNEU
#    Print(i[2]," ");
    if IsBound(i[5]) then 
#      Print(i[5][2]," "); 
#      Print("(",i[14],") ");#steht in Wegebaum dann
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
#            Print("===> ",i[12][7]," "); 
#            else Print("===> ???");
            fi;
          else 
            if IsBound(i[7]) then 
#              Print("<=== ",i[7]," "); 
#              else Print("<=== ???");
              fi;
            fi;
#        Print("(",i[14],") ");#steht in Wegebaum dann
        if Size(i[1])<Size(PART[1]) then RBIT:=PARTFIND(i[6],PART); fi;
        if RBIT=-1 then Add(RMAX,UMKEHRLIST(i[1]),1); fi;
        fi;
    fi; od;
  return RBIT;
  end;

PARTZAHL:=function(XSAMMEL)
  local i,S,LEER;
  S:=Size(XSAMMEL);
  for i in XSAMMEL do
    PARTZ:=PARTZ+1;
    if IsBound(i[5]) then 
      else
        if IsBound(i[12]) then 
          if IsBound(i[12][7]) then 
            fi;
          else 
            if IsBound(i[7]) then 
              fi;
            fi;
        PARTZAHL(i[6]);
        fi;
    od;
  end;
#PARTZ:=0;PARTZAHL(XSAMMEL);PARTZ;

WEGEDISP:=function(WEG,ZEIGER,S)
  local PART,ZEIG;
  for PART in ZEIGER do if PART[14]=WEG[S] then
#-    Print("\n",UMKEHRLIST(PART[1]),PART[14]);
    ZEIG:=PART;
    if IsBound(ZEIG[5]) then ZEIG:=ZEIG[5]; fi;
#-    Print("-->",UMKEHRLIST(ZEIG[1]));
    if IsBound(ZEIG[12]) then ZEIG:=ZEIG[12]; fi;
#-    Print("==>",UMKEHRLIST(ZEIG[1]));
    if S<Size(WEG) then ZEIG:=WEGEDISP(WEG,ZEIG[6],S+1); fi;
    fi; od;
  return ZEIG;
  end;

T:=function(n)
  DisplayProfile();ClearProfile();
  XSAMMEL:=[];COUNTER:=0;LFDNR:=0;
  ILIST:=[1..1];QQQY(2);#1#
  ILIST:=[1..2];QQQY(4);#2#
  ILIST:=[2..5];QQQY(8);#3
  if n>8 then
   ILIST:=[2..4];QQQY(16);#4
   ILIST:=[10..14];QQQY(16);#4
   DisplayProfile();ClearProfile();
   if n>16 then
     ILIST:=[21..35];QQQY(32);#5
     ILIST:=[45..51];QQQY(32);#5
     DisplayProfile();ClearProfile();
     if n>32 then
       ILIST:=[192..245];QQQY(64);Print("\007");#6
       ILIST:=[260..267];QQQY(64);Print("\007");#6
       DisplayProfile();ClearProfile();
       fi;
     fi;
   fi;
 end;
 
#  RMAXSUCH(G);
#  PART:=WEGEDISP(WEGLI,XSAMMEL,1);;
ALLEWEGEDISP:=function(PART,ZEIGER,S)
  local ZEIG;
  for PART in ZEIGER do
    Print("\n",UMKEHRLIST(PART[1]),PART[14]);
    ZEIG:=PART;
    if IsBound(ZEIG[5]) then ZEIG:=ZEIG[5]; fi;
    Print("-->",UMKEHRLIST(ZEIG[1]));
    if IsBound(ZEIG[12]) then ZEIG:=ZEIG[12]; fi;
    Print("==>",UMKEHRLIST(ZEIG[1]));
    if IsBound(ZEIG[6]) then ALLEWEGEDISP(PART,ZEIG[6],S+1); fi;
    od;
  end;
  
GANZLOS:=function()
  local G;
  Exec("date");
  XSAMMEL:=[];#nur anfangs einmal
  XMERKZAHLZIEL:=99999;#45,24,77,5
  ILIST:=[56082..56092];QQQY(256);Print("\007");
  Exec("date");inh:=4444;Print("inh=",inh);XMERKZAHLZIEL:=5;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[ 256, 256, 256, 256, 256, 256, 256, 256, 255 ]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4442;Print("inh=",inh);XMERKZAHLZIEL:=77;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,2,1,256,256]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4432;Print("inh=",inh);XMERKZAHLZIEL:=24;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,2,2,256,255]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");inh:=4431;Print("inh=",inh);XMERKZAHLZIEL:=45;R:=[[1],[2,2],[2,2,2],[2,2,2,2],[2,2,2,2,2],[2,2,2,2,2,2],[2,2,2,2,2,2,2],[2,2,2,2,2,2,2,2],[2,2,2,2,2,1,1,256,255]];G:=PcgsOfR(R);RMAXSUCH(G);Print(XMERKZAHL," ",WEGEZAHL);Print("\007");
  Exec("date");
  SaveWorkspace("GAP_WORKSPACE_4431");
  end;
#AUZAHL:=4;GANZLOS();


ProfileFunctions([QY07,PositionSorted,
PositionFirstComponentRepariert,QY12,Size,Group,
StructuralCopy,PcElementByExponentsNC,PcgsByPcSequenceNC,
PcgsByPcSequenceNC11,
PcgsByPcSequenceNC07,
PcgsByPcSequenceNC12,
PcgsByPcSequenceNC15,
PcgsByPcSequenceNC14,
PcgsByPcSequenceNCMI,
ExponentsOfPcElement,RightTransversal,RightCosetsNC,
QY10,QY11,QY08,QY21,QY15,QY14,QY13,QY09,
XFUELL,XMISCH,XLEER,Commu,Stabilizer,Orbits,IZUN,NZUI,QY07,WEGEVERGLEICHER]);

Print ("     XSAMMEL.txt geladen\n");
